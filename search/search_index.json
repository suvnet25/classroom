{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"V\u00e4lkommen!","text":"<p>V\u00e4lkommen till suvnets site f\u00f6r objektorienterad programmering i C# och .NET! H\u00e4r hittar du all planering f\u00f6r kursen, lektion f\u00f6r lektion, med anteckningar, l\u00e4nkar till material och \u00f6vningar. Har ni egna id\u00e9er p\u00e5 vad som kan vara bra att ha med s\u00e5 \u00e4r det bara att s\u00e4ga till. </p> <p>Det finns tre viktiga sektioner h\u00e4r:</p> <ol> <li>Moment - H\u00e4r kan du se vad vi g\u00e5tt igenom hittils.</li> <li>Studiematerial - H\u00e4r finns material om allt vi g\u00e5r igenom i kursen.</li> <li>Veckoplaneringen du ser till v\u00e4nster, med lektioner och tillh\u00f6rande \u00f6vningar.</li> </ol> <p>Ut\u00f6ver denna site s\u00e5 finns n\u00e5gra fler st\u00e4llen att h\u00e5lla reda p\u00e5:</p>"},{"location":"#discord","title":"Discord","text":"<p>F\u00f6r all allm\u00e4n kommunikation, fr\u00e5gor och svar, diskussioner och s\u00e5 vidare. Det \u00e4r p\u00e5 discord ni hittar l\u00e4rarna och era kurskamrater.</p>"},{"location":"#google-classroom","title":"Google Classroom","text":"<p>D\u00e4r hittar ni exakta scheman och lektionssalar, enk\u00e4tunders\u00f6kningar och vissa andra dokument.</p>"},{"location":"#github-classroom","title":"GitHub Classroom","text":"<p>Anv\u00e4nds fram\u00f6ver f\u00f6r att dela ut inl\u00e4mningsuppgifter. L\u00e4nk: classroom.github.com</p> <p> </p>"},{"location":"categories/","title":"Kategorier","text":""},{"location":"categories/#tag:oop1","title":"OOP1","text":"<ul> <li>            Array          </li> <li>            Enums          </li> <li>            Exceptions          </li> <li>            Felhantering          </li> <li>            Iteration          </li> <li>            Kodblock          </li> <li>            Metoder          </li> <li>            Operatorer          </li> <li>            Selektion          </li> <li>            Statements          </li> <li>            Struktur          </li> <li>            Syntax          </li> <li>            Uttryck          </li> <li>            Variabler          </li> </ul>"},{"location":"categories/#tag:oop1-l\u00e4xa","title":"OOP1-L\u00e4xa","text":"<ul> <li>            L\u00e4xa 14 Objektorienterad design          </li> </ul>"},{"location":"categories/#tag:oop1-quiz","title":"OOP1-quiz","text":"<ul> <li>            Quiz Arv          </li> <li>            Quiz Exceptions          </li> <li>            Quiz GIT          </li> <li>            Quiz Inkapsling          </li> <li>            Quiz Konstruktorer          </li> <li>            Quiz OOP Design          </li> <li>            Quiz Properties          </li> <li>            Quiz klasser          </li> </ul>"},{"location":"categories/#tag:oop1-\u00f6vning","title":"OOP1-\u00d6vning","text":"<ul> <li>            Extra \u00f6vningar          </li> <li>            \u00d6vning 02 Grunder          </li> <li>            \u00d6vning 03 File          </li> <li>            \u00d6vning 03 Pseudokod          </li> <li>            \u00d6vning 03 Random          </li> <li>            \u00d6vning 03 String          </li> <li>            \u00d6vning 04 Metoder          </li> <li>            \u00d6vning 05 Metoder          </li> <li>            \u00d6vning 07 Adressboken          </li> <li>            \u00d6vning 07 F\u00f6rbered          </li> <li>            \u00d6vning 08 Inkapsling          </li> <li>            \u00d6vning 08 OOP Design          </li> <li>            \u00d6vning 09 Git          </li> <li>            \u00d6vning 10 Konstruktor          </li> <li>            \u00d6vning 10 Properties          </li> <li>            \u00d6vning 11 Arv          </li> <li>            \u00d6vning 12 Exceptions          </li> <li>            \u00d6vning 14 Enums          </li> <li>            \u00d6vning 14 Refaktorering          </li> <li>            \u00d6vning 15 Abstrakta klasser          </li> <li>            \u00d6vning 15 SOLID          </li> <li>            \u00d6vning 16 - Interfaces          </li> </ul>"},{"location":"categories/#tag:oop1-\u00f6vning-sv\u00e5r","title":"OOP1-\u00d6vning (sv\u00e5r)","text":"<ul> <li>            \u00d6vning 02 Todo CLI          </li> </ul>"},{"location":"moment/","title":"Moment","text":"<p>Det vi har g\u00e5tt igenom hittils i kursen \u00e4r gr\u00f6nmarkerat nedan. St\u00e4ll dig sj\u00e4lv fr\u00e5gan ibland: Bland de ikryssadeade punkterna nedan, vilka vet jag vad de betyder och hur de fungerar? Skulle jag kunna f\u00f6rklara f\u00f6r n\u00e5gon annan n\u00e5got om det?</p>"},{"location":"moment/#allmanna-begrepp","title":"Allm\u00e4nna begrepp","text":"<ul> <li> Filsystem</li> <li> IDE / Editor / VSCode</li> <li> Terminal/Console</li> <li> Milj\u00f6 (Environment)</li> <li> Ramverk / Framework</li> <li> C# och .NET</li> <li> Kompilering: K\u00e4llkod / Bytekod / Maskinkod</li> <li> Algoritmer</li> </ul>"},{"location":"moment/#metodik","title":"Metodik","text":"<ul> <li> Pseudokod</li> <li> Fl\u00f6desscheman</li> <li> Debugging</li> <li> Kodstandard</li> <li> Parprogrammering</li> </ul>"},{"location":"moment/#c","title":"C#","text":"<ul> <li> Keywords</li> <li> Operatorer/Uttryck/Satser</li> <li> Enum</li> <li> Felhantering</li> <li> Exceptions: Try/Catch/Finally</li> <li> Skapa egna exceptions (Att det g\u00e5r att skapa \u00e4r det viktiga att veta)</li> </ul>"},{"location":"moment/#variabler","title":"Variabler","text":"<ul> <li> typ, namn, v\u00e4rde</li> <li> Deklaration och initialisering</li> <li> byte, int, long</li> <li> float, double</li> <li> string</li> <li> bool</li> <li> array</li> <li> List&lt;&gt;</li> <li> null</li> <li> Variablers livsl\u00e4ngd &lt;- Viktigt!</li> <li> Reference type / Value type &lt;- Viktigt!</li> <li> Garbage Collection</li> </ul>"},{"location":"moment/#kontrollstrukturer","title":"Kontrollstrukturer","text":"<ul> <li> Kodblock</li> <li> If-if else-else</li> <li> While</li> <li> For</li> <li> Foreach</li> </ul>"},{"location":"moment/#metoder","title":"Metoder","text":"<ul> <li> Metoddeklaration</li> <li> \"Rena\" metoder och single responsibility principle</li> <li> Metodsignatur</li> <li> Method overloading</li> <li> Method overriding (ex ToString())</li> </ul>"},{"location":"moment/#net-bibliotek","title":".NET-bibliotek","text":"<ul> <li> Console</li> <li> ReadLine / WriteLine</li> <li> Convert / Parse</li> <li> Random</li> <li> File (ReadAllText, ReadAllLines, WriteAllText)</li> <li> DateTime</li> </ul>"},{"location":"moment/#git-och-github","title":"GIT och GitHub","text":"<ul> <li> Init</li> <li> Add</li> <li> Status</li> <li> Log</li> <li> Commit</li> <li> Branch / Merge</li> <li> Switch (Checkout)</li> <li> Remote</li> <li> Clone</li> <li> Fetch/Push/Pull</li> <li> GitHUB: Fork</li> </ul>"},{"location":"moment/#objektorienterad-programmering","title":"Objektorienterad Programmering","text":"<ul> <li> OOP som begrepp</li> <li> Klasser och objekt</li> <li> Keywordet new</li> <li> Inkapsling (Begreppet)</li> <li> Properties (Get/Set)</li> <li> Konstruktorer </li> <li> Namespaces</li> <li> Abstrakta klasser</li> <li> Polymorphism (Begreppet)</li> <li> Object som alla klassers basklass</li> <li> Arv (Begreppet)</li> <li> Abstraktion (Begreppet)</li> <li> Interface</li> <li> SOLID</li> <li> Struct</li> <li> Record</li> </ul>"},{"location":"moment/#lista-pa-keywords-som-vi-kommer-ga-igenom-i-kursen","title":"Lista p\u00e5 keywords som vi kommer g\u00e5 igenom i kursen","text":"A\u2013C C\u2013E F\u2013I I\u2013O O\u2013S T\u2013W abstract class false interface override this as const finally internal private throw base continue float is protected true bool decimal for long public try break default foreach namespace ref typeof byte do goto* new return virtual case double if null static void catch else in object string while char enum int out switch <ul> <li>F\u00f6rbjudet, anv\u00e4nd aldrig keywordet <code>goto</code>. L\u00e5tsas som att det inte finns. </li> </ul>"},{"location":"examination/","title":"Examinerande uppgifter","text":"<p>Det \u00e4r ett antal uppgifter i kursen som \u00e4r examinerande:</p> <p>\u2605 Teoretiskt prov. IG/G/VG \u2605 Projektarbete IG/G/VG</p>"},{"location":"examination/#labbar","title":"Labbar","text":"<p>Labbarna ska genomf\u00f6ras under lektionstiod och kollas av l\u00e4rare. De examineras enbart som godk\u00e4nda/icke godk\u00e4nda. Deltar du i lektionerna och genomf\u00f6r labbarna s\u00e5 \u00e4r du godk\u00e4nd. Om du inte kan delta i lektionerna s\u00e5 kan du g\u00f6ra labbarna p\u00e5 egen hand och skicka in dem f\u00f6r granskning.</p> <p>\u2605 Lab #1 \u2605 Lab #2 \u2605 Lab #3 \u2605 Lab #4 \u2605 Lab #5</p>"},{"location":"examination/Labbar/lab1/","title":"\u2713 Lab #1","text":""},{"location":"examination/Labbar/lab1/#problemlosning-och-debugging","title":"Probleml\u00f6sning och debugging","text":"<p>F\u00f6rsta labben! N\u00e4r dagen \u00e4r \u00f6ver, skicka in er Program.cs via Google Classroom (Det finns in inl\u00e4mningsuppgift f\u00f6r labben upplagd d\u00e4r). Det \u00e4r helt ok att jobba i par eller i en mindre grupp i denna uppgift om ni vill, men det \u00e4r ocks\u00e5 helt ok att jobba sj\u00e4lv. Om ni jobbar fler \u00e4n en person, skicka in en kopia av koden var p\u00e5 Google Classroom, och skriv en kommentar med namnen p\u00e5 alla som deltagit i arbetet.</p>"},{"location":"examination/Labbar/lab1/#uppgift","title":"Uppgift","text":"<p>Ni hoppar in och jobbar lite extra p\u00e5 Skatteverket. En junior utvecklare har l\u00e4mnat lite halvf\u00e4rdig kod som ni kommer att f\u00e5 ta \u00f6ver.</p> <p>Ert jobb i stora drag:</p> <ol> <li>Fixa f\u00f6rst buggarna i den befintliga koden.</li> <li>L\u00e4gg till funktioner f\u00f6r att ber\u00e4kna skatt f\u00f6r en person.</li> </ol> <p>I denna labb kommer du att skriva ett litet program. Du kan du komma att beh\u00f6va:</p> <ul> <li>Skapa och anv\u00e4nda variabler</li> <li>Arbeta med arrayer eller listor samt loopar</li> <li>Skriva och anropa metoder</li> <li>L\u00e4sa och skriva till filer med File.ReadAllLines / WriteAllLines</li> <li>Anv\u00e4nda String-metoder s\u00e5som <code>Split</code>, <code>IsNullOrWhitespace</code> eller <code>Trim</code></li> </ul>"},{"location":"examination/Labbar/lab1/#kom-igang","title":"Kom ig\u00e5ng","text":"<ol> <li>Skapa ett nytt konsolprojekt med <code>dotnet new console</code></li> <li>Kopiera in nedanst\u00e5ende kod in i <code>Program.cs</code></li> <li>Fixa buggarna s\u00e5 att programmet kan k\u00f6ras.</li> <li>F\u00f6lj instruktionerna som st\u00e5r under startkoden.</li> </ol> <pre><code>class Program\n{\n    static void Main() //Ok n\u00e5tt \u00e4r fel med progammet, det startar inte ens. Hinner inte fixa, har m\u00f6te med chefen om 5 min. //Pelle Programmerare\n    {\n        while (false)\n        {\n            Console.WriteLine(\"V\u00c4LKOMMEN TILL SKATTEVERKET 1.0\\n\");\n            Console.WriteLine(\"1) Ber\u00e4kna skatt f\u00f6r en person\");\n            Console.WriteLine(\"2) Ber\u00e4kna skatt f\u00f6r flera personer fr\u00e5n fil\");\n            Console.WriteLine(\"3) Avsluta\\n\");\n            Console.Write(\"Val: \");\n\n            string input = Console.ReadLine();\n\n            if (input == 1)\n            {\n                // Bra kod f\u00f6r att ber\u00e4kna skatt f\u00f6r en person kommer h\u00e4r. Efter fikapausen. //Pelle Programmerare\n            }\n            else if (input == 2)\n            {\n                Console.WriteLine(\"DET H\u00c4R VALET FUNKAR INTE \u00c4NNU! GE MIG MER BETALT S\u00c5 FIXAR JAG DET JAG LOVAR.\");\n            }\n            else if (input == 3)\n            {\n                //H\u00e4r ska progarmmet avslutas men vet inte exakt hur. Kanske inte \u00e4r s\u00e5 viktigt heller. //Pelle Programmerare\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"examination/Labbar/lab1/#instruktioner-fran-den-tidigare-utvecklaren","title":"Instruktioner fr\u00e5n den tidigare utvecklaren","text":"<p>Ok det h\u00e4r programmet \u00e4r t\u00e4nkt att kunna ber\u00e4kna inkomstskatt f\u00f6r en person. S\u00e5 h\u00e4r ska det g\u00e5 till har jag t\u00e4nkt:  </p> <p>1. V\u00e4lj i menyn att du vill ber\u00e4kna skatt f\u00f6r en person 2. Du f\u00e5r d\u00e5 mata in personens namn, f\u00f6delse\u00e5r, inkomst och om den \u00e4r med i kyrkan eller inte 3. Programmet ber\u00e4knar skatten och skriver ut resultatet p\u00e5 sk\u00e4rmen!</p> <p>Skatterna som ska ber\u00e4knas \u00e4r:</p> <ul> <li>Om inkomsten \u00e4r mindre \u00e4n 24 900 kr s\u00e5 \u00e4r skatten 0 kr</li> <li>Om du \u00e4r \u00f6ver 65 \u00e4r \u00e4r det 65 300 kr som g\u00e4ller ist\u00e4llet f\u00f6r 24 900 kr</li> <li>Kommunalskatt 20% p\u00e5 den del av inkomsten som \u00f6verstiger 24 900 kr</li> <li>Statlig skatt 30% p\u00e5 den del av inkomsten som \u00f6verstiger 625 800 kr</li> <li>Kyrkoavgift 1% (om personen \u00e4r med i kyrkan)</li> </ul> <p>Exempel p\u00e5 resultat:</p> <pre><code>SKATTEKVITTERING\n-----------------------------\nNamn: Pelle Programmerare\nF\u00f6delse\u00e5r: 1965\nInkomst: 600000 kr\nKyrkotillh\u00f6righet: Ja\n\nKommunalskatt:     105020 kr\nStatlig skatt:          0 kr\nKyrkoavgift:         6000 kr\n-----------------------------\nTotalt att betala: 141020 kr\n</code></pre> <p>Tips!</p> <ul> <li>Angrip sm\u00e5 problem i taget. Inte allt p\u00e5 en g\u00e5ng.</li> <li>B\u00f6rja med att f\u00e5 programmet att kompilera.</li> <li>G\u00f6r en del i taget. B\u00f6rja med att samla in data fr\u00e5n anv\u00e4ndaren tex.</li> <li>Om du inte f\u00e5r till matten, g\u00f6r en ungef\u00e4rlig ber\u00e4kning till att b\u00f6rja med. Om det ligger in en metod kan du enkelt komma tillbaka och f\u00f6rb\u00e4ttra den senare. Samma sak g\u00e4ller andra metoder.</li> <li>Anv\u00e4nd debuggern f\u00f6r att f\u00f6rst\u00e5 hur koden fungerar.</li> </ul> <p>Hur l\u00e4gger jag till nya metoder n\u00e4r det finns en Main-metod redan?</p> <p>Du m\u00e5ste s\u00e4tta dina metoder utanf\u00f6r Main-metodens m\u00e5svingar, men innanf\u00f6r klassens m\u00e5svingar. Du m\u00e5ste ocks\u00e5 s\u00e4tta metoden till att vara <code>static</code>. Exempel:</p> <pre><code>class Program\n{\n    static void Main()\n    {\n        PrintMessage(\"Hej\");\n    }\n\n    static void PrintManyTimes(string value)\n    {\n        Console.WriteLine(value);\n    }\n}\n</code></pre>"},{"location":"examination/Labbar/lab1/#strechgoals-om-det-finns-tid","title":"Strechgoals om det finns tid","text":"<p>(Eller om du vill jobba vidare hemma)  </p> <ol> <li>Du matar ocks\u00e5 in personens hem-kommun (skattesatsen varierar ju mellan kommuner)<ul> <li>L\u00e4s in alla skattesatser fr\u00e5n en fil (finns att ladda ner h\u00e4r) och anv\u00e4nd korrekt skattesats beroende p\u00e5 vilken kommun personen bor i.</li> </ul> </li> <li>G\u00f6r klart menyval 2, som l\u00e4ser in den fil anv\u00e4ndaren skriver in namnet p\u00e5 och ber\u00e4knar skatt f\u00f6r alla personer i filen. Exempel p\u00e5 fil finns att ladda ner h\u00e4r.<ul> <li>Skriv ut skattekvittona till en fil ist\u00e4llet f\u00f6r p\u00e5 sk\u00e4rmen. Tex till <code>skattekvitton.txt</code>. (Tips: Metoden <code>File.AppendText()</code> kan vara bra h\u00e4r).</li> </ul> </li> <li>Hur skrivs siffror i kvittot ut p\u00e5 ett snyggt s\u00e4tt utan allt f\u00f6r m\u00e5nga decimaler? -&gt; Unders\u00f6k \"format strings\" i C#.</li> <li>Anv\u00e4nder du n\u00e5gon felhantering? Dvs, vad h\u00e4nder om anv\u00e4ndaren skriver in text n\u00e4r du f\u00f6rv\u00e4ntar dig en siffra? Eller en siffra d\u00e4r det ska vara text?</li> <li>Ist\u00e4llet f\u00f6r f\u00f6delse\u00e5r, skriv in personnummer och r\u00e4kna ut \u00e5ldern fr\u00e5n det. <ul> <li>Hur kan du validera att personnumret som skrivits in \u00e4r ett korrekt skrivet personnummer?</li> </ul> </li> </ol>"},{"location":"examination/Labbar/lab2/","title":"\u2713 Lab #2","text":""},{"location":"examination/Labbar/lab2/#klasser-objekt-och-git","title":"Klasser, objekt och Git","text":"<p>F\u00f6rsta labben d\u00e4r vi jobbar med klasser och objekt i en struktur som p\u00e5minner mer om hur verkliga projekt \u00e4r uppbyggda, \u00e4ven om det \u00e4r i en v\u00e4ldigt liten skala \u00e4n s\u00e5 l\u00e4nge. Du kommer ocks\u00e5 f\u00e5 testa att anv\u00e4nda Git i denna \u00f6vning. N\u00e4r du \u00e4r klar f\u00f6r dagen, pusha din kod till GitHub.</p> <p>Det kan kanske verka som att det \u00e4r mycket att g\u00f6ra i denna lab, men t\u00e4nk p\u00e5 att ni inte m\u00e5ste hinna klart med allt! Det viktiga \u00e4r att ni kommer ig\u00e5ng med att t\u00e4nka i klasser och objekt, och att ni f\u00e5r testa Git medan ni jobbar.</p> <p>Tips!</p> <p>Jobba g\u00e4rna i grupp! \u00c5tminstonde f\u00f6r f\u00f6rsta delen, d\u00e5 det kan vara bra att diskutera och bolla id\u00e9er med n\u00e5gon annan.</p>"},{"location":"examination/Labbar/lab2/#beskrivning","title":"Beskrivning","text":"<p>Den finska pastaresturangen \"Penne\" vill ha ett nytt system f\u00f6r sina best\u00e4llningsautomater. Den nya VDn \u00e4r f\u00f6dd p\u00e5 70-talet och av rent nostalgiska sk\u00e4l vill hen ha ett terminal-baserat system som p\u00e5minner om de gamla DOS-programmen. Det ska g\u00e5 att:</p> <ul> <li>V\u00e4lja om du vill \u00e4ta h\u00e4r eller ta med.</li> <li>Se vilka r\u00e4tter som finns p\u00e5 menyn (4 - 6 stycken). De ska ha namn, beskrivning och pris.</li> <li>G\u00f6ra en best\u00e4llning genom att l\u00e4gga till en eller flera r\u00e4tter till best\u00e4llningen.</li> <li>N\u00e4r klar, v\u00e4lja att betala med kort eller kontant.</li> <li>F\u00e5 se ett kvitto p\u00e5 best\u00e4llningen med ett ordernummer.</li> <li>F\u00f6r att anv\u00e4nda \"\u00e4ta h\u00e4r eller ta med\" till n\u00e5got kan vi l\u00e5ta orderpriset p\u00e5verkas av detta. Det \u00e4r inte ovanligt att det kostar lite extra att \u00e4ta p\u00e5 plats.</li> </ul> <p>H\u00e4r \u00e4r ett fl\u00f6desschema \u00f6ver hur systemet ska fungera:</p> <p> </p> <p>Startkoden hittar du p\u00e5 Github Classroom. L\u00e4nken dit f\u00e5r du av l\u00e4raren under lektionen. Acceptera uppgiften och anv\u00e4nd sedan <code>git clone</code> f\u00f6r att ladda ner koden till din dator. Du ska allts\u00e5 inte anv\u00e4nda fork i detta fall.</p> <p>Startkoden inneh\u00e5ller:</p> <ul> <li>Ett projekt som heter <code>PenneCustomer</code>. Det \u00e4r d\u00e4r all er kod ska ligga! Ingen annan stans.</li> <li>Ett projekt som heter <code>Utils</code>, som inneh\u00e5ller klassen <code>Input</code> med diverse metoder f\u00f6r att l\u00e4sa in och validera anv\u00e4ndarinput. Anv\u00e4nd den eller skriv egen kod. L\u00e4s mer under Appendix A.</li> <li>En kompilerad DLL-fil som heter <code>Strajp.dll</code>. Detta \u00e4r ett f\u00e4rdigkompilerat bibliotek som simulerar ett betalsystem. Se Appendix B f\u00f6r mer information om hur det fungerar och hur ni anv\u00e4nder det.</li> </ul>"},{"location":"examination/Labbar/lab2/#del-1-systemdesign-och-analys","title":"Del 1 - Systemdesign och analys","text":"<p>Innan ni b\u00f6rjar koda \u00e4r det ett antal saker som \u00e4r viktiga att komma fram till.  </p> <ul> <li>Vilka klasser beh\u00f6vs? </li> <li>Vilka egenskaper och metoder ska de ha? </li> <li>Hur ska de interagera med varandra? </li> <li>G\u00e5 igenom beskrivningen ovan och leta efter substantiv (som kan bli klasser eller egenskaper) och verb (som kan bli metoder).</li> </ul> <p>Rita g\u00e4rna upp en enkel klassdiagram f\u00f6r att visualisera strukturen. </p> <p>N\u00e4r ni \u00e4r klara med detta tr\u00e4ffas vi alla i helgrupp och diskuterar det innan vi g\u00e5r vidare till implementering.</p>"},{"location":"examination/Labbar/lab2/#del-2-implementering","title":"Del 2 - Implementering","text":"<p>Det g\u00e5r ju sedan att g\u00e5 till v\u00e4ga p\u00e5 olika s\u00e4tt f\u00f6r att utveckla programmet:</p> <ol> <li>Det g\u00e5r att bygga allt utan UI: enbart klasser och metoder som testas genom att instansiera objekt och kalla p\u00e5 dess metoder. Anv\u00e4nd enkkla <code>Console.WriteLine</code> f\u00f6r att se resultatet.</li> <li>Det g\u00e5r ocks\u00e5 att b\u00f6rja med anv\u00e4ndarg\u00e4nssnittet (UI) enbart f\u00f6r att se hur fl\u00f6det i programmet ska se ut, och sedan fylla p\u00e5 med klasser och metoder efterhand.</li> <li>Eller s\u00e5 g\u00e5r det att jobba per funktionalitet och bygga lite av UI, lite av klasserna, lite av metoderna, och sedan fylla p\u00e5 med mer av varje efterhand. Allts\u00e5 en funktion \u00e5t g\u00e5ngen.</li> </ol> <p>I den h\u00e4r labben ska vi prova att bygga funktion f\u00f6r funktion. P\u00e5 s\u00e5 s\u00e4tt g\u00e5r det ocks\u00e5 att g\u00f6ra tydliga commits med git.</p>"},{"location":"examination/Labbar/lab2/#funktion-1-valja-att-ata-har-eller-ta-med","title":"Funktion 1 - V\u00e4lja att \u00e4ta h\u00e4r eller ta med","text":"<p>Titta p\u00e5 uppgiftsbeksrivningen ovan och b\u00f6rja med att implementera den f\u00f6rsta funktionen ENBART. T\u00e4nk inte p\u00e5 de andra. Utifr\u00e5n de klasser vi har kommit fram till i del 1 att vi vill ha, vad h\u00e4nder i programmet n\u00e4r anv\u00e4ndaren v\u00e4ljer att \u00e4ta h\u00e4r eller ta med? Vilka metoder och egenskaper beh\u00f6vs f\u00f6r det? Implementera bara det som beh\u00f6vs f\u00f6r den funktionen. </p> <p>Dags f\u00f6r en commit!</p> <p>N\u00e4r ni \u00e4r klara med den f\u00f6rsta funktionen, testa att det fungerar, g\u00f6r en commit i Git med ett bra meddelande (t.ex. \"Add function to choose where to eat\") och pusha upp koden till GitHub.</p>"},{"location":"examination/Labbar/lab2/#funktion-2-visa-menyn","title":"Funktion 2 - Visa menyn","text":"<p>N\u00e4sta funktion \u00e4r att visa menyn. Hur ska det g\u00e5 till? Vad beh\u00f6vs f\u00f6r att du ska kunna g\u00f6ra det? Implementera bara det som beh\u00f6vs f\u00f6r den funktionen. N\u00e4r du \u00e4r klar, testa att det fungerar, g\u00f6r en commit i Git med ett bra meddelande (t.ex. \"Add function to show menu\") och pusha upp koden till GitHub.</p>"},{"location":"examination/Labbar/lab2/#betalning","title":"Betalning","text":"<p>N\u00e4r det g\u00e4ller betalning, l\u00e4gg till valet f\u00f6r att betala kontant f\u00f6rst, och implementera det. N\u00e4r det fungerar, g\u00f6r en commit i Git med ett bra meddelande (t.ex. \"Add function to pay with cash\") och pusha upp koden till GitHub. Sedan kan du l\u00e4gga till valet f\u00f6r att betala med kort, och implementera det. Anv\u00e4nd <code>Strajp.dll</code> f\u00f6r att simulera kortbetalningen. N\u00e4r det fungerar, g\u00f6r en commit i Git med ett bra meddelande (t.ex. \"Add function to pay with card\") och pusha upp koden till GitHub.</p>"},{"location":"examination/Labbar/lab2/#appendix-a-utils","title":"Appendix A - Utils","text":"<p>Projektet kommer med en statisk Input-klass som inneh\u00e5ller lite hj\u00e4lpmetoder du kan anv\u00e4nda ist\u00e4llet f\u00f6r att beh\u00f6va skriva dem sj\u00e4lv. F\u00f6r att anv\u00e4nda den beh\u00f6ver du skriva <code>using Utils;</code> h\u00f6gst upp i din fil (Varf\u00f6r d\u00e5?). Dessa funktioner finns att anv\u00e4nda:</p> <ul> <li><code>string ReadString(string prompt)</code> - Skriver ut <code>prompt</code> och l\u00e4ser in en str\u00e4ng fr\u00e5n anv\u00e4ndaren.</li> <li><code>int ReadInt(string prompt, int min, int max)</code> - Skriver ut <code>prompt</code> och l\u00e4ser in ett heltal fr\u00e5n anv\u00e4ndaren. Om talet inte \u00e4r inom intervallet <code>min</code> till <code>max</code> (inklusive) s\u00e5 skrivs ett felmeddelande ut och anv\u00e4ndaren f\u00e5r f\u00f6rs\u00f6ka igen.</li> <li><code>int GetStringDirect(string prompt)</code> - Skriver ut <code>prompt</code> och l\u00e4ser in en bokstav eller siffra fr\u00e5n anv\u00e4ndaren och returnerar den.</li> </ul> Exempel <pre><code>using Utils;\n\nwhile (true)\n{\n    int i = Input.GetIntDirect(\"Skriv en siffra mellan 0 och 9: \");\n\n    Console.WriteLine(\"Du skrev: \" + i);\n\n    int x = Input.GetInt(\"Skriv ett tal mellan 1 och 100: \", 1, 100);\n    Console.WriteLine(\"Du skrev: \" + x);\n\n    string s = Input.GetStringDirect(\"Skriv en siffra eller bokstav (Enter f\u00f6r att avsluta): \");\n    Console.WriteLine(\"Du skrev: \" + s);\n}\n</code></pre>"},{"location":"examination/Labbar/lab2/#appendix-b-strajp-dll","title":"Appendix B - Strajp DLL","text":"<p>Strajp \u00e4r en simulering av ett faktiskt betalsystem, fast i en mycket f\u00f6renklad form. H\u00e4r \u00e4r ett exempel p\u00e5 hur du anv\u00e4nder det:</p> <pre><code>using Strajp;\n\nPaymentProcessor processor = new PaymentProcessor(); // skapa en instans av betalningsprocessorn\nprocessor.InitiatePayment(1000); // S\u00e4tt summa i \u00f6re\nprocessor.EnterCardNumber(\"0000\"); // Mata in kortnummer. 0000 har inga pengar, 1234 har 1000kr\nbool succees = processor.TryCompletePayment(); //Genomf\u00f6r betalningen\n\nif (succees)\n    Console.WriteLine(\"Payment completed successfully.\");\nelse\n    Console.WriteLine(\"Payment failed.\");\n\n//Ett lite mer avancerat s\u00e4tt anv\u00e4nder sig av ett resultatobjekt. V\u00e4lj sj\u00e4lv vilket du f\u00f6redrar:\nPaymentResult result = processor.CompletePayment();\nConsole.WriteLine(\"Payment result: \" + result.Success);\nConsole.WriteLine(result.Message);\n</code></pre>"},{"location":"examination/Labbar/lab2/#appendix-c-finska-pastaratter","title":"Appendix C - Finska Pastar\u00e4tter","text":"<p>Om du inte kommer p\u00e5 vilka r\u00e4tter som kan t\u00e4nkas finnas s\u00e5 kommer h\u00e4r n\u00e5gra f\u00f6rslag:</p> <ul> <li>Makaronilaatikko 2.0 - Finsk klassiker (ugnsmakaronil\u00e5da med k\u00f6ttf\u00e4rs) i modern version.</li> <li>Kantarellikastike Penne \u2013 penne i kr\u00e4mig kantarells\u00e5s</li> <li>Porkkana Fusilli \u2013 morotspasta i l\u00e4tt sm\u00f6rs\u00e5s med persilja</li> <li>Puikulaperuna Gnocchi \u2013 gnocchi p\u00e5 den ber\u00f6mda Lapplands-potatisen Puikula</li> <li>Korvapuustipasta \u2013 \u201dkanelbullepasta\u201d, en dessert med kanel, kardemumma och glasyr</li> </ul> <p>Vad de ska kosta \u00e4r upp till dig!</p>"},{"location":"examination/Labbar/lab2/#appendix-d-snabbt-klar","title":"Appendix D - Snabbt klar?","text":"<p>Om du blir klar snabbt eller vill forts\u00e4tta utveckla den hemma, kommer h\u00e4r n\u00e5gra f\u00f6rslag p\u00e5 saker att l\u00e4gga till:</p> <ul> <li>M\u00f6jlighet att ta bort r\u00e4tter fr\u00e5n best\u00e4llningen.</li> <li>M\u00f6jlighet att \u00e4ndra antal av en r\u00e4tt i best\u00e4llningen.</li> <li>Rabattkoder: om du anger koden \"PASTA20\" s\u00e5 f\u00e5r du 20% rabatt p\u00e5 hela best\u00e4llningen. </li> <li>Extra f\u00f6r rabatt: Rabattkoden g\u00e4ller bara innan kl 11:00 eller efter kl 20:00!</li> <li>(Sv\u00e5r) T\u00e4nk dig att n\u00e4r en best\u00e4llning har lagts i automaten, s\u00e5 kommer ditt ordernummer upp p\u00e5 en annan sk\u00e4rm d\u00e4r du ser att den har tagits emot, om den \u00e4r under tillagning eller om det \u00e4r klar f\u00f6r avh\u00e4mtning. Hur skulle du kunna skapa ett till program f\u00f6r att l\u00f6sa detta?</li> <li>(Sv\u00e5r) Till detta kanske det beh\u00f6vs ett tredje program f\u00f6r kockarna i k\u00f6ket, d\u00e4r de kan se vilka inkommande best\u00e4llningar som finns, och markera dem som \"under tillagning\" eller \"klara\". Hur skulle du kunna skapa ett s\u00e5dant program?</li> </ul>"},{"location":"examination/Labbar/lab3/","title":"\u2605 Lab #3","text":""},{"location":"examination/Labbar/lab3/#grupplabb","title":"Grupplabb","text":"<p>Detta \u00e4r en grupplabb d\u00e4r ni f\u00e5r samarbeta i grupper om 3-4 personer. Det vi kommer \u00f6va i denna labb \u00e4r f\u00f6ljande:</p> <ul> <li>Grupparbete</li> <li>Flera projekt</li> <li>Konflikthantering</li> <li>Interfaces</li> <li>Git workflows (Feature Branch Workflow)</li> </ul>"},{"location":"examination/Labbar/lab3/#labben-ar-uppdelad-i-fem-steg","title":"Labben \u00e4r uppdelad i fem steg:","text":"<ol> <li>Konflikter i ett konsolprojekt</li> <li>Ett separat klassbiblioteksprojekt</li> <li>Ett gemensamt interface </li> <li>En f\u00f6rsta enkelt implementation av interfacet</li> <li>Egna implementationer av interfacet</li> </ol> <p>Varje kapitel inneh\u00e5ller en beskrivning av vad ni ska g\u00f6ra, samt instruktioner f\u00f6r hur ni kan l\u00f6sa uppgiften.</p> <p>Kommunicera, var metodiska och noggranna</p> <p>G\u00e5 inte vidare till n\u00e4sta kapitel f\u00f6rr\u00e4n ni alla \u00e4r klara med det f\u00f6reg\u00e5ende! Kommunicera tydligt med varandra i varje steg. Stressa inte, f\u00f6rst\u00e5 vad ni g\u00f6r och varf\u00f6r ni g\u00f6r det. Fastnar ni? Fr\u00e5ga din l\u00e4rare om hj\u00e4lp pronto!</p> <p>Programmet i sig \u00e4r ganska enkelt: Ni ska skapa ett program som genererar och skriver ut en lista med namn. Genereringen av namn skall ske p\u00e5 lite olika s\u00e4tt, men mer om det senare!</p>"},{"location":"examination/Labbar/lab3/#forberedelser","title":"F\u00f6rberedelser","text":"<p>Se till att st\u00e4lla in s\u00e5 att VS Code anv\u00e4nder sig av <code>autofetch</code> f\u00f6r Git. Detta g\u00f6r att VS Code automatiskt h\u00e4mtar \u00e4ndringar fr\u00e5n remote-repot utan att du beh\u00f6ver g\u00f6ra det manuellt. G\u00f6r s\u00e5 h\u00e4r:</p> <ol> <li>\u00d6ppna <code>settings</code> i VS Code (\u2699\ufe0f-ikonen nere till v\u00e4nster -&gt; Settings)</li> <li>S\u00f6k p\u00e5 <code>autofetch</code></li> <li>Se till att inst\u00e4llningen \u00e4r satt till <code>true</code></li> <li>Tiden kan s\u00e4ttas till 180 sekunder (3 minuter)</li> </ol>"},{"location":"examination/Labbar/lab3/#steg-1-konflikter-i-ett-konsolprojekt","title":"Steg 1. Konflikter i ett konsolprojekt","text":"<p>F\u00f6rsta delen g\u00e5r ut p\u00e5 att ni ska f\u00e5 testa att arbeta i ett gemensamt projekt och testa att l\u00f6sa merge-konflikter.</p> <ol> <li>Varje person i gruppen klonar ner repot fr\u00e5n Github classroom till sen egen dator.</li> <li>Projektet inneh\u00e5ller redan ett konsolprojekt med en <code>Program.cs</code>-fil, s\u00e5 ni ska inte skapa n\u00e5got nytt projekt i detta steg, inte heller skapa n\u00e5got nytt git-repo med <code>git init</code>, eftersom ni redan har ett repo.</li> <li>Varje person i gruppen ska nu g\u00f6ra en egen \u00e4ndring i <code>Program.cs</code>-filen, dvs lokalt p\u00e5 sin egen dator. \u00c4ndringen ni ska g\u00f6ra \u00e4r att l\u00e4gga till en eller flera rader som skriver ut ett v\u00e4lkomstmedelande till konsolen, och en fr\u00e5ga om hur m\u00e5nga namn som ska genereras. Enkelt! </li> </ol> <p>Hitta allts\u00e5 p\u00e5 n\u00e5got p\u00e5 egen hand, prata inte med varandra om vad ni ska skriva, utan l\u00e5t det bli olika f\u00f6r varje person.</p> <p>Exempel:</p> <pre><code>Console.WriteLine(\"Hejhej hemskt mycket hej och v\u00e4lkommen till en helt fantastisk namn-generator!\");\nConsole.WriteLine(\"Nu undrar jag, hur m\u00e5nga namn vill du att vi ska generera \u00e5t dig idag?\");\n</code></pre> <ol> <li>F\u00f6r detta steg, se till s\u00e5 att ni inte comittar och pushar direkt! Det kan vara hj\u00e4lpsamt att ta detta lugnt och metodiskt f\u00f6r att f\u00f6rst\u00e5 vad som h\u00e4nder. TA DET LUGNT OCH STEG - F\u00d6R - STEG<ol> <li>En person committar och pushar sin \u00e4ndring till remote-repot p\u00e5 GitHub.</li> <li>De andra kan antingen v\u00e4nta lite i VS Code (om <code>autofetch</code> \u00e4r aktiverat) eller manuellt h\u00e4mta \u00e4ndringar fr\u00e5n remote-repot med <code>git fetch</code> eller via VS Code-GUI:t.</li> <li>Observera, hur kan du se att det finns nya \u00e4ndringar p\u00e5 remote-repot? T.ex. i VS Code-GUI:t eller konsolen?</li> <li>Utan att ha commitat n\u00e5got, vad h\u00e4nder om n\u00e5gon f\u00f6rs\u00f6ker k\u00f6ra en pull f\u00f6r att h\u00e4mta ner \u00e4ndringarna fr\u00e5n remote-repot? Testa!</li> <li>N\u00e5gon provar nu att committa och pusha sin egen \u00e4ndring. Eftersom det nu finns en konflikt mellan dennes lokala \u00e4ndring och den som redan finns p\u00e5 remote-repot, kommer Git att meddela att det finns en konflikt som m\u00e5ste l\u00f6sas.</li> </ol> </li> </ol> <p>L\u00f6s merge-konflikter s\u00e5 h\u00e4r</p> <p>Enkelt f\u00f6rklarat g\u00e5r det till s\u00e5 h\u00e4r:</p> <ol> <li>Git markerar de filer som har konflikter (i detta fall <code>Program.cs</code>).</li> <li>\u00d6ppna filen och leta upp konflikt-markeringarna (&lt;&lt;&lt;&lt;&lt;&lt;&lt;, =======, &gt;&gt;&gt;&gt;&gt;&gt;&gt;).</li> <li>Redigera filen manuellt f\u00f6r att l\u00f6sa konflikten genom att v\u00e4lja vilken kod som ska beh\u00e5llas, eller kombinera koden p\u00e5 ett l\u00e4mpligt s\u00e4tt. Ta bort konflikt-markeringarna.</li> <li>Spara filen, l\u00e4gg till den till staging area och g\u00f6r en ny commit.</li> <li>F\u00f6rs\u00f6k sedan pusha igen.</li> </ol> <p>L\u00e5t varje person i gruppen g\u00f6ra detta, s\u00e5 att alla f\u00e5r \u00f6va p\u00e5 att l\u00f6sa merge-konflikter samt att alla f\u00e5r med en commit i b\u00f6rjan. </p> <p>Fr\u00e5ga: Men hur ska koden se ut i slutet d\u00e5? Svar: Ja det \u00e4r ju upp till er att komma fram till tillsammans!  </p> <p>Fr\u00e5ga: Men vem ska g\u00f6ra det och pusha den slutgiltiga versionen? Svar: Det \u00e4r ocks\u00e5 upp till er att best\u00e4mma! Ni jobbar ju tillsammans, i grupp!  </p>"},{"location":"examination/Labbar/lab3/#steg-2-ett-separat-klassbiblioteksprojekt","title":"Steg 2. Ett separat klassbiblioteksprojekt","text":"<p>S\u00e5d\u00e4r, nu har vi starten till v\u00e5rt program! N\u00e4sta steg \u00e4r att skapa ett separat klassbiblioteksprojekt som ska inneh\u00e5lla logiken f\u00f6r att generera namn. Vi vill skapa detta som ett separat proejkt f\u00f6r att h\u00e5lla is\u00e4r koden p\u00e5 ett tydligt s\u00e4tt fr\u00e5n anv\u00e4ndargr\u00e4nssnittet (konsolprojektet i detta fall), som kanske mest \u00e4r ett s\u00e4tt f\u00f6r oss att testa funktionaliteten i detta l\u00e4ge.</p> <p>Detta steg \u00e4r enklast om ni g\u00f6r tillsammans p\u00e5 en persons dator. Alla ska allts\u00e5 INTE g\u00f6ra detta steg p\u00e5 sina egna datorer.</p> <p>Testa att g\u00f6ra detta p\u00e5 en egen branch!</p> <p>Om ni vill kan ni testa att g\u00f6ra detta p\u00e5 en egen branch, f\u00f6r att tillsammans testa hur det g\u00e5r till. Ni kommer i steg fem att skapa egna branches f\u00f6r era implementationer, s\u00e5 det \u00e4r bra att \u00f6va p\u00e5 detta nu!</p> <p>G\u00f6r s\u00e5 h\u00e4r:</p> <ol> <li>Observera att det finns en <code>src</code>-mapp i rotmappen f\u00f6r repot. Detta \u00e4r en konvention f\u00f6r att h\u00e5lla alla k\u00e4llkodsfiler samlade p\u00e5 ett och samma st\u00e4lle.</li> <li>L\u00e4gg ocks\u00e5 m\u00e4rke till att det finns en mapp som heter <code>NameGen UI</code> i <code>src</code>-mappen. Detta \u00e4r konsolprojektet som ni redan har jobbat med (Ni ser att det finns en <code>.csproj</code>-fil d\u00e4r inne, vilket betyder att det \u00e4r ett c#-projekt).</li> <li>Skapa nu ett nytt projekt i <code>src</code>-mappen som \u00e4r av typen \"Class Library\" och d\u00f6p det till <code>NameGenCore</code>.</li> </ol> <p>Skapa ett nytt projekt</p> <p>Det g\u00e5r att g\u00f6ra detta p\u00e5 olika s\u00e4tt! H\u00e4r \u00e4r tv\u00e5 s\u00e4tt:  </p> <ul> <li>Via terminalen: Navigera till <code>src</code>-mappen med <code>cd</code>-kommandot och k\u00f6r sedan kommandot <code>dotnet new classlib -n NameGenCore</code></li> <li>Via VS Codes <code>solution explorer</code>: Klicka p\u00e5 <code>+</code>-ikonen bredvid <code>src</code>-mappen och v\u00e4lj \"New Project...\", v\u00e4lj sedan \"Class Library\" och d\u00f6p det till <code>src/NameGenCore</code>.</li> </ul> <ol> <li>\u00c4n s\u00e5 l\u00e4nge k\u00e4nner dessa projekt inte till varandra. V\u00e5r program.cs m\u00e5ste p\u00e5 n\u00e5got s\u00e4tt veta att det finns ett till projekt h\u00e4r. Vi m\u00e5ste knyta ihop dem. \u00c4ven detta g\u00e5r att g\u00f6ra p\u00e5 flera olika s\u00e4tt:<ul> <li>Via terminalen: Navigera till <code>src/NameGenUI</code>-mappen med <code>cd</code>-kommandot och k\u00f6r sedan kommandot <code>dotnet add reference ../NameGenCore/NameGenCore.csproj</code></li> <li>Via VS Codes <code>solution explorer</code>: H\u00f6gerklicka p\u00e5 <code>NameGenUI</code>-projektet och v\u00e4lj \"Add Project Reference...\", markera sedan <code>NameGenCore</code>-projektet och klicka \"OK\".</li> </ul> </li> </ol> <p>I b\u00e5da fallen kommer <code>NameGenUI</code>-projektets .csproj-fil att uppdateras med en referens till <code>NameGenCore</code>-projektet. Titta i denna fil och se om ni ser n\u00e5got nytt d\u00e4r inne!</p> <p>Se till att comitta och pusha era \u00e4ndringar till remote-repot p\u00e5 GitHub, och se till s\u00e5 att alla i gruppen h\u00e4mtar ner \u00e4ndringarna.</p>"},{"location":"examination/Labbar/lab3/#steg-3-ett-gemensamt-interface","title":"Steg 3. Ett gemensamt interface","text":"<p>L\u00e5t en annan person i gruppen g\u00f6ra detta steg p\u00e5 sin dator, men g\u00f6r det tillsammans s\u00e5 att alla f\u00f6rst\u00e5r vad som h\u00e4nder.</p> <ol> <li>Nu ska ni definiera ett interface som ska anv\u00e4ndas f\u00f6r att generera namn. </li> <li>Detta interface ska ligga i <code>NameGenCore</code>-projektet.</li> <li>Namnet p\u00e5 interfacet kan vara n\u00e5got passande som ni best\u00e4mmer tillsammans.</li> <li>Interfacet skall definiera en metod, som ska returnera en str\u00e4ng med ett namn.</li> <li>N\u00e4r interfacet \u00e4r skapat, se till att comitta och pusha \u00e4ndringarna till remote-repot p\u00e5 GitHub, och se till s\u00e5 att alla i gruppen h\u00e4mtar ner \u00e4ndringarna.</li> </ol>"},{"location":"examination/Labbar/lab3/#steg-4-en-forsta-enkelt-implementation-av-interfacet","title":"Steg 4. En f\u00f6rsta enkelt implementation av interfacet","text":"<p>L\u00e5t \u00e4nnu en annan person i gruppen leda detta steg p\u00e5 sin dator.</p> <ol> <li>Nu ska ni skapa en f\u00f6rsta implementation av interfacet som ni just skapade, s\u00e5 att ni kan testa att allt fungerar som det ska i Program.cs-filen i konsolprojektet (<code>NameGenUI</code>).</li> <li>Skriv en klass som heter <code>OneNameGenerator</code> som implementerar interfacet ni skapade i f\u00f6reg\u00e5ende steg.</li> <li>I denna klass, implementera metoden som genererar namn genom att helt enkelt returnera en h\u00e5rdkodad str\u00e4ng, t.ex. \"Byggare Bob\". Det \u00e4r allt. Kr\u00e5ngla inte till det i detta steg!</li> <li>Nu, i <code>Program.cs</code>-filen i konsolprojektet, deklarera en variabel av typen av interfacet ni skapade, och instansiera den med hj\u00e4lp av <code>OneNameGenerator</code>-klassen. Exempel:     <pre><code>INameGenerator nameGenerator = new OneNameGenerator();\n</code></pre></li> <li>Anropa metoden s\u00e5 m\u00e5nga g\u00e5nger som anv\u00e4ndaren angav i konsolen, och skriv ut namnet som returneras till konsolen (kommer ju alltid att bli samma namn i detta steg).</li> <li>Testa att k\u00f6ra programmet och se att allt fungerar som det ska!</li> <li>Se till att comitta och pusha era \u00e4ndringar till remote-repot p\u00e5 GitHub, och se till s\u00e5 att alla i gruppen h\u00e4mtar ner \u00e4ndringarna.</li> </ol>"},{"location":"examination/Labbar/lab3/#steg-5-egna-implementationer-av-interfacet","title":"Steg 5. Egna implementationer av interfacet","text":"<p>Det \u00e4r nu dags att varje projektmedlem skapar sin egen implementation av hur namn ska genereras, och vilken typ av namn det ska vara. Finns ju massor av namn att generera! Tex</p> <ul> <li>Typiska finska namn (ex: \"Matti Per\u00e4l\u00e4\", \"Liisa Virtanen\", \"Jukka Jokinen\")</li> <li>Superhj\u00e4ltenamn (ex: \"J\u00e4rnmannen\", \"Lavakvinnan\", \"Eldpojken\", \"Snusprinsen\")</li> <li>Robotnamn (ex: \"RX-78\", \"T-800\", \"C-3PO\", \"R2-D2\")</li> <li>Fantasy-namn (ex: \"Eldorion\", \"Lunaria\", \"Thalor\", \"Zyphira\")</li> <li>Piratnamn (ex: \"Svartsk\u00e4gg\", \"R\u00f6da Roderick\", \"Kapten Krok\", \"Sj\u00f6r\u00f6var-Jenny\")</li> <li>Galaxer och stj\u00e4rnor (ex: \"Andromeda-X9\", \"Zeta Reticuli\", \"Orion Prime\", \"Vega-3\")</li> <li>Nummernamn (ex: \"Ett\", \"Tv\u00e5\", \"Tre\", \"Fyra\", \"Fem\")</li> <li>F\u00e5ngnummer fr\u00e5n f\u00e4ngelser (ex: \"AZ-3456\", \"BX-7890\", \"CY-1234\")</li> <li>Alien namn (ex: \"Xel'Naga\", \"Zorgath\", \"Kryllon\", \"Vortigaunt\")</li> </ul> <p>Osv osv osv. Ta n\u00e5got av ovan eller hitta p\u00e5 n\u00e5gon egen katergori!</p> <p>MEN, g\u00f6r det enkelt i b\u00f6rjan! Skicka tex tillbaka bara ett h\u00e5rdkodat namn. Sen kan ni f\u00f6rb\u00e4ttra det senare genom att tex anv\u00e4nda listor med namn och slumpa fram ett namn fr\u00e5n listan, eller listor med delar av namn som kombineras slumpm\u00e4ssigt.</p> <p>Detta arbetsfl\u00f6de skall f\u00f6lja det sk. \"Git Feature Branch Workflow\" d\u00e4r varje person skapar en egen feature branch f\u00f6r sin implementation. L\u00e4s mer h\u00e4r.</p> <p>Detta betyder att ni m\u00e5ste f\u00f6lja denna arbetsg\u00e5ng:</p> <ol> <li>Varje person skapar en egen branch fr\u00e5n <code>main</code>-branchen, med ett passande namn, t.ex. <code>finnish-names</code>, <code>superhero-names</code>, <code>robot-names</code>, osv.</li> <li>Varje person skapar sin egen implementation av interfacet i sin egen branch.</li> <li>N\u00e4r implementationen \u00e4r klar, g\u00f6r en Pull Request (PR) fr\u00e5n den egna branchen till <code>main</code>-branchen i GitHub-repot.</li> <li>L\u00e5t n\u00e5gon annan i gruppen granska koden i PR:en och godk\u00e4nn den om allt ser bra ut.</li> <li>Sl\u00e5 ihop (merge) PR:en till <code>main</code>-branchen.</li> <li>Testa att allt fungerar genom att h\u00e4mta ner \u00e4ndringarna fr\u00e5n <code>main</code>-branchen till den egna datorn. Testa ocks\u00e5 att byta fr\u00e5n <code>OneNameGenerator</code> till den nya implementationen och se att det fungerar som det ska.</li> </ol>"},{"location":"examination/Labbar/lab3/#extra","title":"Extra","text":"<p>Ni har nu ett g\u00e4ng implementationer f\u00f6r att generera namn. L\u00e5t nu anv\u00e4ndaren i konsolen v\u00e4lja vilken typ av namn som ska genereras genom att visa en meny med valm\u00f6jligheter. Beroende p\u00e5 vad anv\u00e4ndaren v\u00e4ljer, instansiera r\u00e4tt implementation av interfacet och generera namn med den. Hur kan ni g\u00f6ra detta p\u00e5 ett snyggt s\u00e4tt utan att anv\u00e4nda en massa <code>if</code>-satser eller <code>switch</code>-satser?</p>"},{"location":"examination/Labbar/lab4/","title":"\u2605 Lab #4","text":""},{"location":"examination/Labbar/lab4/#solid","title":"SOLID","text":"<p>Den h\u00e4r labben kan bli lite klurig, s\u00e5 kom v\u00e4l f\u00f6rberedd! Vi g\u00e5r djupare in i SOLID-principerna och fokuserar p\u00e5 gr\u00e4nssnitt, separation of concerns och dependency inversion. Detta \u00e4r dessutom en delad labb med SQL-kursen samt str\u00e4cker sig \u00f6ver l\u00e4ngre tid en bara en dag.</p> <p>Mer info kommer!</p>"},{"location":"examination/Labbar/lab5/","title":"\u2605 Lab #5","text":""},{"location":"examination/Labbar/lab5/#enhetstestning","title":"Enhetstestning","text":"<p>Mer info kommer!</p>"},{"location":"extra/","title":"Extra \u00f6vningar","text":"<p>H\u00e4r fyller jag p\u00e5 med extra \u00f6vningar i C# som kan vara bra att g\u00f6ra f\u00f6r att tr\u00e4na p\u00e5 olika saker.</p>","tags":["OOP1-\u00d6vning"]},{"location":"extra/#grundlaggande-c","title":"Grundl\u00e4ggande C#","text":"En enkel kalkylator <p>Skriv ett program som:</p> <ul> <li>fr\u00e5gar anv\u00e4ndaren om tv\u00e5 tal</li> <li>fr\u00e5gar anv\u00e4ndaren om en operation (+, -, *, /)</li> <li>utf\u00f6r operationen p\u00e5 de tv\u00e5 talen</li> <li>skriver ut resultatet</li> </ul> Exempell\u00f6sning <pre><code>Console.Write(\"Ange f\u00f6rsta talet: \");\ndouble num1 = Convert.ToDouble(Console.ReadLine());\nConsole.Write(\"Ange andra talet: \");\ndouble num2 = Convert.ToDouble(Console.ReadLine());\nConsole.Write(\"Ange operation (+, -, *, /): \");\nstring operation = Console.ReadLine();\ndouble result = 0;\n\nswitch (operation)\n{\n    case \"+\":\n        result = num1 + num2;\n        break;\n    case \"-\":\n        result = num1 - num2;\n        break;\n    case \"*\":\n        result = num1 * num2;\n        break;\n    case \"/\":\n        if (num2 != 0)\n            result = num1 / num2;\n        else\n            Console.WriteLine(\"Fel: Division med noll \u00e4r inte till\u00e5tet.\");\n        return;\n    default:\n        Console.WriteLine(\"Fel: Ogiltig operation.\");\n        return;\n}\n\nConsole.WriteLine($\"Resultat: {result}\");\n</code></pre>","tags":["OOP1-\u00d6vning"]},{"location":"extra/#metoder","title":"Metoder","text":"En h\u00e4lsningsmetod <p>Skriv en metod som:</p> <ul> <li>returnerar en str\u00e4ng</li> <li>heter <code>CreateGreeting</code></li> <li>tar emot en parameter av typen <code>string</code> som heter <code>name</code></li> <li>returnerar en h\u00e4lsning i form av en str\u00e4ng, t.ex. \"Hello, [name]!\"</li> </ul> Exempell\u00f6sning <pre><code>string CreateGreeting(string name)\n{\n    return $\"Hello, {name}!\";\n}\n</code></pre> En metod f\u00f6r att ber\u00e4kna arean av en rektangel <p>Skriv en metod som:</p> <ul> <li>returnerar en <code>double</code></li> <li>heter <code>CalculateArea</code></li> <li>tar emot tv\u00e5 parametrar av typen <code>double</code> som heter <code>width</code> och <code>height</code></li> <li>returnerar arean av rektangeln (width * height)</li> </ul> Exempell\u00f6sning <pre><code>double CalculateArea(double width, double height)\n{\n    return width * height;\n}\n</code></pre> Anropa f\u00e4rdiga metoder <pre><code>// L\u00f6s uppgifterna steg f\u00f6r steg.\n// Testa att k\u00f6ra programmet efter varje steg f\u00f6r att se resultatet.\n\nclass Program\n{\n    static void Main()\n    {\n        // 1. Kalla p\u00e5 metoden ShowMessage: (1 rad kod beh\u00f6vs)\n\n\n        // 2. Kalla p\u00e5 metoden GetUserName och spara returv\u00e4rdet i en variabel. (1 rad kod beh\u00f6vs)\n\n\n        // 3. Kalla p\u00e5 metoden GreetUser, skicka in anv\u00e4ndarnamnet som argument. (1 rad kod beh\u00f6vs)\n\n\n        // 4. Kalla p\u00e5 metoden GetUserAge och spara returv\u00e4rdet i en variabel. (1 rad kod beh\u00f6vs)\n\n\n        // 5. Kalla p\u00e5 metoden ConvertAgeToDays, och skriv ut \"Du \u00e4r X dagar gammal\" i konsolen. (2 rader kod beh\u00f6vs)\n\n\n    }\n\n    static void ShowMessage()\n    {\n        Console.WriteLine(\"V\u00e4lkommen till Metod\u00f6vningar!\\n---------------------\");\n    }\n\n    static string GetUserName()\n    {\n        Console.Write(\"Ange ditt namn: \");\n        return Console.ReadLine();\n    }\n\n    static void GreetUser(string name)\n    {\n        Console.WriteLine($\"Hej, {name}! Hoppas det g\u00e5r bra med kodandet.\");\n    }\n\n    static int GetUserAge()\n    {\n        Console.Write(\"Ange din \u00e5lder: \");\n        return int.Parse(Console.ReadLine());\n    }\n\n    static int ConvertAgeToDays(int age)\n    {\n        return age * 365;\n    }\n}\n</code></pre> Exempell\u00f6sning <pre><code>ShowMessage();\n\nstring userName = GetUserName();\n\nGreetUser(userName);\n\nint userAge = GetUserAge();\n\nint ageInDays = ConvertAgeToDays(userAge);\nConsole.WriteLine($\"Du \u00e4r {ageInDays} dagar gammal.\");\n</code></pre> Skriv metoderna som saknas <pre><code>// Skriv de metoder som beh\u00f6vs s\u00e5 att programmet fungerar att k\u00f6ra. \n// Du ***ska inte*** \u00e4ndra n\u00e5got i Main-metoden, bara l\u00e4ggat till metoder.\n\nclass Program\n{\n    static void Main()\n    {\n        ShowHeader(); // Ska visa programmets namn: \"Word analyzer\"\n\n        string word1 = GetWordFromUser(); // Ska fr\u00e5ga anv\u00e4ndaren om ett ord och returnera det\n        string word2 = GetWordFromUser();\n\n        int length1 = GetLengthOfWord(word1); // Ska returnera l\u00e4ngden p\u00e5 ordet\n        int length2 = GetLengthOfWord(word2);\n\n        Console.WriteLine($\"The word {word1} has {length1} letters.\");\n        Console.WriteLine($\"The word {word2} has {length2} letters.\");\n\n        string longerWord = GetLongerWord(word1, word2); // Ska returnera det l\u00e4ngsta ordet\n        Console.WriteLine($\"The longer word is: {longerWord}\");\n\n        // Ska visa ett avslutningsmeddelande som ska visa texten \"Hejd\u00e5! Du skrev in X antal bokst\u00e4ver totalt.\"\n        ShowFooter(word1, word2);\n    }\n}\n</code></pre> Exempell\u00f6sning enkel <pre><code>static void ShowHeader()\n{\n    Console.WriteLine(\"Word analyzer\");\n    Console.WriteLine(\"--------------\");\n}\n\nstatic string GetWordFromUser()\n{\n    Console.Write(\"Ange ett ord: \");\n    return Console.ReadLine();\n}\n\nstatic int GetLengthOfWord(string word)\n{\n    return word.Length;\n}\n\nstatic string GetLongerWord(string word1, string word2)\n{\n    if (word1.Length &gt;= word2.Length)\n        return word1;\n    else\n        return word2;\n}\n\nstatic void ShowFooter(string word1, string word2)\n{\n    int totalLength = word1.Length + word2.Length;\n    Console.WriteLine($\"Hejd\u00e5! Du skrev in {totalLength} antal bokst\u00e4ver totalt.\");\n}\n</code></pre> Exempell\u00f6sning mer avancerad <pre><code>static void ShowHeader()\n{\n    //Kan du f\u00f6rklara vad som h\u00e4nder h\u00e4r?\n    Console.WriteLine(\"Word analyzer\\n==============\");\n}\n\n// Vad ser den h\u00e4r metoden till att l\u00f6sa som den f\u00f6rsta enkla versionen inte gjorde?\nstatic string GetWordFromUser()\n{\n    string input;\n\n    while (true)\n    {\n        Console.Write(\"Skriv ett ord: \");\n        input = Console.ReadLine().Trim();\n        if (!input.Contains(' ')) break;\n        Console.WriteLine(\"Bara ett ord, f\u00f6rs\u00f6k igen.\");\n    }\n\n    return input;\n}\n\nstatic int GetLengthOfWord(string word)\n{\n    // Kan du f\u00f6rklara vad som h\u00e4nder p\u00e5 den h\u00e4r raden?\n    return word.Trim().Length;\n}\n\nstatic string GetLongerWord(string word1, string word2)\n{\n    //Varf\u00f6r anv\u00e4nds GetLengthOfWord h\u00e4r ist\u00e4llet f\u00f6r word1.Length tror du?\n    if (GetLengthOfWord(word1) &gt;= GetLengthOfWord(word2)) return word1;\n    return word2;\n    //Och, varf\u00f6r beh\u00f6vs det inte en else-sats h\u00e4r?\n}\n\nstatic void ShowFooter(string word1, string word2)\n{\n    int totalLength = GetLengthOfWord(word1) + GetLengthOfWord(word2);\n    Console.WriteLine($\"Hejd\u00e5! Du skrev in {totalLength} antal bokst\u00e4ver totalt.\");\n}\n</code></pre>","tags":["OOP1-\u00d6vning"]},{"location":"extra/#klasser-och-objekt","title":"Klasser och objekt","text":"En klass f\u00f6r att representera en bil <p>Skapa en klass som:</p> <ul> <li>heter <code>Car</code></li> <li>har f\u00f6ljande egenskaper (properties):<ul> <li><code>Make</code> (string)</li> <li><code>Model</code> (string)</li> <li><code>Year</code> (int)</li> </ul> </li> <li>har en metod <code>GetCarInfo</code> som returnerar en str\u00e4ng med bilens information i formatet \"Year Make Model\"</li> </ul> Exempell\u00f6sning <pre><code>class Car\n{\n    public string Make { get; set; }\n    public string Model { get; set; }\n    public int Year { get; set; }\n\n    public string GetCarInfo()\n    {\n        return $\"{Year} {Make} {Model}\";\n    }\n}\n</code></pre> Skapa och anv\u00e4nd ett objekt av klassen Car <p>Skriv kod som:</p> <ul> <li>skapar tre objekt av klassen <code>Car</code></li> <li>s\u00e4tter egenskaperna <code>Make</code>, <code>Model</code> och <code>Year</code></li> <li>anropar metoden <code>GetCarInfo</code> och skriver ut resultatet p\u00e5 alla tre bilar</li> </ul> Exempell\u00f6sning <pre><code>Car car1 = new Car { Make = \"Toyota\", Model = \"Corolla\", Year = 2020 };\nCar car2 = new Car { Make = \"Honda\", Model = \"Civic\", Year = 2019 };\nCar car3 = new Car { Make = \"Ford\", Model = \"Mustang\", Year = 2021 };\nConsole.WriteLine(car1.GetCarInfo());\nConsole.WriteLine(car2.GetCarInfo());\nConsole.WriteLine(car3.GetCarInfo());\n</code></pre> Anv\u00e4nd tv\u00e5 existerande klasser <p>I den h\u00e4r uppgiften beh\u00f6ver du skapa n\u00e5gra objekt, och sedan anv\u00e4nda deras metoder och egenskaper f\u00f6r att l\u00f6sa uppgiften. Du beh\u00f6ver inte \u00e4ndra n\u00e5got i klasserna <code>Book</code> och <code>Library</code>, utan bara anv\u00e4nda dem i <code>Main</code>-metoden. Unders\u00f6k klasserna och deras metoder och egenskaper f\u00f6r att f\u00f6rst\u00e5 hur de fungerar.</p> <p>Det finns ocks\u00e5 n\u00e5gra extra fr\u00e5gor samt en extra uppgift i kommentarerna i koden som du kan fundera p\u00e5.</p> <pre><code>using System.Collections.ObjectModel;\n\nclass Program\n{\n    static void Main()\n    {\n        // Instansiera ett nytt objekt av typen Library (1 rad)\n\n\n        // Skapa tv\u00e5 objekt av typen Book med valfria v\u00e4rden f\u00f6r titel, f\u00f6rfattare och antal sidor (2 rader)\n\n\n        // L\u00e4gg till b\u00e5da b\u00f6ckerna i biblioteket med metoden AddBook (2 rader)\n\n\n        // Skriv ut det totala antalet b\u00f6cker i biblioteket med hj\u00e4lp av egenskapen TotalBookCount (1 rad)\n\n\n        // Lista alla tillg\u00e4ngliga b\u00f6cker i biblioteket med hj\u00e4lp av metoden GetAvailableBooks (6 rader)\n\n\n        // L\u00e5na ut en bok med hj\u00e4lp av metoden BorrowBook. Om det lyckas (om metoden returnerar true) \n        // skriv ut ett meddelande om att l\u00e5net lyckades, annars  skriv ut ett felmeddelande. (Kan l\u00f6sas p\u00e5 2 rader, men l\u00e4ttare med flera)\n\n\n        // Lista alla l\u00e5nade b\u00f6cker med hj\u00e4lp av metoden GetBorrowedBooks (6 rader)\n\n\n        // \u00c5terl\u00e4mna den l\u00e5nade boken med hj\u00e4lp av metoden ReturnBook. Om det lyckas (om metoden returnerar true)\n        // skriv ut ett meddelande om att \u00e5terl\u00e4mningen lyckades, annars skriv ut ett felmeddelande. (Kan l\u00f6sas p\u00e5 2 rader, men l\u00e4ttare med flera)\n\n\n        // Lista alla tillg\u00e4ngliga b\u00f6cker i biblioteket igen f\u00f6r att verifiera att den \u00e5terl\u00e4mnade boken finns  (6 rader)\n\n\n    }\n}\n\nclass Book\n{\n    private string title; // Fr\u00e5ga: Kan du f\u00f6rklara varf\u00f6r dessa f\u00e4lt beh\u00f6vs och varf\u00f6r de \u00e4r privata?\n    private string author;\n    private int pages;\n\n    public string Title\n    {\n        get =&gt; title; // Att skriva s\u00e5 h\u00e4r \u00e4r ett kortare s\u00e4tt att skriva get { return title; }\n        set\n        {\n            if (string.IsNullOrWhiteSpace(value))\n                throw new ArgumentException(\"Title cannot be empty.\");\n            title = value;\n        }\n    }\n\n    public string Author\n    {\n        get =&gt; author;\n        set\n        {\n            if (string.IsNullOrWhiteSpace(value))\n                throw new ArgumentException(\"Author cannot be empty.\");\n            author = value;\n        }\n    }\n\n    public int Pages\n    {\n        get =&gt; pages;\n        set\n        {\n            if (value &lt;= 0)\n                throw new ArgumentException(\"Pages must be greater than zero.\");\n            pages = value;\n        }\n    }\n\n    public Book(string title, string author, int pages)\n    {\n        Title = title;\n        Author = author;\n        Pages = pages;\n    }\n}\n\nclass Library\n{\n    private readonly List&lt;Book&gt; availableBooks = []; //Fr\u00e5ga: Vad g\u00f6r 'readonly' f\u00f6r n\u00e5got?\n    private readonly List&lt;Book&gt; borrowedBooks = [];\n\n    public int TotalBookCount\n    {\n        get\n        {\n            return availableBooks.Count + borrowedBooks.Count;\n        }\n    }\n\n    public void AddBook(Book book)\n    {\n        if (book == null)\n            throw new ArgumentNullException(nameof(book));\n        if (IsBookInLibrary(book))\n            throw new InvalidOperationException(\"Book is already in the library.\");\n\n        availableBooks.Add(book);\n    }\n\n    public void RemoveBook(Book book)\n    {\n        ArgumentNullException.ThrowIfNull(book);\n        if (!IsBookInLibrary(book))\n            throw new InvalidOperationException(\"Book is not in the library.\");\n\n        availableBooks.Remove(book);\n    }\n\n    public bool BorrowBook(Book book)\n    {\n        ArgumentNullException.ThrowIfNull(book);\n        if (!availableBooks.Contains(book)) return false;\n\n        availableBooks.Remove(book);\n        borrowedBooks.Add(book);\n        return true;\n    }\n\n    public bool ReturnBook(Book book)\n    {\n        ArgumentNullException.ThrowIfNull(book);\n        if (!borrowedBooks.Contains(book)) return false;\n\n        borrowedBooks.Remove(book);\n        availableBooks.Add(book);\n        return true;\n    }\n\n    private bool IsBookInLibrary(Book book)\n    {\n        return availableBooks.Contains(book) || borrowedBooks.Contains(book);\n    }\n\n    public List&lt;Book&gt; GetAllBooks()\n    {\n        return availableBooks;\n    }\n\n    public List&lt;Book&gt; GetAvailableBooks()\n    {\n        return new List&lt;Book&gt;(availableBooks); //Fr\u00e5ga: Vad blir det f\u00f6r skillnad p\u00e5 det och att bara returnera availableBooks direkt?\n    }\n\n    public ReadOnlyCollection&lt;Book&gt; GetBorrowedBooks()\n    {\n        return borrowedBooks.AsReadOnly(); //Fr\u00e5ga: Vad tror du h\u00e4nder h\u00e4r egentligen? Vad \u00e4r ReadOnlyCollection och varf\u00f6r anv\u00e4nds den? Vad \u00e4r skillnaden fr\u00e5n metoden ovan?\n    }\n}\n</code></pre> Exempell\u00f6sning <pre><code>using System.Collections.ObjectModel;\n\nclass Program\n{\n    static void Main()\n    {\n        // Instansiera ett nytt objekt av typen Library\n        Library myLibrary = new Library();\n\n        // Skapa tv\u00e5 bok-objekt\n        Book book1 = new Book(\"1984\", \"George Orwell\", 328);\n        Book book2 = new Book(\"To Kill a Mockingbird\", \"Harper Lee\", 281);\n\n        // L\u00e4gg till b\u00e5da b\u00f6ckerna i biblioteket med metoden AddBook\n        myLibrary.AddBook(book1);\n        myLibrary.AddBook(book2);\n\n        // Skriv ut det totala antalet b\u00f6cker i biblioteket med hj\u00e4lp av egenskapen TotalBookCount\n        Console.WriteLine($\"Total books in library: {myLibrary.TotalBookCount}\");\n\n        // Lista alla tillg\u00e4ngliga b\u00f6cker i biblioteket med hj\u00e4lp av metoden GetAvailableBooks\n        List&lt;Book&gt; availableBooks = myLibrary.GetAvailableBooks();\n        Console.WriteLine(\"Available Books:\");\n        foreach (var book in availableBooks)\n        {\n            Console.WriteLine($\"- {book.Title} by {book.Author}, {book.Pages} pages\");\n        }\n\n        // L\u00e5na ut en bok med hj\u00e4lp av metoden BorrowBook. Om det lyckas (om metoden returnerar true) \n        // skriv ut ett meddelande om att l\u00e5net lyckades, annars  skriv ut ett felmeddelande.\n\n        bool borrowSuccess = myLibrary.BorrowBook(book1);\n        Console.WriteLine(borrowSuccess ? $\"Successfully borrowed '{book1.Title}'.\" : \"Failed\");\n\n        // Lista alla l\u00e5nade b\u00f6cker med hj\u00e4lp av metoden GetBorrowedBooks\n        var borrowedBooks = myLibrary.GetBorrowedBooks();\n        Console.WriteLine(\"Borrowed Books:\");\n        foreach (var book in borrowedBooks)\n        {\n            Console.WriteLine($\"- {book.Title} by {book.Author}, {book.Pages} pages\");\n        }\n\n        // \u00c5terl\u00e4mna den l\u00e5nade boken med hj\u00e4lp av metoden ReturnBook. Om det lyckas (om metoden returnerar true)\n        // skriv ut ett meddelande om att \u00e5terl\u00e4mningen lyckades, annars skriv ut ett felmeddelande.\n        bool returnSuccess = myLibrary.ReturnBook(book1);\n        Console.WriteLine(returnSuccess ? $\"Successfully returned '{book1.Title}'.\" : \"Failed\");\n\n        // Lista alla tillg\u00e4ngliga b\u00f6cker i biblioteket igen f\u00f6r att verifiera att den \u00e5terl\u00e4mnade boken finns med\n        availableBooks = myLibrary.GetAvailableBooks();\n        Console.WriteLine(\"Available Books After Return:\");\n        foreach (var book in availableBooks)\n        {\n            Console.WriteLine($\"- {book.Title} by {book.Author}, {book.Pages} pages\");\n        }\n    }\n}\n\nclass Book\n{\n    private string title; // Fr\u00e5ga: Kan du f\u00f6rklara varf\u00f6r dessa f\u00e4lt beh\u00f6vs och varf\u00f6r de \u00e4r privata?\n    private string author;\n    private int pages;\n\n    public string Title\n    {\n        get =&gt; title; // Att skriva s\u00e5 h\u00e4r \u00e4r ett kortare s\u00e4tt att skriva get { return title; }\n        set\n        {\n            if (string.IsNullOrWhiteSpace(value))\n                throw new ArgumentException(\"Title cannot be empty.\");\n            title = value;\n        }\n    }\n\n    public string Author\n    {\n        get =&gt; author;\n        set\n        {\n            if (string.IsNullOrWhiteSpace(value))\n                throw new ArgumentException(\"Author cannot be empty.\");\n            author = value;\n        }\n    }\n\n    public int Pages\n    {\n        get =&gt; pages;\n        set\n        {\n            if (value &lt;= 0)\n                throw new ArgumentException(\"Pages must be greater than zero.\");\n            pages = value;\n        }\n    }\n\n    public Book(string title, string author, int pages)\n    {\n        Title = title;\n        Author = author;\n        Pages = pages;\n    }\n}\n\nclass Library\n{\n    private readonly List&lt;Book&gt; availableBooks = []; //Fr\u00e5ga: Vad g\u00f6r 'readonly' f\u00f6r n\u00e5got?\n    private readonly List&lt;Book&gt; borrowedBooks = [];\n\n    public int TotalBookCount\n    {\n        get\n        {\n            return availableBooks.Count + borrowedBooks.Count;\n        }\n    }\n\n    public void AddBook(Book book)\n    {\n        if (book == null)\n            throw new ArgumentNullException(nameof(book));\n        if (IsBookInLibrary(book))\n            throw new InvalidOperationException(\"Book is already in the library.\");\n\n        availableBooks.Add(book);\n    }\n\n    public void RemoveBook(Book book)\n    {\n        ArgumentNullException.ThrowIfNull(book);\n        if (!IsBookInLibrary(book))\n            throw new InvalidOperationException(\"Book is not in the library.\");\n\n        availableBooks.Remove(book);\n    }\n\n    public bool BorrowBook(Book book)\n    {\n        return MoveBook(book, availableBooks, borrowedBooks);\n    }\n\n    public bool ReturnBook(Book book)\n    {\n        return MoveBook(book, borrowedBooks, availableBooks);\n    }\n\n    private bool MoveBook(Book book, List&lt;Book&gt; fromList, List&lt;Book&gt; toList)\n    {\n        ArgumentNullException.ThrowIfNull(book);\n        if (!fromList.Contains(book)) return false;\n\n        fromList.Remove(book);\n        toList.Add(book);\n        return true;\n    }\n\n    private bool IsBookInLibrary(Book book)\n    {\n        return availableBooks.Contains(book) || borrowedBooks.Contains(book);\n    }\n\n    public List&lt;Book&gt; GetAllBooks()\n    {\n        return availableBooks;\n    }\n\n    public List&lt;Book&gt; GetAvailableBooks()\n    {\n        return new List&lt;Book&gt;(availableBooks); //Fr\u00e5ga: Vad blir det f\u00f6r skillnad p\u00e5 det och att bara returnera availableBooks direkt?\n    }\n\n    public ReadOnlyCollection&lt;Book&gt; GetBorrowedBooks()\n    {\n        return borrowedBooks.AsReadOnly(); //Fr\u00e5ga: Vad tror du h\u00e4nder h\u00e4r egentligen? Vad \u00e4r ReadOnlyCollection och varf\u00f6r anv\u00e4nds den? Vad \u00e4r skillnaden fr\u00e5n metoden ovan?\n    }\n}\n</code></pre> Skapa en \u00f6vning p\u00e5 temat Klasser och Objekt <p>Skapa en egen \u00f6vning som handlar om klasser och objekt. Beskriv vad som ska g\u00f6ras, och skriv en exempell\u00f6sning. L\u00e5t sedan din l\u00e4rare och klasskamrater g\u00f6ra \u00f6vningen och ge feedback p\u00e5 den.</p> <p>Obs! Ingen genererad kod, du ska ha skrivit den helt sj\u00e4lv. </p> Exempell\u00f6sning <p>Se alla andra \u00f6vningar f\u00f6r exempel p\u00e5 \u00f6vningar :)</p>","tags":["OOP1-\u00d6vning"]},{"location":"extra/#arv","title":"Arv","text":"","tags":["OOP1-\u00d6vning"]},{"location":"extra/#logiska-fel","title":"Logiska fel","text":"<p>H\u00e4r \u00e4r n\u00e5gra \u00f6vningar d\u00e4r koden har logiska fel. Identifiera och r\u00e4tta till dem s\u00e5 att programmen fungerar som avsett. Anv\u00e4nd debuggern eller skriv ut variabler med <code>Console.WriteLine</code> f\u00f6r att f\u00f6rst\u00e5 vad som h\u00e4nder.</p> Summera tal <p>Programmet ska summera alla tal i en array och skriva ut summan, men koden har n\u00e5got logiskt fel. Identifiera och r\u00e4tta till dem s\u00e5 att programmet fungerar som avsett.</p> <pre><code>class Program\n{\n    static void Main(string[] args)\n    {\n        int[] numbers = { 1, 2, 3, 4, 5 };\n        int sum = 0;\n\n        for (int i = 0; i &lt;= numbers.Length; i++)\n        {\n            sum += numbers[i];\n        }\n\n        Console.WriteLine(\"Summan \u00e4r: \" + sum);\n    }\n}\n</code></pre> (SV\u00c5R) M\u00e5nga logiska fel <pre><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program\n{\n    static void Main()\n    {\n        var temps = GenerateTemperatures(31);\n\n        Console.WriteLine(\"F\u00f6rsta 5 m\u00e4tningarna:\");\n        for (int i = 0; i &lt;= 5; i++) \n        {\n            Console.Write(temps[i] + (i &lt; 5 ? \", \" : \"\\n\"));\n        }\n\n        Console.WriteLine($\"Medel: {Average(temps)}\");\n        Console.WriteLine($\"Median: {Median(temps)}\");\n        Console.WriteLine($\"Typv\u00e4rde: {Mode(temps)}\");\n        Console.WriteLine($\"Kallaste: {temps.Min()}\");\n        Console.WriteLine($\"Varmaste: {temps.Max()}\");\n    }\n\n    static List&lt;int&gt; GenerateTemperatures(int days)\n    {\n        var list = new List&lt;int&gt;(days);\n        for (int i = 0; i &lt; days; i++)\n        {\n            var rng = new Random();\n            list.Add(rng.Next(-10, 26));\n        }\n        return list;\n    }\n\n    static double Average(List&lt;int&gt; values)\n    {\n        int sum = 0;\n        foreach (var v in values)\n            sum += v;\n\n        return sum / values.Count;\n    }\n\n    static double Median(List&lt;int&gt; values)\n    {\n        List&lt;int&gt; sorted = values;\n        sorted.Sort();\n\n        int n = sorted.Count;\n        if (n % 2 == 1)\n        {\n            return sorted[n / 2];\n        }\n        else\n        {\n            return (sorted[n / 2] + sorted[n / 2 + 1]) / 2.0;\n        }\n    }\n\n    static int Mode(List&lt;int&gt; values)\n    {\n        var counts = new Dictionary&lt;int, int&gt;();\n        foreach (var v in values)\n        {\n            if (!counts.ContainsKey(v))\n                counts[v] = 0;\n\n            counts[v]++;\n\n            if (counts[v] % 5 == 0)\n            {\n                var anyKey = counts.Keys.First();\n                counts[anyKey] = 0;\n            }\n        }\n\n        int bestKey = counts.First().Key;\n        int bestCount = counts[bestKey];\n\n        foreach (var kv in counts)\n        {\n            if (kv.Value &gt;= bestCount)\n            {\n                bestKey = kv.Key;\n                bestCount = kv.Value;\n            }\n        }\n\n        return bestKey;\n    }\n}\n</code></pre>","tags":["OOP1-\u00d6vning"]},{"location":"extra/#2-minuters-ovningar","title":"2-minuters-\u00f6vningar","text":"<p>Alla dessa \u00f6vningar \u00e4r t\u00e4nkta att kunna l\u00f6sas p\u00e5 ungef\u00e4r 2 minuter vardera. Prova att s\u00e4tta en timer p\u00e5 2 minuter och se hur l\u00e5ngt du kommer p\u00e5 den tiden!  </p> <p>Alla \u00f6vningar kan ocks\u00e5 f\u00f6reg\u00e5s av att skapa ett nytt konsolprojekt fr\u00e5n scratch f\u00f6r att \u00f6va p\u00e5 det.  </p> 2 minuters \u00f6vning #1 <ol> <li>Skapa och initiera en lista med str\u00e4ngar. Den ska inneh\u00e5lla namnen \"Bill\", \"Bull\" och \"Pelle\". (20s)</li> <li>Skriv ut det andra namnet i listan med Console.WriteLine (10 sekunder).</li> <li>Skriv en for-each-loop som loopar igenom alla namn i listan och skriver ut dem (30s).</li> </ol> 2 minuters \u00f6vning #2 <ol> <li>Skapa och initiera en lista med 5 heltalsv\u00e4rden. (20s)</li> <li>Skriv ut summan av alla v\u00e4rden i listan. Anv\u00e4nd en for-each-loop. (30s).</li> <li>Skriv en for-loop som skriver ut varannat v\u00e4rde i listan (40s).</li> </ol> 2 minuters \u00f6vning #3 <ol> <li>Skapa klassen <code>Rectangle</code> med tv\u00e5 egenskaper: <code>Width</code> och <code>Height</code> av typen <code>double</code>. (1min)</li> <li>L\u00e4gg till en instansmetod <code>GetArea</code> som returnerar arean av rektangeln (Width * Height). (30s)</li> <li>Med top-level statements i Program.cs, instansiera ett objekt av typen <code>Rectangle</code>. (10s)</li> <li>S\u00e4tt dess <code>Width</code> till 5 och <code>Height</code> till 10. (10s)</li> <li>Skriv ut arean i terminalen med hj\u00e4lp av <code>GetArea</code>-metoden. (10s)</li> </ol>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/","title":"Lektioner","text":""},{"location":"lektioner/#startdatum-for-vecka-1-ar-2025-09-02-forsta-veckan-ar-vecka-36","title":"Startdatum f\u00f6r vecka 1 \u00e4r 2025-09-02. F\u00f6rsta veckan \u00e4r vecka 36.","text":"<p>S\u00e5 h\u00e4r funkar lektionerna p\u00e5 Suvnet:</p> <ul> <li>Varje lektionsdag \u00e4r 6h l\u00e5ng, 3h p\u00e5 f\u00f6rmiddagen och 3h efter lunch.</li> <li>Ganska ofta blir det f\u00f6rel\u00e4sningar och tillsammanskodning p\u00e5 f\u00f6rmiddagen, och mer sj\u00e4lvst\u00e4ndigt arbete p\u00e5 eftermiddagen.</li> <li>Vi jobbar p\u00e5 i 50 min och tar 10 min paus.</li> <li>Vi kommer i tid.</li> <li>Vi jobbar tillsammans, hj\u00e4lper varandra och st\u00e4ller mycket fr\u00e5gor. \u00c4ven dumma fr\u00e5gor (eftersom, ni vet, inga fr\u00e5gor \u00e4r dumma :)</li> <li>Vi anv\u00e4nder inte ChatGPT eller liknande verktyg f\u00f6r att l\u00f6sa uppgifter, utan vi f\u00f6rs\u00f6ker sj\u00e4lva. Att l\u00e5ta LLMs g\u00f6ra jobbet \u00e4r som att titta p\u00e5 n\u00e5gon annan n\u00e4r den l\u00e4r sig gymnastik och sedan tro att man kan sl\u00e5 volter; det kommer inte bli bra.</li> </ul>"},{"location":"lektioner/#schema","title":"Schema","text":"V 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 m\u00e5n oop tis oop oop oop oop oop oop oop oop DB DB DB oop oop DB oop DB ons oop oop oop oop tenta DB oop DB DB tenta db DB oop oop DB DB tor oop oop oop DB DB DB DB oop oop DB oop DB oop DB oop fre oop"},{"location":"lektioner/#lektionsoversikt","title":"Lektions\u00f6versikt","text":"<p>Grupperingarna visar vilka lektioner som \u00e4ger rum under samma vecka.</p> <p>01 Intro 02 Variabler, if-sats, array, loop 03 pseudokod probleml\u00f6sning random file string debugger  </p> <p>04 Metoder, titta p\u00e5 helt program, meny-\u00f6vning 05 List, Tryparse 06 Lab #1 (grundl\u00e4ggande C#)  </p> <p>07 OOP klasser och objekt 08 OOP klassmetoder och access modifiers 09 Git och GitHub  </p> <p>10 OOP properties, konstruktorer 11 OOP arv och polymorfism, namespaces 12 Felhantering och Exceptions   </p> <p>13 Lab #2 - OOP och Git   </p> <p>14 Tenta- och Lab #2-genomg\u00e5ng, Enums och CRC-\u00f6vning   </p> <p>15 Genomg\u00e5ng l\u00e4xa. Abstrakta klasser, SOLID, Projektstruktur  16 Interfaces   </p> <p>17 Lab #3 - Github Workflows och Interfaces   </p> <p>18 Lab #4 - Videoteket forts\u00e4tter  </p> <p>19 Lab #4 forts\u00e4tter</p> <pre><code>/* -------------------\n    C# paus en vecka.\n    Bara databas!  \n   ------------------- */  \n</code></pre> <p>20 Grupparbeteenk\u00e4t. Enhetstestning start. 21 Enhetstestning 22 Lab #5 - Enhetstestning  </p> <p>23 Projektarbete - uppstart 24 Workshop  </p> <p>25 Workshop  </p> <p>26 Workshop  </p> <p>27 Workshop  </p>"},{"location":"lektioner/intro/","title":"Introduktion","text":"<p>De h\u00e4r veckorna handlar mest om introduktion till kursen, vi l\u00e4r k\u00e4nna varandra lite grann, g\u00f6r diagnostiskt test (visst l\u00e5ter det h\u00e4rligt!), g\u00e5r igenom kursplanen och s\u00e5 vidare. Vi kommer ocks\u00e5 att installera Visual Studio och .NET SDK p\u00e5 era datorer, s\u00e5 att ni \u00e4r redo att b\u00f6rja koda p\u00e5 riktigt vecka 2. Vi smygstartar med lite kod ocks\u00e5.</p> <p>\"Men jag kan ju allt det h\u00e4r redan!\" t\u00e4nker du kanske nu. Det \u00e4r helt okej, det \u00e4r bra att du kan det redan. Men, f\u00f6r att komma ig\u00e5ng med kursen p\u00e5 ett bra s\u00e4tt s\u00e5 beh\u00f6ver vi g\u00e5 igenom det h\u00e4r tillsammans. Det \u00e4r ocks\u00e5 viktigt att vi f\u00e5r en gemensam grund att st\u00e5 p\u00e5, s\u00e5 att vi kan bygga vidare p\u00e5 den under kursens g\u00e5ng.</p> <p>Eller s\u00e5 t\u00e4nker du \"Men jag kan ju inget av det h\u00e4r!\" Det \u00e4r ocks\u00e5 helt okej. Vi kommer att ta det lugnt och g\u00e5 igenom allt i en takt som passar alla. Det viktigaste \u00e4r att du \u00e4r h\u00e4r och vill l\u00e4ra dig! Vi kommer ocks\u00e5 ha en extra grundgenomg\u00e5ng f\u00f6r dig som k\u00e4nner att du beh\u00f6ver det.</p>"},{"location":"lektioner/intro/v01/lektion%201/","title":"Lektion 1: Introduktion, kom ig\u00e5ng med VS Code och .NET","text":""},{"location":"lektioner/intro/v01/lektion%201/#innehall","title":"Inneh\u00e5ll","text":"<ul> <li>Introduktion till kursen och praktisk info (1h)</li> <li>Quiz! Via Google Classroom. Gemnomg\u00e5ng del 1 (1h)</li> <li>Genomg\u00e5ng del 2 (0.5h)</li> <li>Titta p\u00e5 klassrum/docs.suvnet.se + Kort om terminalen/filesystemet (0.5h)</li> <li>Lite snack om vad programmering \u00e4r (0.5h)</li> <li>Kom ig\u00e5ng med VS Code och Hello World!</li> <li>Intro till projektstruktur i .NET</li> </ul>"},{"location":"lektioner/intro/v01/lektion%201/#ovningar","title":"\u00d6vningar","text":""},{"location":"lektioner/intro/v01/lektion%201/#terminalovning","title":"Terminal\u00f6vning","text":"<p>Testa om du f\u00e5r detta att fungera och fundera p\u00e5 vilka kommandon du beh\u00f6ver l\u00e4ra dig.</p> <ol> <li>\u00d6ppna terminalen<sup>1</sup></li> <li>Navigera till din hemkatalog</li> <li>Skapa en ny mapp som heter <code>SUVNET</code></li> <li>Navigera in i mappen <code>SUVNET</code></li> <li>Skapa en ny mapp som heter <code>OOP1</code> och g\u00e5 in i den</li> <li>Skapa ett nytt projekt med kommandot <code>dotnet new console -n Lektion2</code></li> </ol>"},{"location":"lektioner/intro/v01/lektion%201/#anteckningar","title":"Anteckningar","text":"<p>L\u00e4s mer om terminalen h\u00e4r.  Mer om filsystemet h\u00e4r</p> <p>Kolla ocks\u00e5 in guiderna f\u00f6r</p> <ul> <li>Installera VS Code och .NET</li> <li>Starta nytt .NET-projekt</li> <li>Auto-save i VS Code</li> </ul> <p>Vi snackade ocks\u00e5 lite om str\u00e4nghantering och tittade p\u00e5 exempel med <code>Trim()</code> och <code>Replace()</code>. Vi kommer prata mycket mer om str\u00e4ngar, hur de kan manipuleras och formateras p\u00e5 olika s\u00e4tt.</p> <p>Vi snackade ocks\u00e5 om mindre lyckade projekt, exempelvis v\u00e5rdystemet Millenium eller lagersystem d\u00e4r utvecklare inte alltid kanske haft s\u00e5 bra koll p\u00e5 verkligheten (Eller i alla fall de som best\u00e4llt programmet).</p> <p>Snack om \"cognitive load\": https://minds.md/zakirullin/cognitive</p>"},{"location":"lektioner/intro/v01/lektion%201/#lankar","title":"L\u00e4nkar","text":"<ul> <li>Studiematerial</li> <li>The Art of Code</li> </ul> <ol> <li> <p>Det finns m\u00e5nga s\u00e4tt att \u00f6ppna terminalen! Om du vill ha en guide kolla h\u00e4r \u21a9</p> </li> </ol>"},{"location":"lektioner/intro/v01/lektion%202/","title":"Lektion 2 - Introduktion till C#","text":""},{"location":"lektioner/intro/v01/lektion%202/#dagens-innehall","title":"Dagens inneh\u00e5ll","text":""},{"location":"lektioner/intro/v01/lektion%202/#allmanna-begrepp-1h","title":"Allm\u00e4nna begrepp (1h)","text":"<ul> <li>Milj\u00f6 (Environment)</li> <li>Ramverk / Framework</li> <li>C# och .NET</li> <li>Kompilering</li> <li>K\u00e4llkod / Bytekod / Maskinkod</li> </ul>"},{"location":"lektioner/intro/v01/lektion%202/#grundlaggande-c","title":"Grundl\u00e4ggande C#","text":"<ul> <li>Variabler/datatyper och Inmatning/Utmatning (0.5h)</li> <li>Villkorssatser (0.5h)</li> <li>Arrayer (0.5h)</li> <li>Loopar (1h)</li> </ul>"},{"location":"lektioner/intro/v01/lektion%202/#anteckningar","title":"Anteckningar","text":""},{"location":"lektioner/intro/v01/lektion%202/#lankar","title":"L\u00e4nkar","text":"<ul> <li>DotNets GitHub-repo</li> <li>https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/introduction</li> </ul>"},{"location":"lektioner/intro/v01/lektion%202/exercise/","title":"\u00d6vning 02 Grunder","text":"","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/intro/v01/lektion%202/exercise/#variabler","title":"Variabler","text":"<ol> <li>Deklarera en str\u00e4ngvariabel med namnet <code>greeting</code> och tilldela den v\u00e4rdet <code>\"Hello\"</code>. Skriv ut den till konsolen.</li> <li>Deklarera en annan str\u00e4ngvariabel med namnet <code>greeting2</code>, tilldela den v\u00e4rdet <code>\", World!\"</code>. Sl\u00e5 samman <code>greeting</code> och <code>greeting2</code> och skriv ut resultatet till konsolen.</li> <li>Fr\u00e5ga anv\u00e4ndaren efter deras namn och h\u00e4lsa dem v\u00e4lkomna. Exempelvis med ett <code>\"Hej, John!\"</code>.</li> <li>Deklarera tv\u00e5 heltalsvariabler, tilldela dem v\u00e4rden och skriv ut deras summa.</li> <li>Fr\u00e5ga anv\u00e4ndaren efter deras \u00e5lder. Konvertera den till ett heltal<sup>1</sup> och skriv ut hur m\u00e5nga dagar gammal de \u00e4r.<ol> <li>Deklarera en int, kalla den <code>div</code> och tilldela den v\u00e4rdet 3</li> <li>Dela sedan anv\u00e4ndarens \u00e5lder med <code>div</code> och skriv ut resultatet. Prova n\u00e5gra olika \u00e5ldrar. Blir resultatet korrekt? Varf\u00f6r/varf\u00f6r inte?</li> </ol> </li> <li>Skapa en int-variabel och ge den exakt v\u00e4rdet 2147483647. L\u00e4gg sedan till 1 i variabeln och skriv ut resultatet. Vad h\u00e4nder? Varf\u00f6r?</li> </ol>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/intro/v01/lektion%202/exercise/#villkorssatser","title":"Villkorssatser","text":"<ol> <li>Om anv\u00e4ndarens \u00e5lder \u00e4r mer \u00e4n 18 skriv ut \"Du f\u00e5r ta k\u00f6rkort!\".</li> <li>L\u00e4gg till en else-sats som skriver ut \"Du f\u00e5r inte ta k\u00f6rkort \u00e4n :(\" om anv\u00e4ndaren \u00e4r 18 eller yngre.</li> <li>Ut\u00f6ka programmet s\u00e5 att det \u00e4ven kollar om anv\u00e4ndaren \u00e4r exakt 18 \u00e5r gammal. Om s\u00e5 \u00e4r fallet, skriv ut \"Du \u00e4r exakt 18!\".</li> <li>Modifiera koden s\u00e5 att \"Du f\u00e5r ta k\u00f6rtkort\" hamnar under en else-sats i slutet.</li> </ol>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/intro/v01/lektion%202/exercise/#arrayer","title":"Arrayer","text":"<ol> <li>Deklarera en array med fem namn. Tilldela dem v\u00e4rden och skriv ut dem med hj\u00e4lp av en loop (for eller while).</li> <li>Skapa tv\u00e5 arrayer, en med namn och en med \u00e5ldrar. Skriv ut varje namn tillsammans med dess \u00e5lder.</li> <li>L\u00e5t anv\u00e4ndaren mata in tre namn, lagra dem i en array och skriv sedan ut dem s\u00e5 att det ser ut s\u00e5 h\u00e4r: <pre><code>Person 1: [namn]\nPerson 2: [namn]\nPerson 3: [namn]\n</code></pre></li> </ol>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/intro/v01/lektion%202/exercise/#loopar","title":"Loopar","text":"<ol> <li>Deklarera och initialisera en variabel till 10, minska den tills den n\u00e5r 1 och skriv ut dess v\u00e4rde vid varje steg. Anv\u00e4nd en while-loop</li> <li>Skriv ut siffror fr\u00e5n 1 till 10 med hj\u00e4lp av en for-loop.</li> <li>Skriv ett program som skriver ut multiplikationstabellen f\u00f6r en siffra som anv\u00e4ndaren f\u00e5r mata in sj\u00e4lv.</li> <li>Skriv ut siffror fr\u00e5n 1 till 10 med hj\u00e4lp av en for-loop. Skriv ut \"Burr\" om siffran \u00e4r j\u00e4mn och \"Birr\" om den \u00e4r udda, men bara om siffran \u00e4r mellan 3 och 7!</li> <li>Skriv ut ett m\u00f6nster av stj\u00e4rnor med hj\u00e4lp av n\u00e4stlade loopar. Allts\u00e5 n\u00e5got i stil med: <pre><code>*\n**\n***\n****\n</code></pre></li> </ol> Ett fl\u00f6desschema som kanske hj\u00e4lper lite <pre><code>flowchart TB\nB[mata in RADER] --&gt; C[i = 0] --&gt; D{i &lt; RADER?}\nD -- JA --&gt; R[j = 0]\nR --&gt; E{j &lt; i?}\nE -- JA--&gt; F[Skriv ut stj\u00e4rna] --&gt; T[j++]\nT --&gt; E\nE -- NEJ--&gt; J[Ny Rad!]\nJ --&gt; L[i++]\nL --&gt; D\nD -- NEJ --&gt; M[Slut]</code></pre>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/intro/v01/lektion%202/exercise/#en-lite-klurigare-variant","title":"En lite klurigare variant:","text":"<p>L\u00e5t anv\u00e4ndaren skriva in en siffra. L\u00e5t den siffran best\u00e4mma hur m\u00e5nga rader som skall skrivas ut enligt m\u00f6nstret ovan. Till skillnad fr\u00e5n ovan skall dock m\u00f6nstret bilda en pyramid enligt f\u00f6ljande: <pre><code>   * *\n  ** **\n *** ***\n**** ****\n</code></pre></p> <ol> <li> <p>Tips: Anv\u00e4nd <code>int.Parse(Console.ReadLine())</code> eller <code>Convert.ToInt32(Console.ReadLine())</code> f\u00f6r att konvertera en str\u00e4ng till ett heltal.\u00a0\u21a9</p> </li> </ol>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/intro/v01/lektion%202/exercise2/","title":"\u00d6vning 02 Todo CLI","text":"<p>Detta \u00e4r en l\u00e4ngre \u00f6vning som kan ta flera timmar att l\u00f6sa. Den kan vara ganska klurig d\u00e5 det kanske \u00e4r m\u00e5nga saker som \u00e4r nya f\u00f6r dig hur det funkar med kommandoradsprogram, filhantering och s\u00e5 vidare. Ta det lugnt, jobba i din egen takt, fr\u00e5ga om hj\u00e4lp n\u00e4r du k\u00f6r fast och f\u00f6rs\u00f6k l\u00f6sa s\u00e5 mycket som m\u00f6jligt p\u00e5 egen hand.</p> <p>Du ska skapa ett enkelt kommandoradsprogram<sup>1</sup> som hanterar en todo-lista. S\u00e5 h\u00e4r ska det funka:</p> <ul> <li><code>todo</code> visar en numrerad lista med saker att g\u00f6ra, om de \u00e4r gjorda eller inte, och eventuellt en deadline</li> <li><code>todo -h</code> visar en hj\u00e4lptext om programmets andra kommandon</li> <li><code>todo add \"G\u00e5 ut med soporna\"</code> l\u00e4gger till en ny sak att g\u00f6ra utan deadline</li> <li>(valfri) <code>todo add \"Betala r\u00e4kningar\" --due 2024-12-01</code> l\u00e4gger till en ny sak att g\u00f6ra med deadline</li> <li><code>todo done 2</code> markerar sak nummer 2 som gjord</li> <li><code>todo remove 3</code> tar bort sak nummer 3 fr\u00e5n listan</li> </ul>","tags":["OOP1-\u00d6vning (sv\u00e5r)"]},{"location":"lektioner/intro/v01/lektion%202/exercise2/#regler","title":"Regler","text":"<ul> <li>Allt lagras i arrayer och hanteras med loopar och villkor (inga List&lt;&gt; eller LINQ)</li> <li>Inga nya klasser ska skapas</li> <li>Inga nya metoder ska skapas</li> </ul> <p>Tips</p> <ul> <li>Anv\u00e4nd <code>args</code> f\u00f6r att l\u00e4sa in kommandoradsargument</li> <li>Anv\u00e4nd <code>DateTime.TryParse</code> f\u00f6r att tolka datum</li> <li>Anv\u00e4nd <code>DateTime.Now</code> f\u00f6r att f\u00e5 dagens datum</li> <li>Anv\u00e4nd <code>string.Split</code> f\u00f6r att dela upp str\u00e4ngar</li> <li>Anv\u00e4nd <code>string.Join</code> f\u00f6r att s\u00e4tta ihop str\u00e4ngar</li> <li>Anv\u00e4nd <code>File.ReadAllLines</code> och <code>File.WriteAllLines</code> f\u00f6r att l\u00e4sa och skriva filer</li> <li>Anv\u00e4nd <code>Array.Resize</code> f\u00f6r att \u00e4ndra storlek p\u00e5 arrayer</li> </ul> <ol> <li> <p>Ett kommandoradsprogram \u00e4r ett program som k\u00f6rs i en terminal/kommandoprompt, utan grafiskt gr\u00e4nssnitt. <code>dotnet</code> \u00e4r ett exempel p\u00e5 ett s\u00e5dant program. Du skall allts\u00e5 inte skapa ett program som startar och som anv\u00e4ndaren sedan anv\u00e4nder sig av medan det \u00e4r ig\u00e5ng, utan det startas med ett argument och avslutas direkt n\u00e4r det \u00e4r klar.\u00a0\u21a9</p> </li> </ol>","tags":["OOP1-\u00d6vning (sv\u00e5r)"]},{"location":"lektioner/intro/v01/lektion%203/","title":"Lektion 3 - Probleml\u00f6sning och Pseudokod","text":""},{"location":"lektioner/intro/v01/lektion%203/#innehall","title":"Inneh\u00e5ll","text":"<ul> <li>Lite repetition av f\u00f6reg\u00e5ende lektion</li> <li>Den d\u00e4r for-loopen (1h)</li> <li>Debuggern (1h)</li> <li>Probleml\u00f6sning - Hur g\u00f6r man?</li> <li>Pseudokod och fl\u00f6desscheman</li> <li>\u00d6vningar i pseudokod och C# (1h)</li> <li>Vanliga .NET Bibliotek och n\u00e5gra av deras funktioner<ul> <li>Random</li> <li>File.*</li> <li>String</li> </ul> </li> <li>\u00d6vningar (3h)</li> </ul>"},{"location":"lektioner/intro/v01/lektion%203/#anteckningar","title":"Anteckningar","text":"L\u00f6sning p\u00e5 forloops\u00f6vning 2 fr\u00e5n f\u00f6rra lektionen <p>L\u00e5t anv\u00e4ndaren skriva in en siffra. L\u00e5t den siffran best\u00e4mma hur m\u00e5nga rader som skall skrivas ut enligt m\u00f6nstret ovan. Till skillnad fr\u00e5n ovan skall dock m\u00f6nstret bilda en pyramid enligt f\u00f6ljande: <pre><code>   * *\n  ** **\n *** ***\n**** ****\n</code></pre></p> <pre><code>Console.Write(\"Ange antal rader: \");\nint rowsInTotal = int.Parse(Console.ReadLine());\nfor (int currentRow = 1; currentRow &lt;= rowsInTotal; currentRow++)\n{\n    // Hur m\u00e5nga mellanslag ska vi skriva ut?\n    for (int j = rowsInTotal; j &gt; currentRow; j--)\n    {\n        Console.Write(\" \");\n    }\n\n    // Hur mnga stj\u00e4rnor?\n    for (int k = 1; k &lt;= currentRow; k++)\n    {\n        Console.Write(\"*\");\n    }\n\n    Console.Write(\" \"); // Det \u00e4r alltid bara ett mellanslag mellan v\u00e4nster och h\u00f6ger pyramidhalva\n\n    // Hur m\u00e5nga stj\u00e4rnor till h\u00f6ger? Jo, lika m\u00e5nga g\u00e5nger som f\u00f6rsta g\u00e5ngen!\n    for (int l = 1; l &lt;= currentRow; l++)\n    {\n        Console.Write(\"*\");\n    }\n\n    // N\u00e4r vi \u00e4r klara m\u00e5ste vi byta till n\u00e4sta rad s\u00e5 allt inte kommer p\u00e5 samma rad!\n    Console.WriteLine();\n}\n</code></pre>"},{"location":"lektioner/intro/v01/lektion%203/fileandstring/","title":"\u00d6vning 03 File","text":"<p>Kika p\u00e5 dokumentationen om File-klassen.</p> <p>G\u00f6r ett program som anv\u00e4nder n\u00e5gon av funktionerna i <code>File</code>-klassen och/eller <code>String</code>-klassen f\u00f6r att l\u00f6sa n\u00e5got av f\u00f6ljande problem:</p> <ol> <li> <p>R\u00e4kna rader i en textfil</p> <ul> <li>L\u00e4s in en textfil och r\u00e4kna hur m\u00e5nga rader den inneh\u00e5ller.</li> <li>Visa resultatet i konsolen.</li> </ul> </li> <li> <p>S\u00f6k efter ett ord i en textfil</p> <ul> <li>L\u00e4s in en textfil och l\u00e5t anv\u00e4ndaren skriva in ett ord.</li> <li>R\u00e4kna hur m\u00e5nga g\u00e5nger ordet f\u00f6rekommer i filen och visa resultatet.</li> <li>Utveckling: Visa \u00e4ven vilka rader ordet f\u00f6rekommer p\u00e5.</li> <li>Utveckling 2: G\u00f6r s\u00f6kningen ok\u00e4nslig f\u00f6r versaler/gemener (case insensitive).</li> <li>Utveckling 3: Visa raderna d\u00e4r ordet f\u00f6rekommer, med ordet markerat (t.ex. med asterisker <code>*ord*</code>).</li> </ul> </li> <li> <p>Skapa en \"sammanfattning\" av en textfil</p> <ul> <li>L\u00e4s in en textfil och skapa en ny fil som inneh\u00e5ller de f\u00f6rsta 5 raderna  fr\u00e5n den ursprungliga filen.</li> <li>Spara den nya filen med samma namn som den ursprungliga med till\u00e4gget \"_summary\".</li> </ul> </li> </ol> Exempell\u00f6sning p\u00e5 S\u00f6k efter ett ord i en textfil <pre><code>string[] lines = File.ReadAllLines(\"example.txt\");\n\nwhile (true)\n{\n    int wordCount = 0;\n    int lineCount = 0;\n    string foundOnRows = \"\";\n\n    Console.Write(\"S\u00f6k: \");\n    string searchWord = Console.ReadLine();\n    if (string.IsNullOrEmpty(searchWord)) break;\n\n    for (int i = 0; i &lt; lines.Length; i++)\n    {\n        string line = lines[i];\n        string[] words = line.Split(\" \");\n\n        bool isFound = false;\n\n        foreach (string word in words)\n        {\n            if (word.Contains(searchWord, StringComparison.InvariantCultureIgnoreCase))\n            {\n                wordCount++;\n                isFound = true;\n            }\n        }\n\n        if (isFound)\n        {\n            lineCount++;\n            foundOnRows += i + \", \";\n        }\n    }\n\n    Console.WriteLine(\"Antal ord: \" + wordCount);\n    Console.WriteLine(\"Hittade p\u00e5 \" + lineCount + \"rader.\");\n    Console.WriteLine(\"Hittades p\u00e5 raderna: \" + foundOnRows);\n}\n</code></pre>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/intro/v01/lektion%203/pseudocode/","title":"\u00d6vning 03 Pseudokod","text":"","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/intro/v01/lektion%203/pseudocode/#ovning-1","title":"\u00d6vning 1","text":"<p>T\u00e4nk dig ett program som ber anv\u00e4ndaren mata in tv\u00e5 tal, adderar dem och skriver ut resultatet:</p> <ol> <li>Skriv pseudokod f\u00f6r programmet som kommentarer</li> <li>Skriv koden f\u00f6r programmet i C#</li> </ol>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/intro/v01/lektion%203/pseudocode/#ovning-2","title":"\u00d6vning 2","text":"<p>T\u00e4nk dig ett program d\u00e4r anv\u00e4ndaren matar in ett ord. Ordet visas p\u00e5 sk\u00e4rmen och anv\u00e4ndaren f\u00e5r mata in ytterligare ett ord. B\u00e5da orden visas p\u00e5 sk\u00e4rmen osv. Detta forts\u00e4tter tills anv\u00e4ndaren matar in \"sluta\".</p> <ol> <li>Skriv pseudokod f\u00f6r programmet som kommentarer</li> <li>Skriv koden f\u00f6r programmet i C#</li> </ol>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/intro/v01/lektion%203/pseudocode/#ovning-3","title":"\u00d6vning 3","text":"<p>T\u00e4nk dig ett progam som ser ut s\u00e5 h\u00e4r n\u00e4r det k\u00f6rs: <pre><code>Ange en X-koordinat (1-5): 4\nAnge en Y-koordinat (1-5): 3\n\ny\n5 *\n4 *\n3 *       X\n2 *\n1 *\n0 * * * * * *\n  0 1 2 3 4 5 x\n</code></pre></p> <ul> <li>Skriv pseudokod f\u00f6r programmet som kommentarer</li> <li>Skriv koden f\u00f6r programmet i C#</li> </ul>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/intro/v01/lektion%203/pseudocode/#ovning-4","title":"\u00d6vning 4","text":"<p>Skriv programmet f\u00f6r denna pseudokod:</p> <pre><code>SKAPA en variabel som heter SUMMA och s\u00e4tt den till 0\nLOOPA o\u00e4ndligt\n    SKAPA en tom str\u00e4ng som heter INPUT\n    L\u00c4S in en rad fr\u00e5n anv\u00e4ndaren och spara i INPUT\n    OM INPUT \u00e4r lika med \"sluta\" (case insensitive)\n        AVBRYT loopen\n    ANNARS OM INPUT \u00e4r tom\n        SKRIV UT \"Du m\u00e5ste mata in n\u00e5got!\"\n    ANNARS OM INPUT g\u00e5r att tolka som ett heltal\n        ADDERA heltalet till SUMMA\n    ANNARS\n        SKRIV UT \"Det d\u00e4r var inte ett giltigt tal!\"\nSKRIV UT \"Summan av talen \u00e4r: \" + SUMMA\n</code></pre> Exempell\u00f6sning p\u00e5 uppgift 1 <pre><code>string input = \"\";\n\nwhile (true)\n{\n    string tmpInput = Console.ReadLine();\n\n    if (tmpInput.ToLower() == \"sluta\")\n    {\n        break;\n    }\n    input += tmpInput + \"\\n\";\n\n    Console.WriteLine(input);\n}\n</code></pre> <p>P\u00e5 vilka andra s\u00e4tt kan du l\u00f6sa uppgiften?</p> Exempell\u00f6sning p\u00e5 \u00f6vning 3 Mer extrem l\u00f6sning p\u00e5 \u00f6vning 3 <p><pre><code>Console.Write(\"Ange en X-koordinat (1-5): \");\nint x = int.Parse(Console.ReadLine());\nConsole.Write(\"Ange en Y-koordinat (1-5): \");\nint y = int.Parse(Console.ReadLine());\nConsole.WriteLine(\"\\ny\");\nfor (int r = 5; r &gt;= 0; r--, Console.WriteLine())\n    for (int c = -1; c &lt;= 5; c++)\n        Console.Write(c &lt; 0 ? r + \" \" : (r == y &amp;&amp; c == x ? \"X\" : (r == 0 || c == 0) ? \"*\" : \" \") + \" \");\nConsole.Write(\"  \");\nfor (int c = 0; c &lt;= 5; c++) Console.Write(c + \" \");\nConsole.WriteLine(\"x\");\n</code></pre> Obs, detta \u00e4r inget exempel p\u00e5 bra kod, utan bara en kul grej. Den \u00e4r alldeleses f\u00f6r kompakt och sv\u00e5r att l\u00e4sa! Exemplet ovan resulterar i exakt samma maskinkod som den enklare exemplet, men \u00e4r mycket sv\u00e5rare att f\u00f6rst\u00e5.</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/intro/v01/lektion%203/random/","title":"\u00d6vning 03 Random","text":"<p>Kika p\u00e5 dokumentationen om Random. . G\u00f6r ett program som anv\u00e4nder <code>Random</code>-klassen f\u00f6r att l\u00f6sa n\u00e5got av f\u00f6ljande problem:</p> <p>Skriv f\u00f6rst pseudokod f\u00f6r programmet som kommentarer i koden.</p> <ol> <li> <p>Sl\u00e5 en t\u00e4rning</p> <ul> <li>Slumpa ett tal mellan 1\u20136 och s\u00e4g vad t\u00e4rningskastet blev.</li> <li>Utveckling: Slumpa tv\u00e5 t\u00e4rningar, visa b\u00e5da resultaten och summan.</li> </ul> </li> <li> <p>Slumpa sten, sax, p\u00e5se</p> <ul> <li>Tre utfall i st\u00e4llet f\u00f6r tv\u00e5.</li> <li>G\u00f6r en liten meny d\u00e4r anv\u00e4ndaren v\u00e4ljer sitt drag, och datorns drag slumpas fram.</li> <li>J\u00e4mf\u00f6r och avg\u00f6r vinnare.</li> </ul> </li> <li> <p>Dagens lyckokaka-meddelande</p> <ul> <li>Ha en array med 5\u201310 olika \"meddelanden\" och slumpa fram ett.</li> <li>Liknar slantsingling, fast med flera alternativ.</li> </ul> </li> <li> <p>Gissa talet light</p> <ul> <li>Datorn slumpar ett tal mellan 1\u201310.</li> <li>Anv\u00e4ndaren gissar, datorn ber\u00e4ttar om det blev r\u00e4tt eller fel (ingen loop, bara enkel check).</li> </ul> </li> <li> <p>Slumpa fram v\u00e4der</p> <ul> <li>Slumpa mellan \"sol\", \"regn\", \"sn\u00f6\", \"molnigt\".</li> <li>Kan utvidgas till att slumpa temperatur ocks\u00e5.</li> </ul> </li> </ol>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/intro/v01/lektion%203/random/#exempellosningar","title":"Exempell\u00f6sningar","text":"<p>Kolla p\u00e5 dessa exempel efter att du f\u00f6rs\u00f6kt sj\u00e4lv!</p> Exempel: Sl\u00e5 en t\u00e4rning <pre><code>int dieRoll1 = Random.Shared.Next(1, 7); // 1 till 6\nConsole.WriteLine($\"Du slog {tarning}!\");\nint dieRoll2 = Random.Shared.Next(1, 7);\nConsole.WriteLine($\"Du slog {dieRoll2}!\");\nConsole.WriteLine($\"Summan av t\u00e4rningarna \u00e4r {dieRoll1 + dieRoll2}\");\n</code></pre> Exempel: Sten, sax, p\u00e5se <pre><code>string[] options = { \"sten\", \"sax\", \"p\u00e5se\" };\nConsole.Write(\"V\u00e4lj sten, sax eller p\u00e5se: \");\nstring userChoice = Console.ReadLine().ToLower();\nint computerIndex = Random.Shared.Next(0, options.Length);\nstring computerChoice = options[computerIndex];\nConsole.WriteLine($\"Datorn valde {computerChoice}\");\nif (userChoice == computerChoice)\n{\n    Console.WriteLine(\"Oavgjort!\");\n}\nelse if ((userChoice == \"sten\" &amp;&amp; computerChoice == \"sax\") ||\n         (userChoice == \"sax\" &amp;&amp; computerChoice == \"p\u00e5se\") ||\n         (userChoice == \"p\u00e5se\" &amp;&amp; computerChoice == \"sten\"))\n{\n    Console.WriteLine(\"Du vann!\");\n}\nelse\n{\n    Console.WriteLine(\"Datorn vann!\");\n}\n</code></pre> Exempel: Dagens lyckokaka-meddelande <pre><code>string[] messages = [\n    \"Du kommer att ha en bra dag!\",\n    \"N\u00e5gon kommer att g\u00f6ra dig glad idag.\",\n    \"En \u00f6verraskning v\u00e4ntar runt h\u00f6rnet.\",\n    \"Dina anstr\u00e4ngningar kommer att l\u00f6na sig.\",\n    \"Var \u00f6ppen f\u00f6r nya m\u00f6jligheter.\"\n];\nint index = Random.Shared.Next(0, messages.Length);\nConsole.WriteLine(messages[index]);\n</code></pre> Exempel: Gissa talet light <pre><code>int secretNumber = Random.Shared.Next(1, 11); // 1 till 10\nConsole.Write(\"Gissa ett tal mellan 1 och 10: \");\nint userGuess = int.Parse(Console.ReadLine());\nif (userGuess == secretNumber)\n{\n    Console.WriteLine(\"R\u00e4tt gissat!\");\n}\nelse\n{\n    Console.WriteLine($\"Fel! Det r\u00e4tta talet var {secretNumber}.\");\n}\n</code></pre> Exempel: Slumpa fram v\u00e4der <pre><code>string[] weatherOptions = { \"sol\", \"regn\", \"sn\u00f6\", \"molnigt\" };\nint weatherIndex = Random.Shared.Next(0, weatherOptions.Length);\nstring weather = weatherOptions[weatherIndex];\nint temperature = Random.Shared.Next(-10, 36); // -10 till 35\nConsole.WriteLine($\"Dagens v\u00e4der \u00e4r {weather} med en temperatur p\u00e5 {temperature}\u00b0C.\");\n</code></pre>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/intro/v01/lektion%203/strings/","title":"\u00d6vning 03 String","text":"<p>Kika p\u00e5 dokumentationen om string-metoder i .Net.</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/intro/v01/lektion%203/strings/#1-rakna-bokstaver","title":"1. R\u00e4kna bokst\u00e4ver","text":"<p>Skriv ett program som fr\u00e5gar anv\u00e4ndaren om deras namn och skriver ut hur m\u00e5nga tecken det inneh\u00e5ller.</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/intro/v01/lektion%203/strings/#2-stor-eller-liten-bokstav","title":"2. Stor eller liten bokstav","text":"<p>L\u00e4s in en mening och skriv ut den i b\u00e5de versaler och gemener.</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/intro/v01/lektion%203/strings/#3-hitta-ett-ord","title":"3. Hitta ett ord","text":"<p>L\u00e5t anv\u00e4ndaren skriva en text. Kolla om texten inneh\u00e5ller ordet C#, och skriv ut ett meddelande beroende p\u00e5 om det g\u00f6r det eller inte.</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/intro/v01/lektion%203/strings/#4-censur","title":"4. Censur","text":"<p>Skapa en array med f\u00f6rbjudna ord (t.ex. \"dum\", \"idiot\", \"korkad\"). L\u00e5t anv\u00e4ndaren skriva en mening och censurera de f\u00f6rbjudna orden genom att ers\u00e4tta dem med stj\u00e4rnor (t.ex. \"****\"). Skriv ut den censurerade meningen.</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/intro/v02/Extralektion/","title":"Extralektion","text":""},{"location":"lektioner/intro/v02/Extralektion/#dagens-innehall-grundlaggande-c","title":"Dagens inneh\u00e5ll - Grundl\u00e4ggande C","text":"<p>Extradag med repetition och grunder. Kom  helst bara om du verkligen beh\u00f6ver det, s\u00e5 g\u00f6r vi klassen lite mindre s\u00e5 att m\u00e5nga kan f\u00e5 hj\u00e4lp.</p> <ul> <li>Variabler, typer, inmatning, utskrift, if-satser, loopar</li> <li>Hur kan man f\u00f6rst\u00e5 spr\u00e5ket C#? </li> <li>Satser, utryck och operatorer.</li> </ul>"},{"location":"lektioner/intro/v02/Extralektion/#lankar","title":"L\u00e4nkar","text":""},{"location":"lektioner/intro/v02/lektion04/","title":"Lektion 04","text":""},{"location":"lektioner/intro/v02/lektion04/#innehall","title":"Inneh\u00e5ll","text":"<ul> <li>Veckans enk\u00e4t!</li> <li>Vad ska ni g\u00f6ra hemma?</li> <li>Ledningsgruppen stormar in!</li> <li>Introduktion till metoder (1h)</li> <li>\u00d6vningar p\u00e5 metoder (2h)</li> </ul>"},{"location":"lektioner/intro/v02/lektion04/#anteckningar","title":"Anteckningar","text":"<p>Vi pratade om string.Split, string.Contains och File.ReadAllLines, i kontexten av att l\u00e4sa in och tolka information fr\u00e5n fel fil. Vi n\u00e4mnde det kommaseparerade formatet CSV (Comma Separated Values) som \u00e4r vanligt f\u00f6r att spara tabelldata i textfiler.</p>"},{"location":"lektioner/intro/v02/lektion04/#relevanta-lankar","title":"Relevanta l\u00e4nkar","text":"<ul> <li>Metoder</li> </ul>"},{"location":"lektioner/intro/v02/lektion04/exercises04/","title":"\u00d6vning 04 Metoder","text":"<p>Relevant dokumentation: metoder.</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/intro/v02/lektion04/exercises04/#1-printhello","title":"1. PrintHello()","text":"<p>Skriv en enkel metod som skriver ut \"Hello, World!\" i konsolen. Anropa sedan metoden tre g\u00e5nger p\u00e5 raken fr\u00e5n din kod. Koden kan heta vad som helst, men tex kan den heta <code>PrintHello</code>.</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/intro/v02/lektion04/exercises04/#2-writemessage","title":"2. WriteMessage()","text":"<p>Skriv en metod som heter <code>WriteMessageTo</code> som:</p> <ul> <li>Tar en str\u00e4ng som parameter, den kan heta <code>name</code>.</li> <li>Skriver ut en str\u00e4ng i stil med <code>$\"Hej {name}, hur m\u00e5r du idag?\"</code> i konsolen.</li> </ul>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/intro/v02/lektion04/exercises04/#calculatetax","title":"CalculateTax()","text":"<p>Skriv en metod som heter <code>CalculateTax</code> som:</p> <ul> <li>Tar en decimal som parameter, den kan heta <code>amount</code>.</li> <li>Returnerar en decimal som \u00e4r 30% av <code>amount</code>.</li> <li>Skriv ett litet program som ber anv\u00e4ndaren skriva in sin inkomst, anropar <code>CalculateTax</code> med inkomsten och skriver ut siffran som metoder skickar tillbaka.</li> </ul>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/intro/v02/lektion04/exercises04/#1-writewarning","title":"1. WriteWarning()","text":"<p>G\u00f6r en metod som heter <code>WriteWarning</code> som:</p> <ul> <li>Tar en str\u00e4ng som parameter (den ska anv\u00e4ndas som meddelande).</li> <li>Skriver ut meddelandet i konsolen med vit text p\u00e5 r\u00f6d bakgrund.</li> <li>Nollst\u00e4ller f\u00e4rgerna i konsolen efter\u00e5t.</li> </ul> <p>G\u00f6r sedan ett program som f\u00f6rst skriver ut \"Detta \u00e4r ett vanligt meddelande\", sedan anropar <code>WriteWarning</code> med meddelandet \"Detta \u00e4r ett varningsmeddelande\" och slutligen skriver ut \"Detta \u00e4r ett annat vanligt meddelande\".</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/intro/v02/lektion04/exercises04/#1-parsningsmetod","title":"1. Parsningsmetod","text":"<p>Skriv en metod som heter <code>GetIntFromUser</code> som:</p> <ol> <li>Tar en str\u00e4ng som parameter (den ska anv\u00e4ndas som prompt n\u00e4r anv\u00e4ndaren ska mata in ett tal).</li> <li>Returnerar ett heltal som anv\u00e4ndaren matat in.</li> <li>(Sv\u00e5rare) Om anv\u00e4ndaren matar in n\u00e5got som inte \u00e4r ett heltal, ska metoden skriva ut ett felmeddelande och fr\u00e5ga igen tills anv\u00e4ndaren matar in ett giltigt heltal.</li> </ol>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/intro/v02/lektion04/exercises04/#2-getemailfromuser","title":"2. GetEmailFromUser","text":"<p>Skriv en metod som heter <code>GetEmailFromUser</code> som:</p> <ol> <li>Tar en str\u00e4ng som parameter (den ska anv\u00e4ndas som prompt n\u00e4r anv\u00e4ndaren ska mata in en e-postadress).</li> <li>Returnerar en str\u00e4ng som anv\u00e4ndaren matat in.</li> <li>(Sv\u00e5rare) Om anv\u00e4ndaren matar in n\u00e5got som inte \u00e4r en giltig e-postadress (dvs. den inneh\u00e5ller inte ett <code>@</code>-tecken), ska metoden skriva ut ett felmeddelande och fr\u00e5ga igen tills anv\u00e4ndaren matar in en giltig e-postadress.</li> </ol>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/intro/v02/lektion05/","title":"Lektion 05","text":""},{"location":"lektioner/intro/v02/lektion05/#innehall","title":"Inneh\u00e5ll","text":"<ul> <li>Vi tittar p\u00e5 n\u00e5gra \u00f6vningar fr\u00e5n f\u00f6rra veckan (1h)<ul> <li>Random #3</li> <li>\"Rena\" metoder och single responsibility principle (0.5h)</li> </ul> </li> <li>Reference &amp; Value types, metoder (1h)</li> <li>H\u00e4ng med Suvnet24 kl 11 (1h)</li> <li>List&lt;&gt; (0.5h)</li> <li>Refaktorering, livekod (0.5h)</li> <li>\u00d6vningar</li> </ul>"},{"location":"lektioner/intro/v02/lektion05/#relevanta-lankar","title":"Relevanta l\u00e4nkar","text":""},{"location":"lektioner/intro/v02/lektion05/exercises05/","title":"\u00d6vning 05 Metoder","text":"<p>Kika p\u00e5 dokumentationen om String och  File om du beh\u00f6ver hj\u00e4lp med str\u00e4ngar och filhantering.</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/intro/v02/lektion05/exercises05/#en-meny-i-flera-steg","title":"En meny i flera steg","text":"","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/intro/v02/lektion05/exercises05/#1-hoppa-over-tomma-rader","title":"1. Hoppa \u00f6ver tomma rader","text":"<p>Skriv kod som l\u00e4ser in denna textfil. Filen inneh\u00e5ller en lista med namn, men alla rader \u00e4r inte ifyllda. Skriv ut alla namn fr\u00e5n filen, men hoppa \u00f6ver tomma rader.</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/intro/v02/lektion05/exercises05/#2-meny","title":"2. Meny","text":"<p>Skriv ett program som visar denna meny: <pre><code>1. Visa dagens datum och tid\n2. Lista alla namn\n3. Avsluta\n\nVal: \n</code></pre> Anv\u00e4ndaren ska kunna skriva in 1, 2 eller 3. Detta ska h\u00e4nda i de olika fallen: </p> <ol> <li>Dagens datum och tid skrivs ut.<sup>1</sup> S\u00e4tt texten till bl\u00e5 text.</li> <li>Programmet utf\u00f6r samma sak som i \u00f6vning 1.</li> <li>Programmet avslutas.</li> </ol> <p>Om anv\u00e4ndaren skriver in n\u00e5got annat ska programmet skriva ut \"Felaktigt val\" och visa menyn igen. Efter varje val skall menyn visas igen, tills anv\u00e4ndaren v\u00e4ljer att avsluta.  </p> Beh\u00f6ver du lite hj\u00e4lp? H\u00e4r \u00e4r pseudokod f\u00f6r menyn! <pre><code>LOOPA o\u00e4ndligt\n    VISA menyn\n    L\u00c4S in anv\u00e4ndarens val\n    OM valet \u00e4r 1\n        VISA dagens datum och tid\n    ANNARS OM valet \u00e4r 2\n        LISTA alla namn (samma som i \u00f6vning 1)\n    ANNARS OM valet \u00e4r 3\n        AVBRYT loopen\n    ANNARS\n        VISA \"Felaktigt val\"\n</code></pre> Om du snabbt blir klar, kolla h\u00e4r! <p>Om du blir klar snabbt, fundera p\u00e5 hur du kan g\u00f6ra menyn s\u00e5 anv\u00e4ndarv\u00e4nlig och snygg som m\u00f6jligt. N\u00e5gra exempel:</p> <ul> <li>Hur kan du g\u00f6ra s\u00e5 att anv\u00e4ndaren inte beh\u00f6ver trycka enter efter att ha skrivit in sitt val?</li> <li>Hur kan du g\u00f6ra s\u00e5 att menyn alltid visas p\u00e5 samma st\u00e4lle i konsolf\u00f6nstret?</li> <li>Hur kan du g\u00f6ra s\u00e5 att menyn ser snyggare ut? Kanske med f\u00e4rger eller ramar?</li> <li>Hur kan du g\u00f6ra s\u00e5 att menyn fungerar \u00e4ven om anv\u00e4ndaren skriver in sm\u00e5 fel, t.ex. \"  1 \" eller \"2 \"?</li> </ul>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/intro/v02/lektion05/exercises05/#3-metodifiera-menyn","title":"3. Metodifiera menyn","text":"<p>Nu ska vi snygga till menyn genom att dela upp koden i metoder. M\u00e5let \u00e4r att koden ska bli mer l\u00e4sbar och varje metod ska ha ett tydligt ansvar.</p> <p>Du ska skriva f\u00f6ljande metoder:</p> <ol> <li> <p>PrintDateInBlue( )</p> <ul> <li>Tar inga parametrar och returnerar inget.</li> <li>Skriver ut dagens datum och tid (DateTime.Now).</li> <li>Texten ska visas i bl\u00e5 f\u00e4rg, och f\u00e4rgen ska \u00e5terst\u00e4llas efter\u00e5t.</li> </ul> </li> <li> <p>PrintLines(<code>string path</code>)</p> <ul> <li>Tar en fils\u00f6kv\u00e4g som parameter (<code>path</code>).</li> <li>L\u00e4ser in alla rader fr\u00e5n filen<sup>1</sup> och skriver ut varje rad i filen som inte \u00e4r tom.</li> </ul> </li> <li> <p><code>string</code>GetInput( )</p> <ul> <li>Tar inga parametrar men returnerar anv\u00e4ndarens menyval som en str\u00e4ng, s\u00e5 att det kan anv\u00e4ndas i Main-metodens if-satser.</li> <li>Om anv\u00e4ndaren skriver in en tom rad, ska programmet s\u00e4ga till att man m\u00e5ste skriva n\u00e5got och be om nytt input.</li> <li>Om anv\u00e4ndaren skriver \"3\", ska programmet avslutas med <code>Environment.Exit(0)</code>.</li> </ul> </li> </ol> <p>Anv\u00e4nd sedan dessa metoder i ditt program f\u00f6r att g\u00f6ra samma saker som innan:</p> <ul> <li>Om valet \u00e4r 1, skriv ut datum och tid i bl\u00e5tt.</li> <li>Om valet \u00e4r 2, skriv ut namnen fr\u00e5n filen.</li> <li>Om valet \u00e4r 3, avslutas programmet.</li> </ul> <p>Efter varje val ska menyn visas igen tills anv\u00e4ndaren v\u00e4ljer att avsluta.</p> <p>Se till s\u00e5 att metoderna blir \"rena\", dvs att de bara g\u00f6r en sak var. Om en metod ska l\u00e4sa in en fil, ska den inte ocks\u00e5 skriva ut n\u00e5got. Om en metod ska skriva ut en rad, ska den inte ocks\u00e5 l\u00e4sa in filen.</p> <p>N\u00e4r du \u00e4r klar med denna \u00f6vning har du gjotr vad som kallas f\u00f6r att \"refaktorera\" koden, allts\u00e5 att \u00e4ndra dess struktur utan att \u00e4ndra dess funktionalitet. Det \u00e4r en viktig del av programmering att kunna g\u00f6ra koden mer l\u00e4sbar och \u00e5teranv\u00e4ndbar genom att bryta ut delar i metoder.</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/intro/v02/lektion05/exercises05/#refaktoreringsovning","title":"Refaktorerings\u00f6vning","text":"<p>Vi forts\u00e4tter med refaktorering och metoder! Hur skulle du kunna f\u00f6rb\u00e4ttra denna kod med hj\u00e4lp av metoder? Den har n\u00e4mligen n\u00e5gra problem:</p> <ul> <li>Inga metoder: Allt sker sekventiellt. Detta g\u00f6r det sv\u00e5rt att ut\u00f6ka programmet eller \u00e5teranv\u00e4nda delar av koden.</li> <li>Kodrepetition: flera <code>Console.ForegroundColor = ConsoleColor.Red;</code> och <code>Console.WriteLine</code> f\u00f6r felmeddelanden.</li> <li>N\u00e4stlade kodblock i flera niv\u00e5er: if-satser i flera niv\u00e5er g\u00f6r att det blir sv\u00e5rt att l\u00e4sa.</li> </ul> <pre><code>class Program\n{\n    static void Main()\n    {\n        Console.WriteLine(\"Ange ditt anv\u00e4ndarnamn:\");\n        string username = Console.ReadLine();\n\n        if (!string.IsNullOrWhiteSpace(username))\n        {\n            Console.WriteLine(\"Ange ditt l\u00f6senord:\");\n            string password = Console.ReadLine();\n\n            if (!string.IsNullOrWhiteSpace(password))\n            {\n                if (username == \"admin\" &amp;&amp; password == \"1234\")\n                {\n                    Console.WriteLine(\"Inloggning lyckades!\");\n                }\n                else\n                {\n                    Console.ForegroundColor = ConsoleColor.Red;\n                    Console.WriteLine(\"Fel anv\u00e4ndarnamn eller l\u00f6senord.\");\n                    Console.ResetColor();\n                }\n            }\n            else\n            {\n                Console.ForegroundColor = ConsoleColor.Red;\n                Console.WriteLine(\"L\u00f6senord f\u00e5r inte vara tomt!\");\n                Console.ResetColor();\n            }\n        }\n        else\n        {\n            Console.ForegroundColor = ConsoleColor.Red;\n            Console.WriteLine(\"Anv\u00e4ndarnamn f\u00e5r inte vara tomt!\");\n            Console.ResetColor();\n        }\n    }\n}\n</code></pre> <ol> <li> <p>Du kan anv\u00e4nda <code>File.Exists(path)</code> f\u00f6r att kolla om filen finns innan du f\u00f6rs\u00f6ker l\u00e4sa in den, p\u00e5 s\u00e5 vis slipper du att ditt program kraschar om filen inte finns. L\u00e4s mer h\u00e4r.\u00a0\u21a9\u21a9</p> </li> </ol>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/intro/v02/lektion05/solutions05/","title":"Exempell\u00f6sningar","text":"L\u00f6sning 1. Hoppa \u00f6ver tomma rader <pre><code>string[] rader = File.ReadAllLines(\"input04.txt\");\n\nforeach (string rad in rader)\n{\n    // Kolla om raden inte \u00e4r tom eller bara whitespace\n    if (!string.IsNullOrWhiteSpace(rad))\n    {\n        Console.WriteLine(rad);\n    }\n}\n</code></pre> L\u00f6sning 2. Menyn <pre><code>while (true) // o\u00e4ndlig loop\n{\n    Console.WriteLine(\"1. Visa dagens datum och tid\");\n    Console.WriteLine(\"2. Lista alla namn\");\n    Console.WriteLine(\"3. Avsluta\\n\");// \\n \u00e4r radbrytning, ist\u00e4llet f\u00f6r en extra Console.WriteLine()\n    Console.Write(\"Val: \"); \n\n    string input = Console.ReadLine();\n\n    if (input == \"1\")\n    {\n        Console.WriteLine(DateTime.Now);\n    }\n    else if (input == \"2\")\n    {\n        var people = File.ReadAllLines(\"input04.txt\");\n\n        foreach (var name in people)\n        {\n            if (string.IsNullOrWhiteSpace(name)) continue;\n            Console.WriteLine(name);\n        }\n    }\n    else if (input == \"3\")\n    {\n        break; // avsluta loopen s\u00e5 slutar progammet (varf\u00f6r blir det s\u00e5?)\n    }\n    else\n    {\n        Console.WriteLine(\"Felaktigt val\");\n    }\n\n    Console.WriteLine(); // extra rad s\u00e5 det blir lite luftigare\n}\n</code></pre> L\u00f6sning 3. Metoder i menyn <pre><code>while (true) \n{\n    Console.WriteLine(\"1. Visa dagens datum och tid\");\n    Console.WriteLine(\"2. Lista alla namn\");\n    Console.WriteLine(\"3. Avsluta\\n\");// \\n \u00e4r radbrytning, ist\u00e4llet f\u00f6r en extra Console.WriteLine()\n    Console.Write(\"Val: \");\n\n    string input = GetInput();\n\n    if (input == \"1\")\n    {\n        PrintDateInBlue();\n    }\n    else if (input == \"2\")\n    {\n        PrintNames(\"input04.txt\");\n    }\n\n    Console.WriteLine();\n}\n\nvoid PrintDateInBlue()\n{\n    Console.ForegroundColor = ConsoleColor.Blue;\n    Console.WriteLine(DateTime.Now);\n    Console.ResetColor();\n}\n\nvoid PrintNames(string path)\n{\n    var people = File.ReadAllLines(path);\n\n    foreach (var name in people)\n    {\n        if (string.IsNullOrWhiteSpace(name)) continue;\n        Console.WriteLine(name);\n    }\n}\n\nstring GetInput()\n{\n    while (true)\n    {\n        string input = Console.ReadLine();\n\n        if (!string.IsNullOrWhiteSpace(input))\n        {\n            if (input == \"3\")\n            {\n                Environment.Exit(0);\n            }\n            return input;\n        }\n\n        Console.WriteLine(\"Du m\u00e5ste skriva n\u00e5got!\");\n    }\n}\n</code></pre> L\u00f6sning 4. Inloggning <pre><code>class Program\n{\n    static void Main()\n    {\n        string username = GetString(\"Ange ditt anv\u00e4ndarnamn:\");\n        string password = GetString(\"Ange ditt l\u00f6senord:\");\n\n        if (IsLoginValid(username, password))\n        {\n            Console.WriteLine(\"Inloggning lyckades!\");\n        }\n        else\n        {\n            ShowError(\"Fel anv\u00e4ndarnamn eller l\u00f6senord.\");\n        }\n    }\n\n    static string GetString(string prompt)\n    {\n        while (true)\n        {\n            Console.WriteLine(prompt);\n            string input = Console.ReadLine();\n\n            if (!string.IsNullOrWhiteSpace(input))\n            {\n                return input;\n            }\n\n            ShowError(\"Du m\u00e5ste skriva n\u00e5got!\");\n        }\n    }\n\n    static void ShowError(string message)\n    {\n        Console.ForegroundColor = ConsoleColor.Red;\n        Console.WriteLine($\"[FEL] {message}\");\n        Console.ResetColor();\n    }\n\n    static bool IsLoginValid(string username, string password)\n    {\n        return username == \"admin\" &amp;&amp; password == \"1234\";\n    }\n}\n</code></pre>"},{"location":"lektioner/intro/v02/lektion06/","title":"Lektion 06","text":""},{"location":"lektioner/intro/v02/lektion06/#innehall","title":"Inneh\u00e5ll","text":"<ul> <li>Parprogrammering, vad \u00e4r det?</li> <li>Vi g\u00e5r igenom den f\u00f6rsta labben tillsammans!</li> <li>Jobba med labben hela dagen!</li> </ul>"},{"location":"lektioner/oop/v03/lektion07/","title":"Lektion 07 - OOP Grunder","text":"<p>Moment: <code>OOP som begrepp</code>, <code>Klasser och objekt</code>, <code>Keywordet new</code></p>"},{"location":"lektioner/oop/v03/lektion07/#innehall","title":"Inneh\u00e5ll","text":"<ul> <li>Veckans enk\u00e4t!</li> <li>Introduktion till OOP, klasser och objekt (1h)</li> <li>Livekodning Todo - Klasser, objekt, f\u00e4lt </li> <li>\u00d6vning 07 Adressboken (Resten av dagen)</li> </ul>"},{"location":"lektioner/oop/v03/lektion07/#quiz","title":"Quiz","text":"<p>Klasser</p>"},{"location":"lektioner/oop/v03/lektion07/#relevanta-lankar","title":"Relevanta l\u00e4nkar","text":"<ul> <li>Material: OOP intro</li> <li>Material: Klasser och objekt</li> <li>C#-skolan</li> <li>Microsoft OOP</li> </ul>"},{"location":"lektioner/oop/v03/lektion07/exercises07_1/","title":"\u00d6vning 07 F\u00f6rbered","text":"<p>Detta \u00e4r en f\u00f6rberedande \u00f6vning inf\u00f6r att vi b\u00f6rjar med objektorienterad programmering. G\u00f6r s\u00e5 mycket du kan och har tid f\u00f6r med denan \u00f6vning. Om du inte hinner klart eller det k\u00e4nns sv\u00e5rt s\u00e5 \u00e4r ett alternativ att du noggrant studerar exempell\u00f6sningen, och f\u00f6rs\u00f6ker f\u00f6rst\u00e5 hur den koden fungerar. Forts\u00e4ttnings\u00f6vningen kommer att utg\u00e5 fr\u00e5n denna uppgift f\u00f6r att visa p\u00e5 f\u00f6rdelarna med OOP, s\u00e5 det blir l\u00e4ttare att h\u00e4nga med om du har gjort denna \u00f6vning, eller satt dig in i exempell\u00f6sningen.</p> <p>M\u00e5l: Skapa ett konsolprogram som l\u00e5ter anv\u00e4ndaren hantera en adressbok. Programmet ska fungera ungef\u00e4r s\u00e5 h\u00e4r:</p> <pre><code>ADRESSBOK v1\n------------\n1) L\u00e4gg till kontakt\n2) Lista kontakter\n4) Avsluta\n\nVal: 2\nKontakter:\n1. Anna Svensson - 0701234567\n2. Kalle Karlsson - 0739876543\n</code></pre>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion07/exercises07_1/#krav","title":"Krav","text":"<ol> <li> <p>Meny  Programmet ska visa en meny med fyra val:</p> <ul> <li>L\u00e4gg till kontakt</li> <li>Lista kontakter</li> <li>S\u00f6k kontakt</li> <li>Avsluta programmet</li> </ul> </li> <li> <p>L\u00e4gg till kontakt  Anv\u00e4ndaren ska kunna skriva in namn och telefonnummer. Dessa ska sparas i tv\u00e5 listor:</p> <ul> <li>List&lt;string&gt; f\u00f6r namn</li> <li>List&lt;string&gt; f\u00f6r telefonnummer</li> </ul> </li> <li> <p>Lista kontakter Programmet ska skriva ut alla kontakter med nummer, namn och telefonnummer.</p> </li> <li> <p>Avsluta Om anv\u00e4ndaren v\u00e4ljer avsluta ska programmet avslutas.</p> </li> </ol>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion07/exercises07_1/#tekniska-krav","title":"Tekniska krav","text":"<p>Anv\u00e4nd tv\u00e5 listor: en f\u00f6r namn och en f\u00f6r telefonnummer.</p> <p>Dela upp programmet i metoder:</p> <ul> <li>AddContact</li> <li>ListContacts</li> <li>SearchContact</li> </ul> <p>Anv\u00e4nd while (true)-loop f\u00f6r att visa menyn tills anv\u00e4ndaren v\u00e4ljer att avsluta.</p> <p>Anv\u00e4nd if eller else if f\u00f6r att hantera menyval.</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion07/exercises07_1/#extra-utmaningar-frivilligt","title":"Extra utmaningar (frivilligt)","text":"<ul> <li>L\u00e5t anv\u00e4ndaren kunna ta bort en kontakt.</li> <li>L\u00e5t anv\u00e4ndaren kunna uppdatera ett telefonnummer.</li> <li>Spara alla kontakter i en fil s\u00e5 att de finns kvar n\u00e4r man startar om programmet.</li> <li>L\u00e4gg till en s\u00f6kfunktion som l\u00e5ter anv\u00e4ndaren s\u00f6ka efter en kontakt baserat p\u00e5 namn eller telefonnummer.</li> </ul>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion07/exercises07_2/","title":"\u00d6vning 07 Adressboken","text":"","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion07/exercises07_2/#larandemal","title":"L\u00e4randem\u00e5l","text":"<ul> <li>F\u00f6rst\u00e5 varf\u00f6r klasser \u00e4r anv\u00e4ndbara (samlar data + beteende).</li> <li>F\u00f6rst\u00e5 hur en enkelt klass skapas (Contact).</li> <li>F\u00f6rst\u00e5 hur objekt skapas fr\u00e5n en klass med keywordet <code>new</code>.</li> <li>Testa att refaktorera kod.</li> </ul>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion07/exercises07_2/#steg-1","title":"Steg 1","text":"","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion07/exercises07_2/#klass-objekt-och-falt","title":"Klass, objekt och f\u00e4lt","text":"<p>Denna uppgift utg\u00e5r fr\u00e5n koden f\u00f6r \u00d6vning 07 F\u00f6rbered.</p> <p>T\u00e4nk igenom varf\u00f6r det \u00e4r problematiskt att, som i den f\u00f6rberedande \u00f6vningen, lagra namn och telefonnummer i tv\u00e5 separata listor. Hur blir det om vi l\u00e4gger till en massa andra f\u00e4lt, s\u00e5 som adress, e-post, f\u00f6delsedag osv? </p> <p>F\u00f6rs\u00f6k att se att alla dessa f\u00e4lt h\u00f6r ihop, som en sak, en kontakt.</p> <ol> <li> <p>Skapa en klass som heter <code>Contact</code>. Till en b\u00f6rjan kan den inenh\u00e5lla tv\u00e5 publika f\u00e4lt:</p> <ul> <li><code>public string name;</code></li> <li><code>public string phone;</code></li> </ul> </li> <li> <p>Skapa en lista som ska h\u00e5lla objekt av typen <code>Contact</code>:     <pre><code>List&lt;Contact&gt; contacts = new List&lt;Contact&gt;();\n</code></pre></p> </li> </ol> <p>Fundering</p> <p>**Fundering: ** Var b\u00f6r denna lista ligga i v\u00e5r kod? Inne i <code>Main</code>-metoden, eller som ett f\u00e4lt i <code>Program</code>-klassen? (Tips: t\u00e4nk p\u00e5 att vi vill kunna anv\u00e4nda den i flera olika metoder.)</p> <ol> <li>Refaktorera koden fr\u00e5n den f\u00f6rberedande \u00f6vningen s\u00e5 att den anv\u00e4nder <code>Contact</code>-klassen och <code>List&lt;Contact&gt;</code> ist\u00e4llet f\u00f6r de andra tv\u00e5 listorna. </li> <li>Under AddContext()-metoden, d\u00e4r anv\u00e4ndaren matar in information skall ett nytt <code>Contact</code>-objekt skapas och l\u00e4ggas in i listan. Allts\u00e5 ist\u00e4llet f\u00f6r att ett namn och ett nummer l\u00e4ggs in i sina separata listor.</li> <li>N\u00e4r alla kontakter skrivs ut, skall informationen h\u00e4mtas fr\u00e5n <code>Contact</code>-objekten i listan. Du ska med andra ord helt ta bort de tv\u00e5 ursprungliga listorna <code>names</code> och <code>phones</code>, och bara anv\u00e4nda den nya listan samt skapa ett nytt objekt varje g\u00e5ng en kontakt l\u00e4ggs till. </li> </ol> <p>Det kan ta ett tag att komma in i tankes\u00e4ttet med klasser och att skapa nya objekt.</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion07/quiz_classes/","title":"Quiz klasser","text":"<p>H\u00e4r kommer n\u00e5gra fr\u00e5gor p\u00e5 temat OOP-grunder och Adressbok-\u00f6vningen</p> <p>1) Vad definierar en <code>klass</code> i OOP?</p>  En specifik instans i minnet  Var ett program startar  En mall som beskriver data (f\u00e4lt) och beteenden (metoder)  Enbart en samling variabler utan beteende  Ett objekts faktiska v\u00e4rden <p></p> <p>2) Vilka av f\u00f6ljande \u00e4r grundprinciper i OOP?</p>  Abstraktion  Deklaration  Ansvarsomr\u00e5den  Inkapsling  Arv  Polymorfism <p></p> <p>3) Vad kallas det n\u00e4r vi skapar ett objekt fr\u00e5n en klass?</p>  Abstrahera  Instansiera  Deklarera  Kalla p\u00e5 <p></p> <p>4) Varf\u00f6r \u00e4r det problematiskt med tv\u00e5 separata listor <code>names</code> och <code>phones</code>?</p>  Sv\u00e5rt att ut\u00f6ka med fler f\u00e4lt (adress, e-post) utan mer spridd kod  Det g\u00e5r inte att skriva ut v\u00e4rden fr\u00e5n tv\u00e5 listor  Listorna kan inte inneh\u00e5lla str\u00e4ngar, nummer osv  Risk att indexen hamnar ur synk och kopplingen mellan namn/telefon tappas <p></p> <p>5) Vilket keyword anv\u00e4nds f\u00f6r att skapa (instansiera) ett nytt objekt?</p> <pre><code>Keyword: </code></pre> <p></p> <p>6) Fyll i uttrycket f\u00f6r att skapa ett nytt <code>Contact</code>-objekt.</p> <pre><code>var c = ;</code></pre> <p></p> <p>7) Var \u00e4r det mest praktiskt att l\u00e4gga <code>List&lt;Contact&gt; contacts</code> enligt \u00f6vningen?</p>  Inuti en lokal metod som bara k\u00f6rs ibland  Som f\u00e4lt i klassen (t.ex. <code>Program</code>) s\u00e5 flera metoder kan n\u00e5 den  I en tillf\u00e4llig variabel som tas bort direkt <p></p> <p>8) Vad \u00e4r rimligt att <code>Contact</code> inneh\u00e5ller i denna f\u00f6rsta version?</p>  Publika f\u00e4lt: <code>name</code> och <code>phone</code> (enkel start)  Kan senare ut\u00f6kas med fler f\u00e4lt (adress, e-post, f\u00f6delsedag)  Vilka f\u00e4rger som ska anv\u00e4ndas i consolen  Hur en int tolkas fr\u00e5n en str\u00e4ng till en siffra <p></p> <p>9) Skriv koden som l\u00e4gger till objektet <code>c</code> i listan <code>contacts</code>.</p> <pre><code>// Anta att 'c' \u00e4r ett Contact-objekt och 'contacts' \u00e4r List&lt;Contact&gt;\n</code></pre> <p></p> <p>R\u00e4tta alla</p> <p></p>","tags":["OOP1-quiz"]},{"location":"lektioner/oop/v03/lektion07/solutions07/","title":"Exempell\u00f6sningar","text":"F\u00f6rberedande \u00f6vning <pre><code>    class Program\n    {\n        private static void Main()\n        {\n            // Det h\u00e4r \u00e4r ett program som ska fungera som en adressbok. Till en b\u00f6rjan ska vi bara lagra folks namn och telefonnummer.\n            // Vi beh\u00f6ver tv\u00e5 listor f\u00f6r att kunna lagra namnen och telefonnumren. Listor f\u00f6r att vi enkelt ska kunna l\u00e4gga till nya kontakter.\n\n            List&lt;string&gt; names = [];\n            List&lt;string&gt; phones = [];\n\n            while (true)\n            {\n                Console.WriteLine(\"ADRESSBOK v1\");\n                Console.WriteLine(\"------------\");\n                Console.WriteLine(\"1) L\u00e4gg till kontakt\");\n                Console.WriteLine(\"2) Lista kontakter\");\n                Console.WriteLine(\"3) S\u00f6k kontakt\");\n                Console.WriteLine(\"4) Avsluta\\n\");\n                Console.Write(\"Val: \");\n                var input = Console.ReadLine();\n\n                if (input == \"1\")\n                {\n                    AddContact(names, phones);\n                }\n                else if (input == \"2\")\n                {\n                    ListContacts(names, phones);\n                }\n                else if (input == \"3\")\n                {\n                    SearchContact(names, phones);\n                }\n                else if (input == \"4\")\n                {\n                    break;\n                }\n                else\n                {\n                    Console.WriteLine(\"Fel input, f\u00f6rs\u00f6k igen.\");\n                }\n\n                Console.WriteLine(); // tom rad mellan looparna\n            }\n        }\n\n        private static void AddContact(List&lt;string&gt; names, List&lt;string&gt; phones)\n        {\n            Console.Write(\"Namn: \");\n            var name = Console.ReadLine();\n            Console.Write(\"Telefonnummer: \");\n            var phone = Console.ReadLine();\n\n            names.Add(name);\n            phones.Add(phone);\n\n            Console.WriteLine(\"Kontakten lades till.\");\n        }\n\n        private static void ListContacts(List&lt;string&gt; names, List&lt;string&gt; phones)\n        {\n            Console.WriteLine(\"Kontakter:\");\n            for (int i = 0; i &lt; names.Count; i++)\n            {\n                Console.WriteLine($\"{i + 1}. {names[i]} - {phones[i]}\");\n            }\n\n            if (names.Count == 0)\n            {\n                Console.WriteLine(\"(Inga kontakter \u00e4n)\");\n            }\n        }\n\n        private static void SearchContact(List&lt;string&gt; names, List&lt;string&gt; phones)\n        {\n            Console.Write(\"S\u00f6k namn: \");\n            var search = Console.ReadLine();\n\n            bool found = false;\n            for (int i = 0; i &lt; names.Count; i++)\n            {\n                if (!string.IsNullOrEmpty(search) &amp;&amp;\n                    names[i].ToLower().Contains(search.ToLower()))\n                {\n                    Console.WriteLine($\"{i + 1}. {names[i]} - {phones[i]}\");\n                    found = true;\n                }\n            }\n\n            if (!found)\n            {\n                Console.WriteLine(\"Ingen kontakt hittades.\");\n            }\n        }\n    }\n</code></pre>"},{"location":"lektioner/oop/v03/lektion07/slides/01-slide/","title":"Slide 1","text":""},{"location":"lektioner/oop/v03/lektion07/slides/01-slide/#vad-ar-objektorienterad-programmering","title":"Vad \u00e4r objektorienterad Programmering?","text":""},{"location":"lektioner/oop/v03/lektion07/slides/01-slide/#ett-satt-att-forsta-sig-pa-problem","title":"Ett s\u00e4tt att f\u00f6rst\u00e5 sig p\u00e5 problem","text":"<ul> <li>Verkliga koncept modelleras som objekt i koden.</li> <li>Relationer och interaktioner mellan objekt speglar verkliga relationer och interaktioner.</li> </ul>"},{"location":"lektioner/oop/v03/lektion07/slides/01-slide/#ett-satt-att-strukturera-kod","title":"Ett s\u00e4tt att strukturera kod","text":"<ul> <li>Kombinera data och funktioner i samma enhet \u2013 objekt.</li> <li>Ett objekt kan representera en sak i verkligheten, men \u00e4ven n\u00e5got mer abstrakt s\u00e5som en banktransaktion, en h\u00e4ndelse eller ett objekt som kan producera slumpade tal.</li> <li>Objekt skapas fr\u00e5n mallar som kallas klasser.</li> </ul> Exempel<pre><code>Klassen bil definierar vad en bil \u00e4r och kan g\u00f6ra:\n\n* Har en viss f\u00e4rg\n* Har en viss modell\n* Kan k\u00f6ra\n* Kan stanna\n</code></pre>"},{"location":"lektioner/oop/v03/lektion07/slides/02-slide/","title":"Slide 2","text":""},{"location":"lektioner/oop/v03/lektion07/slides/02-slide/#varfor-anvands-objektorienterad-programmering","title":"Varf\u00f6r anv\u00e4nds Objektorienterad Programmering?","text":"<ul> <li>Ge komplexitet en struktur och l\u00e4sbarhet</li> <li>Ett s\u00e4tt att t\u00e4nka kring kod - h\u00e5ller ihop data och beteende</li> <li>R\u00e4tt anv\u00e4nt g\u00f6r det koden mer flexibel och l\u00e4ttare att underh\u00e5lla</li> </ul>"},{"location":"lektioner/oop/v03/lektion07/slides/03-slide/","title":"Slide 3","text":""},{"location":"lektioner/oop/v03/lektion07/slides/03-slide/#hur-anvands-objektorienterad-programmering","title":"Hur anv\u00e4nds Objektorienterad Programmering?","text":"<ul> <li>Vi identifierar \"saker\" i v\u00e5r applikation som kan representeras som objekt.</li> <li>Ofta utifr\u00e5n en viss \"dom\u00e4n\" eller ett visst problem.</li> <li>Vi skapar klasser som beskriver dessa objekt.</li> <li>Vi skapar objekt fr\u00e5n dessa klasser. Detta kallas att instansiera en klass.</li> <li>Vi anv\u00e4nder objektens data och beteende f\u00f6r att l\u00f6sa v\u00e5rt problem.</li> </ul>"},{"location":"lektioner/oop/v03/lektion07/slides/04-slide/","title":"Slide 4","text":""},{"location":"lektioner/oop/v03/lektion07/slides/04-slide/#grundprinciper-inom-oop","title":"Grundprinciper inom OOP","text":"<ul> <li>Abstraktion (Abstraction) - Abstrahera f\u00f6r att bara fokusera p\u00e5 det v\u00e4sentliga</li> <li>Inkapsling (Encapsulation) - D\u00f6lj interna detaljer och exponera endast det som \u00e4r n\u00f6dv\u00e4ndigt</li> <li>Arv (Inheritance) - Klasser kan \u00e4rva egenskaper och beteenden fr\u00e5n andra klasser</li> <li>Polymorfism (Polymorphism) - Att objekt kan ta m\u00e5nga former, t.ex. genom metoder som kan anv\u00e4ndas p\u00e5 olika s\u00e4tt beroende p\u00e5 objektets typ</li> </ul> <p>Alla dessa principer hj\u00e4lper till att skapa kod som \u00e4r mer organiserad, l\u00e4ttare att f\u00f6rst\u00e5 och underh\u00e5lla. De \u00e4r allts\u00e5 grundl\u00e4ggande s\u00e4tt att t\u00e4nka n\u00e4r det g\u00e4ller organisering av kod i objektorienterad programmering.</p> <p>Dessa principer realiseras sedan i kod genom anv\u00e4ndning av koncept s\u00e5som <code>klasser</code>, <code>objekt</code>, <code>f\u00e4lt</code>, <code>metoder</code>, <code>accessmodifierare</code>, <code>properties</code>, <code>konstruktorer</code>, <code>arv</code> och <code>gr\u00e4nssnitt</code>. Saker vi kommer att g\u00e5 igenom i detalj under de kommande lektionerna.</p>"},{"location":"lektioner/oop/v03/lektion08/","title":"Lektion 08 - OOP Grunder","text":"<p>Moment: <code>Inkapsling</code>, <code>accessmodifierare</code>, <code>Abstraktion</code></p>"},{"location":"lektioner/oop/v03/lektion08/#innehall","title":"Inneh\u00e5ll","text":"<ul> <li>OOP Systemdesign och modellering (1h)<ul> <li>Attribut och relationer - att b\u00f6rja kategorisera saker</li> <li>Exempel: Klassrummet</li> <li>Exempel: Hockeymatch</li> </ul> </li> <li>\u00d6vning: OOP-design del 1(1h)</li> <li>\u00d6vning: OOP-design del 2(1h)</li> <li>Inkapsling: get/set-metoder och accessmodifierare (3h)</li> </ul>"},{"location":"lektioner/oop/v03/lektion08/#quiz","title":"Quiz","text":"<ul> <li>OOP Design </li> <li>Inkapsling</li> </ul>"},{"location":"lektioner/oop/v03/lektion08/#lankar","title":"L\u00e4nkar","text":"<ul> <li>Material: Inkapsling</li> </ul>"},{"location":"lektioner/oop/v03/lektion08/exercises08_01/","title":"\u00d6vning 08 OOP Design","text":"<p>F\u00f6r att kunna bygga ett system med en objektorienterad approach beh\u00f6ver vi kunna identifiera de olika delarna av systemet och hur de h\u00e4nger ihop.</p> <ul> <li>Identifiera objekt i systemet<ul> <li>Vilka \"saker\" finns i systemet? Om du provar att beskriva i text vad systemet ska kunna g\u00f6ra, och sedan leta efter vilka substantiv som finns i texten, s\u00e5 \u00e4r det ofta ett bra s\u00e4tt att hitta potentiella objekt.</li> </ul> </li> <li>Identifiera relationer och ansvar mellan objekten<ul> <li>Vilka objekt har en relation till vilka andra objekt? P\u00e5 vilket s\u00e4tt relaterar de? Vilka objekt kan existera sj\u00e4lva, och vilka kr\u00e4ver att andra objekt redan finns f\u00f6r att de ska kunna existera?</li> </ul> </li> <li>Identifiera attribut och metoder f\u00f6r objekten<ul> <li>Vilka egenskaper kan objekten t\u00e4nkas ha? F\u00e4rger, positioner, storlekar, namn, antal av olika saker osv.</li> <li>Vad beh\u00f6ver objekten kunna g\u00f6ra? Vilka metoder kan de t\u00e4nkas ha? Vilka objekt \"g\u00f6r\" saker och vilka objekt \u00e4r mer passiva?</li> </ul> </li> </ul>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion08/exercises08_01/#uppgift-1-fysiskt-system","title":"Uppgift 1 - Fysiskt system","text":"<p>T\u00e4nk dig att vi ska skapa ett digitalt spel baserat p\u00e5 det riktiga spelet Fia med Knuff. Vad f\u00f6r faktiska saker finns med i det spelet? Vad \u00e4r relevant f\u00f6r spelet i sig, och vad \u00e4r inte relevant? F\u00f6rs\u00f6k hitta en gr\u00e4nsdragning mellan vad som \u00e4r med i spelet och vad som inte \u00e4r det.</p> Vad \u00e4r Fia med Knuff?","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion08/exercises08_01/#fia-med-knuff-spelregler-i-korthet","title":"Fia med knuff \u2013 spelregler i korthet","text":"<p>Fia med knuff \u00e4r ett br\u00e4dspel f\u00f6r 2\u20134 spelare.  </p> <ul> <li>Varje spelare har fyra pj\u00e4ser i sitt bo.  </li> <li>M\u00e5let \u00e4r att med hj\u00e4lp av t\u00e4rningskast flytta sina pj\u00e4ser:  </li> <li>Ut fr\u00e5n boet  </li> <li>Ett varv medsols runt spelplanen  </li> <li>In i mitten  </li> </ul> <p>Den som f\u00f6rst f\u00e5r in alla sina pj\u00e4ser i mitten vinner spelet.</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion08/exercises08_01/#regler","title":"Regler","text":"<ul> <li>F\u00f6r att l\u00e4mna boet kr\u00e4vs en sexa (ibland \u00e4ven en etta).  </li> <li>Man f\u00e5r bara flytta en pj\u00e4s per t\u00e4rningskast.  </li> <li>Det \u00e4r till\u00e5tet att ha flera pj\u00e4ser ute p\u00e5 spelplanen.  </li> <li>Pj\u00e4sernas f\u00e4rger \u00e4r r\u00f6d, bl\u00e5, gul och gr\u00f6n.  </li> </ul>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion08/exercises08_01/#knuffa-motstandaren","title":"\u201cKnuffa\u201d motst\u00e5ndaren","text":"<ul> <li>Om du hamnar p\u00e5 samma ruta som en motspelare, knuffas motst\u00e5ndarens pj\u00e4s tillbaka till sitt bo.  </li> <li>Rutor som leder in i mitten \u00e4r s\u00e4ker mark \u2013 d\u00e4r kan man inte bli utknuffad.</li> </ul>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion08/exercises08_01/#1-identifiera-objekt","title":"1. Identifiera objekt","text":"<ul> <li>Fundera \u00f6ver vilka delar i Fia med Knuff som kan bli objekt i v\u00e5r digitala version av spelet.</li> <li>Skriv ner minst fem olika objekt som du tror beh\u00f6vs f\u00f6r att vi ska kunna simulera spelet.</li> </ul>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion08/exercises08_01/#2-relationer-och-ansvar","title":"2. Relationer och ansvar","text":"<p>F\u00f6r varje objekt ni hittar, svara p\u00e5:</p> <ul> <li>Vilka andra objekt har det h\u00e4r objektet en relation till? P\u00e5 vilket s\u00e4tt relaterar de? </li> <li>Vilket ansvar har objektet? (Vad beh\u00f6ver det \"veta\" eller kunna g\u00f6ra?)</li> </ul>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion08/exercises08_01/#3-egenskaper","title":"3. Egenskaper","text":"<p>F\u00f6rs\u00f6k nu att identifiera n\u00e5gra egenskaper som dessa objekt kan t\u00e4nkas ha. F\u00e4rger, positioner, storlekar, namn, antal av olika saker osv.</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion08/exercises08_01/#4-metoder","title":"4. Metoder","text":"<p>H\u00e4r kommer tidigare ansvarsomr\u00e5den in i bilden. Vad beh\u00f6ver objekten kunna g\u00f6ra? Vilka metoder kan de t\u00e4nkas ha? Vilka objekt \"g\u00f6r\" saker och vilka objekt \u00e4r mer passiva?</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion08/exercises08_01/#5-sammanstallning","title":"5. Sammanst\u00e4llning","text":"<p>Rita ett enkelt \"klassdiagram\" \u00f6ver de objekt ni identifierat. Papper och penna r\u00e4cker gott, men digitalt funkar ocks\u00e5.</p> <ul> <li>Rita l\u00e5dor med objekten. Namnet h\u00f6gst upp och inne i l\u00e5dan n\u00e5gra av de viktigaste egenskaperna i den \u00f6vre halvan och n\u00e5gra av de viktigaste metoderna i den nedre halvan.</li> <li>Rita pilar mellan objekten f\u00f6r att visa relationer. Skriv g\u00e4rna en kort beskrivning av relationen vid pilen.</li> </ul> <p>Titta p\u00e5 sammanst\u00e4llningen och st\u00e4ll er fr\u00e5gan: Har vi f\u00e5tt med alla viktiga objekt? Har vi missat n\u00e5got objekt som kanske inte \u00e4r s\u00e5 sj\u00e4lvklart? \u00c4r det n\u00e5gra objekt som \u00e4r on\u00f6diga? Har vi f\u00e5tt med de viktigaste egenskaperna och metoderna?</p> <p>Vill du se ett exempel p\u00e5 hur klassdiagram kan se ut? Kolla in denna sida om UML.</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion08/exercises08_01/#uppgift-2-digitalt-system","title":"Uppgift 2 - Digitalt system","text":"<p>Nu ska vi titta p\u00e5 ett digital system utan en direkt fysisk motsvarighet. Det kan vara lite sv\u00e5rare att identifiera objekt i ett s\u00e5dant, eftersom det inte alltid finns en motsvarighet i verkligeheten f\u00f6r allt vi beh\u00f6ver i ett s\u00e5nt system.</p> <p>H\u00e4r \u00e4r ett f\u00f6rslag p\u00e5 olika digitala system. V\u00e4lj ett av dem, eller hitta p\u00e5 ett eget. Anv\u00e4nd sedan samma process som i uppgift 1 f\u00f6r att identifiera objekt, relationer, egenskaper och metoder.</p> En app f\u00f6r att skapa och dela recept <p>T\u00e4nk dig en app d\u00e4r anv\u00e4ndare kan skriva in sina egna recept.  </p> <ul> <li>Det ska g\u00e5 att l\u00e4gga till ingredienser till recepten, och hur mycket av de olika sakerna. </li> <li>Det ska g\u00e5 att skriva en instruktion f\u00f6r hur receptet tillagas. </li> <li>Recepten kan delas med andra anv\u00e4ndare, som i sin tur kan l\u00e4mna kommentarer eller s\u00e4tta ett betyg. </li> <li>Kanske kan det g\u00e5 att skapa en ink\u00f6pslista baserat p\u00e5 ett recept ocks\u00e5? </li> <li>Kanske g\u00e5r det att skriva in kostnader f\u00f6r recepten och f\u00e5 en uppskattning av hur mycket det kostar att laga dem beroende p\u00e5 antalet portioner?</li> </ul> Ett kassasystem i en butik <p>I en butik anv\u00e4nder personalen ett kassasystem f\u00f6r att registrera varor som en kund k\u00f6per.</p> <ul> <li>Varje vara har ett pris och en produktkod.  </li> <li>Kunden g\u00f6r en best\u00e4llning, systemet ber\u00e4knar en totalsumma och betalningen sker med ett betalmedel, till exempel kort, kontanter eller swish.  </li> <li>Ett kvitto skrivs ut i slutet.</li> </ul> Ett bibliotekssystem <p>I ett bibliotek finns m\u00e5nga b\u00f6cker som kan l\u00e5nas ut till en l\u00e5ntagare. F\u00f6r att l\u00e5na beh\u00f6vs </p> <ul> <li>ett l\u00e5nekort</li> <li>varje l\u00e5n registreras med datum f\u00f6r utl\u00e5n och datum f\u00f6r \u00e5terl\u00e4mning.  </li> </ul> <p>En bibliotekarie ansvarar f\u00f6r att registrera l\u00e5n och \u00e5terl\u00e4mning. Systemet kan ocks\u00e5 h\u00e5lla reda p\u00e5 om en bok \u00e4r ledig eller utl\u00e5nad.</p> Ett system f\u00f6r att hantera anst\u00e4llda <ul> <li>Ett f\u00f6retag har m\u00e5nga anst\u00e4llda</li> <li>Varje anst\u00e4lld har ett namn, en anst\u00e4llningsform, en l\u00f6n och ett anst\u00e4llningsdatum.  </li> </ul> <p>Systemet kan ocks\u00e5 lagra information om </p> <ul> <li>avdelningar</li> <li>projekt som de jobbar i</li> <li>vem som \u00e4r deras chef.  </li> </ul> <p>N\u00e4r n\u00e5gon slutar beh\u00f6ver systemet uppdateras.</p> Ett system f\u00f6r n\u00e4rvaro, ledighet och sjukfr\u00e5nvaro <p>I en kommunorganisation beh\u00f6ver man h\u00e5lla koll p\u00e5 n\u00e4rvaro och fr\u00e5nvaro.  </p> <ul> <li>Varje person har ett schema med dagar och tider.  </li> <li>I systemet kan man markera n\u00e4rvarande, sjukfr\u00e5nvaro eller semester.</li> <li>Fr\u00e5nvara kan ha olika orsaker, t.ex. sjukdom, semester, f\u00f6r\u00e4ldraledighet eller annan ledighet.</li> <li>Det kan l\u00e4ggas in anteckningar f\u00f6r varje dag.</li> <li>En administrat\u00f6r eller l\u00e4rare kan skapa rapporter \u00f6ver n\u00e4rvaron.</li> </ul> En journaling-app <p>En journaling-app l\u00e5ter anv\u00e4ndare skriva inl\u00e4gg som sparas dag f\u00f6r dag. Varje inl\u00e4gg kan ha </p> <ul> <li>datum</li> <li>text</li> <li>hum\u00f6r</li> <li>eventuellt en tagg f\u00f6r att beskriva k\u00e4nslor eller aktiviteter.  </li> </ul> <p>Appen kan ocks\u00e5 visa en \u00f6versikt eller statistik \u00f6ver anv\u00e4ndarens hum\u00f6r och vanor \u00f6ver tid.</p> Hogwarts School of Witchcraft and Wizardry <p>T\u00e4nk dig att du ska skapa ett system f\u00f6r att hantera elever, l\u00e4rare, kurser och betyg p\u00e5 Hogwarts. Elever kan vara med i olika elevhem (Gryffindor, Hufflepuff, Ravenclaw, Slytherin) och delta i olika aktiviteter som Quidditch. L\u00e4rare undervisar i olika \u00e4mnen och s\u00e4tter betyg p\u00e5 elevernas prestationer. Betygen i kurserna graderas med Outstanding, Exceeds Expectations, Acceptable, Poor och Dreadful. Systemet kan ocks\u00e5 h\u00e5lla reda p\u00e5 magiska varelser och artefakter som finns p\u00e5 skolan.</p> Saurons HR system <p>Sauron beh\u00f6ver ett system f\u00f6r att hantera sina orcher och andra tj\u00e4nare. Varje tj\u00e4nare har en roll (t.ex. krigare, spion, byggare), en styrka, en lojalitetsniv\u00e5 och en uppdragsstatus. Systemet kan ocks\u00e5 h\u00e5lla reda p\u00e5 vilka uppdrag som \u00e4r p\u00e5g\u00e5ende, vilka som \u00e4r slutf\u00f6rda och vilka som misslyckats. Det \u00e4r viktigt att h\u00e5lla koll p\u00e5 utrustning ocks\u00e5, orcher \u00e4r inte k\u00e4nda f\u00f6r att h\u00e5lla reda p\u00e5 sina saker. Systemet kan ocks\u00e5 hantera rekrytering av nya tj\u00e4nare och avskedande av de som inte l\u00e4ngre \u00e4r lojala.</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion08/exercises08_02/","title":"\u00d6vning 08 Inkapsling","text":"","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion08/exercises08_02/#accessmodifierare-getset-metoder","title":"Accessmodifierare, get/set metoder","text":"<p>Ska vi verkligen f\u00e5 s\u00e4tta och l\u00e4sa f\u00e4lten <code>name</code> och <code>phone</code> direkt? Vad h\u00e4nder om vi vill \u00e4ndra p\u00e5 hur de fungerar, eller l\u00e4gga till validering?</p> <p>F\u00f6r att kapsla in och skydda v\u00e5r data lite mer kan vi s\u00e4tta dem till <code>private</code>. Men hur kommer vi d\u00e5 \u00e5t dem utifr\u00e5n? Vi kan skapa get- och set-metoder f\u00f6r att l\u00e4sa och skriva v\u00e4rdena.</p> <ol> <li>G\u00f6r f\u00e4lten <code>name</code> och <code>phone</code> privata.</li> <li>Skapa publika metoder: <code>GetName</code>, <code>SetName</code>, <code>GetPhone</code> och <code>SetPhone</code> f\u00f6r att l\u00e4sa och skriva v\u00e4rdena.<ul> <li><code>GetName</code>skall vara en metod som returnerar <code>name</code>, men inte tar n\u00e5gon input.</li> <li><code>SetName</code> skall vara en metod som tar en str\u00e4ng som input och s\u00e4tter <code>name</code> till det v\u00e4rdet.</li> <li>G\u00f6r likadant f\u00f6r <code>GetPhone</code> och <code>SetPhone</code>.</li> </ul> </li> <li>I <code>SetName</code> kan vi sedan l\u00e4gga till lite enkel validering, t.ex. att namnet inte f\u00e5r vara tomt. Om det \u00e4r det kan vi tex se till s\u00e5 att namnet s\u00e4tts till \"No name\" eller n\u00e5got s\u00e5dant.</li> <li>Nu m\u00e5ste du uppdatera din kod f\u00f6r att anv\u00e4nda get- och set-metoderna ist\u00e4llet f\u00f6r att l\u00e4sa och skriva f\u00e4lten direkt.</li> </ol>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion08/quiz_encapsulation/","title":"Quiz Inkapsling","text":"<p>H\u00e4r kommer n\u00e5gra fr\u00e5gor p\u00e5 temat inkapsling och get/set-metoder</p> <p>1) Vad betyder det att ett f\u00e4lt \u00e4r <code>private</code> i C#?</p>  Att det kan anv\u00e4ndas \u00f6verallt i programmet  Att det bara kan n\u00e5s inifr\u00e5n samma klass  Att det \u00e4r of\u00f6r\u00e4nderligt <p></p> <p>2) Vad g\u00f6r en typisk <code>set</code>-metod?</p>  Tar emot ett v\u00e4rde som argument  Returnerar v\u00e4rdet till anroparen  Uppdaterar det privata f\u00e4ltet med v\u00e4rdet <p></p> <p>3) Vad st\u00e4mmer om <code>GetName()</code>?</p>  Den tar alltid emot ett argument  Den returnerar ett v\u00e4rde  Den anv\u00e4nds f\u00f6r att l\u00e4sa ut data <p></p> <p>4) Fyll i argumentet s\u00e5 att vi anropar <code>SetPhone</code> med telefonnumret 0701234567.</p> <pre><code>person.SetPhone();</code></pre> <p></p> <p>5) Varf\u00f6r \u00e4r det bra att l\u00e4gga validering i <code>SetPhone()</code>?</p>  F\u00f6r att undvika att n\u00e5gon anropar metoden  F\u00f6r att kontrollera att v\u00e4rdet \u00e4r giltigt innan det sparas  F\u00f6r att automatiskt skriva ut v\u00e4rdet p\u00e5 sk\u00e4rmen <p></p> <p>6) Vilken returtyp passar b\u00e4st f\u00f6r <code>GetName()</code>?</p> <pre><code>public  GetName() { ... }</code></pre> <p></p> <p>R\u00e4tta alla</p> <p></p>","tags":["OOP1-quiz"]},{"location":"lektioner/oop/v03/lektion08/quiz_oop/","title":"Quiz OOP Design","text":"<p>H\u00e4r kommer n\u00e5gra fr\u00e5gor p\u00e5 temat OOP-design: objekt, relationer/ansvar, attribut och metoder</p> <p>1) Vilket steg kommer tidigast i processen enligt uppgiften?</p>  Rita klassdiagram  Identifiera objekt (t.ex. med substantiv-metoden)  Lista metoder p\u00e5 varje klass <p></p> <p>2) Vilka av f\u00f6ljande \u00e4r rimliga objekt i en digital version av Fia med Knuff?</p>  Spelare  Pj\u00e4s  T\u00e4rning  Sk\u00e4rmuppl\u00f6sning  Muspekare <p></p> <p>3) Vilken relation passar b\u00e4st mellan <code>Spelare</code> och <code>Pj\u00e4s</code>?</p>  1-till-1 (en spelare har exakt en pj\u00e4s)  1-till-m\u00e5nga (en spelare har flera pj\u00e4ser)  m\u00e5nga-till-m\u00e5nga (spelare och pj\u00e4ser delar fritt) <p></p> <p>4) Vilka ansvar \u00e4r rimliga f\u00f6r objektet <code>T\u00e4rning</code>?</p>  Slumpa ett v\u00e4rde 1\u20136  Minnas senaste kastade v\u00e4rde  Rita hela spelbr\u00e4det  Flytta pj\u00e4ser enligt regler <p></p> <p>5) I klassdiagrammet: vad kallas objektens egenskaper (t.ex. f\u00e4rg, position)?</p> <pre><code>Begrepp: </code></pre> <p></p> <p>6) F\u00f6resl\u00e5 ett kort metodnamn p\u00e5 <code>Pj\u00e4s</code> f\u00f6r att byta position enligt reglerna.</p> <pre><code>Pj\u00e4s.(...)</code></pre> <p></p> <p>7) Vad b\u00f6r ligga innanf\u00f6r systemgr\u00e4nsen f\u00f6r spelet (dvs. modelleras i v\u00e5r dom\u00e4n)?</p>  Regler f\u00f6r hur pj\u00e4ser g\u00e5r i m\u00e5l  Operativsystemets f\u00f6nsterhantering  Turordning mellan spelare  Anv\u00e4ndarens skrivbordstema <p></p> <p>8) Vad passar b\u00e4st som metod p\u00e5 objektet <code>Spel</code> (snarare \u00e4n attribut)?</p>  Antal spelare  Lista av pj\u00e4ser  StartaNyOmg\u00e5ng() <p></p> <p>R\u00e4tta alla</p> <p></p>","tags":["OOP1-quiz"]},{"location":"lektioner/oop/v03/lektion08/solutions/","title":"Solutions","text":"En app f\u00f6r att skapa och dela recept <pre><code>classDiagram\ndirection LR\n\nclass User {\n+Guid id\n+string name\n+string email\n+createRecipe()\n+comment()\n+rate()\n}\n\nclass Recipe {\n+Guid id\n+string title\n+string instructions\n+string imageUrl\n+DateTime createdAt\n+publish()\n+edit()\n}\n\nclass Ingredient {\n+string name\n+string amount\n+string unit\n}\n\nclass Comment {\n+Guid id\n+string text\n+DateTime date\n}\n\nclass Rating {\n+Guid id\n+int value 1..5\n}\n\nUser \"1\" --&gt; \"*\" Recipe : creates\nRecipe \"1\" o-- \"*\" Ingredient : contains\nUser \"1\" --&gt; \"*\" Comment : writes\nComment \"*\" --&gt; \"1\" Recipe : belongs to\nUser \"1\" --&gt; \"*\" Rating : gives\nRating \"*\" --&gt; \"1\" Recipe : for\n</code></pre> Ett kassasystem i en butik <pre><code>classDiagram\ndirection LR\n\nclass Customer {\n+Guid id\n+string name\n}\n\nclass Product {\n+Guid id\n+string name\n+decimal price\n+string barcode\n}\n\nclass Order {\n+Guid id\n+DateTime date\n+decimal total\n+calculateTotal()\n}\n\nclass OrderLine {\n+int quantity\n+decimal unitPrice\n+lineTotal()\n}\n\nclass Payment {\n+Guid id\n+decimal amount\n+string method\n+DateTime time\n}\n\nclass Receipt {\n+Guid id\n+string number\n+print()\n}\n\nCustomer \"1\" --&gt; \"*\" Order : places\nOrder \"1\" o-- \"*\" OrderLine : contains\nOrderLine \"*\" --&gt; \"1\" Product : refers to\nOrder \"1\" --&gt; \"0..1\" Payment : paid with\nOrder \"1\" --&gt; \"0..1\" Receipt : generates\n</code></pre> Saurons HR system <pre><code>classDiagram\ndirection LR\n\nclass Employee {\n  +Guid id\n  +string name\n  +string species          // Orc, Uruk-hai, Troll, Human, Nazg\u00fbl (special)\n  +string rank             // Grunt, Captain, Overseer, Lieutenant\n  +DateTime hiredAt\n  +decimal basePay\n  +requestLeave()\n  +logAttendance()\n  +enlistInProject()\n}\n\nclass Manager {\n  +approveLeave()\n  +reviewPerformance()\n  +discipline()\n}\n\nclass Department {\n  +Guid id\n  +string name             // Barad-d\u00fbr Operations, Siege Engineering, Intelligence\n  +decimal budget\n  +addEmployee()\n}\n\nclass Fortress {\n  +Guid id\n  +string name             // Barad-d\u00fbr, Minas Morgul, Cirith Ungol\n  +string region           // Mordor, Ithilien, etc.\n}\n\nclass Role {\n  +Guid id\n  +string title            // Gate Guard, Siege Engineer, Spy, Ringwraith\n  +string description\n  +requiredRank\n}\n\nclass Project {\n  +Guid id\n  +string codename         // \"Siege-of-Gondor\", \"Ring-Recovery\", etc.\n  +DateTime start\n  +DateTime? end\n  +assign()\n  +close()\n}\n\nclass Assignment {\n  +Guid id\n  +DateTime from\n  +DateTime? to\n  +string duty             // patrol, siege, scouting, reconnaissance\n  +status                  // active, completed\n}\n\nclass AttendanceRecord {\n  +Guid id\n  +DateTime date\n  +string shift            // night, day\n  +string status           // present, absent, on-mission\n}\n\nclass LeaveRequest {\n  +Guid id\n  +DateTime from\n  +DateTime to\n  +string reason           // injury, re-forging, Nazg\u00fbl business\n  +string status           // pending, approved, rejected\n  +submit()\n  +cancel()\n}\n\nclass PerformanceReview {\n  +Guid id\n  +DateTime periodStart\n  +DateTime periodEnd\n  +int rating              // 1..5 (5 = \u201cterrifyingly effective\u201d)\n  +string notes\n}\n\nclass DisciplinaryAction {\n  +Guid id\n  +DateTime date\n  +string offense          // dereliction, insubordination, helmet misuse\n  +string action           // lashes, demotion, swamp duty\n}\n\nclass Payroll {\n  +Guid id\n  +string cycle            // monthly, fortnightly\n  +decimal gross\n  +decimal hazardBonus\n  +decimal deductions      // armor rental, troll insurance\n  +decimal net\n  +finalize()\n}\n\n%% Inheritance &amp; roles\nEmployee &lt;|-- Manager : is a\n\n%% Core relations\nDepartment \"1\" --&gt; \"0..*\" Employee : employs\nFortress  \"1\" --&gt; \"0..*\" Department : hosts\nEmployee  \"0..*\" --&gt; \"1\" Department : belongs to\nEmployee  \"0..1\" --&gt; \"1\" Manager : reports to\n\n%% Roles &amp; projects\nEmployee  \"0..*\" --&gt; \"0..*\" Role : qualified for\nProject   \"1\" --&gt; \"0..*\" Assignment : has\nEmployee  \"1\" --&gt; \"0..*\" Assignment : works on\nAssignment \"1\" --&gt; \"1\" Project : for\nAssignment \"1\" --&gt; \"1\" Role : as\n\n%% Attendance &amp; leave\nEmployee  \"1\" --&gt; \"0..*\" AttendanceRecord : logs\nEmployee  \"1\" --&gt; \"0..*\" LeaveRequest : submits\nManager   \"1\" --&gt; \"0..*\" LeaveRequest : approves/rejects\n\n%% Performance &amp; discipline\nEmployee  \"1\" --&gt; \"0..*\" PerformanceReview : receives\nManager   \"1\" --&gt; \"0..*\" PerformanceReview : conducts\nEmployee  \"1\" --&gt; \"0..*\" DisciplinaryAction : incurs\nManager   \"1\" --&gt; \"0..*\" DisciplinaryAction : issues\n\n%% Payroll\nEmployee  \"1\" --&gt; \"0..*\" Payroll : paid by\n</code></pre>"},{"location":"lektioner/oop/v03/lektion08/slides/01-slide/","title":"Slide 1","text":""},{"location":"lektioner/oop/v03/lektion08/slides/01-slide/#inkapsling-accessmodifiers","title":"Inkapsling : Accessmodifiers","text":""},{"location":"lektioner/oop/v03/lektion08/slides/01-slide/#accessmodifiers","title":"Accessmodifiers","text":"<ul> <li>Public - Syns \u00f6verallt</li> <li>Private - Syns bara inom klassen</li> <li>Protected - Syns inom klassen och i \u00e4rvda klasser</li> <li>Internal - Syns inom samma projekt</li> </ul> <p>Ett s\u00e4tt att skydda data i objekt fr\u00e5n att \u00e4ndras direkt utifr\u00e5n. Ist\u00e4llet f\u00f6r att till\u00e5ta direkt \u00e4ndring av f\u00e4lt, skapar vi metoder f\u00f6r att \u00e4ndra och l\u00e4sa data. </p> <p>Mermaid-schema som illustrerar accessmodifiers:</p>"},{"location":"lektioner/oop/v03/lektion09/","title":"Lektion 09 - Git och GitHub","text":"<p>Moment: <code>GIT och GitHub</code></p>"},{"location":"lektioner/oop/v03/lektion09/#innehall","title":"Inneh\u00e5ll","text":"<ul> <li>Git<ul> <li>Grunderna</li> <li>Branches</li> <li>Konflikter</li> </ul> </li> <li>GitHub<ul> <li>Remotes, push, pull</li> <li>Forks</li> <li>Pull requests</li> </ul> </li> <li>GitHub Classroom</li> <li>Veckans slutenk\u00e4t!</li> </ul>"},{"location":"lektioner/oop/v03/lektion09/#quiz","title":"Quiz","text":"<p>Git Quiz</p>"},{"location":"lektioner/oop/v03/lektion09/#relevanta-lankar","title":"Relevanta l\u00e4nkar","text":"<ul> <li>Material: Git</li> <li>Sammanfattning p\u00e5 en sida</li> <li>Atlassian Git Tutorials</li> <li>Gits officiella dokumentation</li> <li>Git Branching</li> </ul>"},{"location":"lektioner/oop/v03/lektion09/exercises09/","title":"\u00d6vning 09 Git","text":"<p>I den h\u00e4r \u00f6vningen f\u00e5r du tr\u00e4na p\u00e5 att anv\u00e4nda Git f\u00f6r att spara och hantera filer. Vi b\u00f6rjar med enkla textfiler (ingen C#-kod beh\u00f6vs). M\u00e5let \u00e4r att l\u00e4ra sig de vanligaste kommandona och situationerna.</p> <p>Anv\u00e4nd dokumentationen och internet f\u00f6r att hitta svar p\u00e5 fr\u00e5gor och l\u00f6sningar p\u00e5 problem.  </p> <p>Speciellt listan p\u00e5 kommandon kan vara anv\u00e4ndbar.</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion09/exercises09/#del-1-grunder","title":"Del 1: Grunder","text":"<p>I den h\u00e4r \u00f6vningen f\u00e5r du tr\u00e4na p\u00e5 de viktigaste grunderna i Git:  </p> <ul> <li>Skapa ett repo  </li> <li>L\u00e4gga till filer och g\u00f6ra commits  </li> <li>Se historiken  </li> </ul> <p>Vi jobbar bara med enkla textfiler till att b\u00f6rja med.</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion09/exercises09/#steg-1-skapa-ett-nytt-repo","title":"Steg 1: Skapa ett nytt repo","text":"<p>\u00d6ppna terminalen, skapa en ny mapp p\u00e5 ett l\u00e4mpligt st\u00e4lle och g\u00e5 in i den: <pre><code>mkdir git-ovning\ncd git-ovning\n</code></pre></p> <p>Starta ett nytt git-repo i den mappen med: <pre><code>git init\n</code></pre></p> <p>Kolla status: <pre><code>git status\n</code></pre></p> <p>Fr\u00e5ga: Vad h\u00e4nder n\u00e4r du k\u00f6r <code>git init</code>?</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion09/exercises09/#steg-2-skapa-en-forsta-fil-och-gor-en-commit","title":"Steg 2: Skapa en f\u00f6rsta fil och g\u00f6r en commit","text":"<p>Skapa en ny fil i mappen som heter <code>hej.txt</code> och skriv n\u00e5got i den. (G\u00f6r detta antingen med vscode eller som nedan med echo-kommandot i terminalen) Skapa filen med echo-kommandot s\u00e5h\u00e4r:<pre><code>echo 'Hej Git!' &gt; hej.txt\n</code></pre></p> <p>Kolla att filen finns i katalogen: <pre><code>ls # macOS/Linux\ndir # Windows\n</code></pre></p> <p>Kolla status i ditt repo: <pre><code>git status\n</code></pre></p> <p>L\u00e4gg till filen i staging area: <pre><code>git add hej.txt\n</code></pre></p> <p>Kolla nu status igen. Vad har \u00e4ndrats?</p> <p>G\u00f6r din f\u00f6rsta commit: <pre><code>git commit -m \"F\u00f6rsta commit!\"\n</code></pre></p> <p>Kolla status igen, vad har \u00e4ndrats nu?</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion09/exercises09/#steg-3-andra-en-fil","title":"Steg 3: \u00c4ndra en fil","text":"<p>\u00c4ndra inneh\u00e5llet i <code>hej.txt</code> (l\u00e4gg till en ny rad i filen, t.ex. med en texteditor).</p> <p>Kolla status: <pre><code>git status\n</code></pre></p> <p>Fr\u00e5ga: Vad h\u00e4nder om du g\u00f6r en commit nu utan att l\u00e4gga till filen f\u00f6rst?</p> <p>L\u00e4gg till och committa \u00e4ndringen: <pre><code>git commit -am \"\u00c4ndrade hej.txt\" # -a l\u00e4gger till alla \u00e4ndrade filer samtidigt som den committas\n</code></pre></p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion09/exercises09/#steg-4-se-historiken","title":"Steg 4: Se historiken","text":"<p>Visa historiken f\u00f6r att se dina commits: <pre><code>git log --oneline # --oneline visar varje commit p\u00e5 en rad\n</code></pre></p> <p>Om det \u00e4r m\u00e5nga commits kan du bl\u00e4ddra med piltangenterna. Avsluta med <code>q</code>.  </p> <p>Fr\u00e5ga: Hur m\u00e5nga commits har du just nu?</p> <p>Visa skillnader: <pre><code>git diff\n</code></pre> Fr\u00e5ga: Vad visar <code>git diff</code> just nu?</p> <p>Prova att g\u00f6ra en \u00e4ndring i filen och k\u00f6r <code>git diff</code> igen. Vad ser du nu?</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion09/exercises09/#steg-5-angra-andringar","title":"Steg 5: \u00c5ngra \u00e4ndringar","text":"<p>G\u00f6r en \u00e4ndring i <code>hej.txt</code>. Antag nu att du \u00e5ngrar dig och vill komma tillbaka till hur det s\u00e5g ut f\u00f6rut, n\u00e4r du gjorde din senaste commit.</p> <p>\u00c5ngra \u00e4ndringen s\u00e5 h\u00e4r: <pre><code>git restore hej.txt\n</code></pre></p> <p>Detta funkar allts\u00e5 om du inte har committat \u00e4ndringen \u00e4n.</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion09/exercises09/#reflektion-for-del-1","title":"Reflektion f\u00f6r Del 1","text":"<ul> <li>Vad \u00e4r skillnaden mellan <code>git add</code> och <code>git commit</code>?  </li> <li>Vad \u00e4r skillnaden mellan <code>git log</code> och <code>git status</code>?  </li> <li>Vad \u00e4r staging area?  </li> <li>Vad \u00e4r en commit?  </li> <li>Vad \u00e4r HEAD?  </li> </ul>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion09/exercises09/#del-2-branches","title":"Del 2: Branches","text":"<p>I den h\u00e4r delen f\u00e5r du tr\u00e4na p\u00e5 att jobba med brancher i Git.</p> <ul> <li>Skapa en ny branch</li> <li>Byta mellan brancher</li> <li>Sl\u00e5 ihop brancher</li> </ul>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion09/exercises09/#steg-6-skapa-en-ny-branch","title":"Steg 6: Skapa en ny branch","text":"<p>Skapa en ny branch i ditt repo som heter <code>nya-grejjer</code>: <pre><code>git branch nya-grejjer\n</code></pre></p> <p>Kolla vilka brancher du har: <pre><code>git branch\n</code></pre></p> <p>Vad ser du f\u00f6r n\u00e5got? Vilken branch \u00e4r du p\u00e5 just nu?</p> <p>Byt till den nya branchen: <pre><code>git switch nya-grejjer\n</code></pre></p> <p>Kolla vilka brancher du har igen: <pre><code>git branch\n</code></pre> Vad ser du nu? Vilken branch \u00e4r du p\u00e5 nu?</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion09/exercises09/#steg-7-gor-andringar-i-den-nya-branchen","title":"Steg 7: G\u00f6r \u00e4ndringar i den nya branchen","text":"<p>L\u00e4gg till text i slutet av <code>hej.txt</code> och committa: <pre><code>git commit -am \"\u00c4ndring p\u00e5 nya-grejjer-branchen\"\n</code></pre></p> <p>G\u00f6r ytterligare tv\u00e5, tre till\u00e4gg i slutet av filen och committa varje g\u00e5ng.</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion09/exercises09/#steg-8-sla-ihop-brancher","title":"Steg 8: Sl\u00e5 ihop brancher","text":"<p>G\u00e5 tillbaka till din main-branch: <pre><code>git switch main\n</code></pre></p> <p>Titta p\u00e5 inneh\u00e5llet i <code>hej.txt</code>. Vad ser du? Varf\u00f6r ser du inte \u00e4ndringarna du just gjorde?</p> <p>Nu vill vi sl\u00e5 ihop \u00e4ndringarna fr\u00e5n <code>nya-grejjer</code> in i <code>main</code>.</p> <p>Sl\u00e5 ihop <code>nya-grejjer</code> in i <code>main</code>: <pre><code>git merge nya-grejjer\n</code></pre></p> <p>Se till att du \u00e4r p\u00e5 <code>main</code> n\u00e4r du k\u00f6r <code>git merge nya-grejjer</code>. Anv\u00e4nd <code>git branch</code> f\u00f6r att kolla vilken branch du \u00e4r p\u00e5.</p> <p>Titta i <code>hej.txt</code> igen. Vad ser du nu?</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion09/exercises09/#steg-9-konflikter","title":"Steg 9: Konflikter!","text":"<p>Testa att skapa en konflikt genom att g\u00f6ra \u00e4ndringar i <code>hej.txt</code> p\u00e5 samma rader i b\u00e5de <code>main</code> och p\u00e5 <code>nya-grejjer</code> och sedan f\u00f6rs\u00f6ka sl\u00e5 ihop dem igen.</p> <ol> <li>Byt till <code>nya-grejjer</code> och g\u00f6r en \u00e4ndring i <code>hej.txt</code> p\u00e5 en rad som redan finns d\u00e4r. Committa \u00e4ndringen.</li> <li>Byt tillbaka till <code>main</code> och g\u00f6r en annan \u00e4ndring p\u00e5 samma rad i <code>hej.txt</code>. Committa \u00e4ndringen.</li> <li>F\u00f6rs\u00f6k sl\u00e5 ihop <code>nya-grejjer</code> in i <code>main</code> igen med <code>git merge nya-grejjer</code>.</li> </ol> <p>Du kommer nu att f\u00e5 ett felmeddelande om en konflikt! Varf\u00f6r h\u00e4nder detta? Jo, Git vet inte vilken av \u00e4ndringarna den ska beh\u00e5lla, eftersom de b\u00e5da \u00e4ndrar samma rad i filen.</p> <p>Nu m\u00e5ste du sj\u00e4lv g\u00e5 in och l\u00f6sa konflikten i <code>hej.txt</code>. \u00d6ppna filen i en texteditor och leta upp konfliktmarkeringarna som lagts till av Git: <pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n=======\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; nya-grejjer\n</code></pre></p> <p>Ta bort konfliktmarkeringarna och best\u00e4m vilken av \u00e4ndringarna du vill beh\u00e5lla (eller skriv en helt ny rad som kombinerar b\u00e5da \u00e4ndringarna). Spara filen.</p> <p>N\u00e4r du har l\u00f6st konflikten, l\u00e4gg till filen igen och g\u00f6r en commit: <pre><code>git commit -am \"L\u00f6st konflikt mellan main och nya-grejjer\"\n</code></pre></p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion09/exercises09/#reflektion-for-del-2","title":"Reflektion f\u00f6r Del 2","text":"<ul> <li>Vad \u00e4r syftet med att anv\u00e4nda branches?</li> <li>Vad \u00e4r skillnaden mellan <code>git switch</code> och <code>git merge</code>?</li> <li>Hur vet Git att det har uppst\u00e5tt en konflikt?</li> <li>Hur l\u00f6ser du en konflikt i Git?</li> <li>Hur markeras en konflikt i en fil?</li> </ul> <p>L\u00e4r dig mer om hur branches funkar i denna interaktiva tutorial: Learn Git Branching</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion09/exercises09/#del-3-github","title":"Del 3 GitHub","text":"<p>I den h\u00e4r delen f\u00e5r du tr\u00e4na p\u00e5 att koppla ihop ditt lokala repo med ett repo p\u00e5 GitHub, ett s\u00e5 kallat fj\u00e4rr-repo (remote repo).</p> <ul> <li>Skapa ett repo p\u00e5 GitHub</li> <li>Koppla ihop ditt lokala repo med GitHub</li> <li>Skicka upp dina commits</li> </ul>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion09/exercises09/#steg-10-skapa-ett-nytt-repo-pa-github","title":"Steg 10. Skapa ett nytt repo p\u00e5 GitHub","text":"<ol> <li>G\u00e5 till https://github.com.  </li> <li>Klicka p\u00e5 New Repository.  </li> <li>Ge det namnet <code>git-ovning</code>.  </li> <li>Skapa repot (utan att l\u00e4gga till README, .gitignore eller licens).</li> </ol>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion09/exercises09/#steg-11-koppla-ihop-ditt-lokala-repo-med-repot-pa-github","title":"Steg 11. Koppla ihop ditt lokala repo med repot p\u00e5 GitHub","text":"<p>Se till att du st\u00e5r i din lokala mapp <code>git-ovning</code>, p\u00e5 branch <code>main</code>.</p> <p>L\u00e4gg till fj\u00e4rr-repot (ers\u00e4tt <code>DITT-NAMN</code> med ditt GitHub-anv\u00e4ndarnamn): <pre><code>git remote add origin https://github.com/DITT-NAMN/git-ovning.git\n</code></pre></p> <p>Kolla att det blev r\u00e4tt: <pre><code>git remote -v # -v visar mer info\n</code></pre></p> <p>Om det st\u00e4mmer skall du se tv\u00e5 rader med <code>origin</code> och URL:en till ditt GitHub-repo.  </p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion09/exercises09/#steg-12-verifiera","title":"Steg 12. Verifiera","text":"<p>Kolla status: <pre><code>git status\n</code></pre></p> <p>Vad ser du f\u00f6r n\u00e5got? Vad betyder det? Ser du n\u00e5got om din fj\u00e4rr-branch <code>origin/main</code>?</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion09/exercises09/#steg-13-skicka-upp-dina-commits-till-repot-pa-github","title":"Steg 13. Skicka upp dina commits till repot p\u00e5 GitHub","text":"<p>Skicka upp dina commits till GitHub med: <pre><code>git push -u origin main # -u s\u00e4tter origin/main som standard f\u00f6r framtida push och pull\n</code></pre></p> <ul> <li>Om du f\u00e5r ett felmeddelande som s\u00e4ger att du m\u00e5ste s\u00e4tta en upstream-branch, prova att k\u00f6ra kommandot ovan igen.</li> <li>Om du f\u00e5r ett felmeddelande som s\u00e4ger att du m\u00e5ste logga in, f\u00f6lj instruktionerna f\u00f6r att logga in med ditt GitHub-konto.</li> </ul> <p>G\u00e5 nu till ditt repo p\u00e5 GitHub i webbl\u00e4saren och ladda om sidan. Ser du din fil d\u00e4r nu?</p> <p>K\u00f6r <code>git status</code> igen. Vad ser du nu?</p> <p>Grattis! Du har nu kopplat ihop ditt lokala repo med ett repo p\u00e5 GitHub och skickat upp dina commits! </p> <p>Kom ih\u00e5h!</p> <p><code>git commit</code> skickar inte upp dina \u00e4ndringar till GitHub, det sparar dem bara lokalt! F\u00f6r att skicka upp dem till GitHub m\u00e5ste du anv\u00e4nda <code>git push</code>. Detta blir viktigt att komma ih\u00e5g om du ska l\u00e4mna in en uppgift via GitHub Classroom senare. Utan en push kommer din l\u00e4rare inte att kunna se dina \u00e4ndringar.</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion09/exercises09/#steg-14-gor-en-andring-pa-github","title":"Steg 14. G\u00f6r en \u00e4ndring p\u00e5 GitHub","text":"<p>G\u00e5 till ditt repo p\u00e5 GitHub i webbl\u00e4saren och \u00f6ppna filen <code>hej.txt</code>. Klicka p\u00e5 penn-ikonen f\u00f6r att redigera filen direkt i webbl\u00e4saren. L\u00e4gg till en ny rad med text och scrolla ner till botten av sidan. Skriv en commit-meddelande och klicka p\u00e5 Commit changes.</p> <p>Du kan nu f\u00e5 ner denna \u00e4ndring till din lokala dator med: <pre><code>git pull\n</code></pre></p> <p>Vad h\u00e4nder n\u00e4r du k\u00f6r <code>git pull</code>? Kolla i <code>hej.txt</code> igen, ser du \u00e4ndringen du gjorde p\u00e5 GitHub?</p> <p>Fr\u00e5ga: Vad \u00e4r skillnaden mellan <code>git pull</code> och <code>git push</code>?</p> <p>Unders\u00f6k vad <code>git fetch</code> \u00e4r f\u00f6r n\u00e5got. Hur skiljer det sig fr\u00e5n <code>git pull</code>?</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion09/exercises09/#reflektion-for-del-3","title":"Reflektion f\u00f6r Del 3","text":"<ul> <li>Vad \u00e4r ett fj\u00e4rr-repo (remote repo)?</li> <li>Vad \u00e4r skillnaden mellan <code>git push</code> och <code>git commit</code>?</li> <li>Vad \u00e4r det f\u00f6r skillnad p\u00e5 git och GitHub?</li> </ul>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion09/exercises09/#del-4-github-classroom","title":"Del 4 GitHub Classroom","text":"<ol> <li>G\u00e5 till l\u00e4nken f\u00f6r \u00f6vningen i GitHub Classroom som du hittar p\u00e5 Google Classroom.</li> <li>Acceptera uppgiften s\u00e5 skapas ett repo \u00e5t dig p\u00e5 GitHub.</li> <li>Klona repot till din dator med <code>git clone &lt;URL&gt;</code> d\u00e4r <code>&lt;URL&gt;</code> \u00e4r URL:en till ditt repo p\u00e5 GitHub.</li> <li>\u00d6ppna repot i VSCode.</li> <li>VIKTIGT Skapa en .gitignore-fil! Anv\u00e4nd kommandot <code>dotnet new gitignore</code></li> <li>Skapa ett nytt console-projekt med <code>dotnet new console</code></li> <li>Se till att committa ofta! G\u00e4rna direkt efter <code>dotnet new console</code></li> <li>Kopiera in all kod som har med Adressboks\u00f6vningen att g\u00f6ra (s\u00e5 l\u00e5ngt som du kommit nu)</li> <li>Committa, med knappen i VS Code eller med <code>git commit -am \"Lade till Adressbokskod\"</code></li> <li>Pusha, antingen med knappen i VS Code eller med kommandot <code>git push</code></li> <li>Jobba vidare p\u00e5 Adressboken s\u00e5 mycket du vill:<ul> <li>\u00f6va p\u00e5 att skapa metoder</li> <li>Kanske n\u00e5n extra klass? Exempelvis, en egen klass f\u00f6r telefonnummer eller namn, s\u00e5 att telefonnummer kan ha en kategori, eller namn kan delas upp i f\u00f6rnamn, mellannamn och efternamn.</li> </ul> </li> </ol>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v03/lektion09/quiz_git/","title":"Quiz GIT","text":"<p>H\u00e4r kommer n\u00e5gra fr\u00e5gor p\u00e5 temat Git &amp; GitHub (fr\u00e5n \u00d6vning 09)</p> <p>1) Vad g\u00f6r <code>git init</code> i den aktuella mappen?</p>  Skapar ett nytt, tomt Git-repo (mappen blir ett repo)  Installerar Git i operativsystemet  Klonar ett repo fr\u00e5n GitHub <p></p> <p>2) Vad st\u00e4mmer om <code>git add</code> respektive <code>git commit</code>?</p> <code>git add</code> l\u00e4gger filer i staging area <code>git commit</code> sparar en version lokalt i historiken <code>git add</code> skickar upp filer till GitHub <code>git commit</code> pushar automatiskt till GitHub <p></p> <p>3) Vad g\u00f6r flaggan <code>-a</code> i <code>git commit -am \"msg\"</code>?</p>  Stage:ar alla sp\u00e5rade filer som \u00e4ndrats, och committar dem  L\u00e4gger \u00e4ven till otrackade (helt nya) filer  Skapar en ny branch automatiskt <p></p> <p>4) Matcha kommando med beskrivning (v\u00e4lj alla som st\u00e4mmer).</p> <code>git log --oneline</code>: visar commits historiskt, en per rad <code>git status</code>: visar \u00e4ndringars status och staging area <code>git diff</code>: visar skillnader i filer som inte \u00e4r committade <code>git status</code>: visar enbart commit-meddelanden <p></p> <p>5) Skriv kommandot som \u00e5terst\u00e4ller <code>hej.txt</code> till senaste commit (innan den \u00e4r committad).</p> <pre><code></code></pre> <p></p> <p>6) Vilka kommandon skapar en branch <code>nya-grejjer</code> och byter till den?</p> <code>git branch nya-grejjer</code> och sedan <code>git switch nya-grejjer</code> <code>git init nya-grejjer</code> och sedan <code>git open nya-grejjer</code> <code>git make nya-grejjer</code> och sedan <code>git checkout .</code> <p></p> <p>7) Du st\u00e5r p\u00e5 <code>main</code> och vill ta in \u00e4ndringar fr\u00e5n <code>nya-grejjer</code>. Vad k\u00f6r du?</p> <code>git switch nya-grejjer</code> <code>git merge nya-grejjer</code> <code>git pull nya-grejjer</code> <p></p> <p>8) Vad st\u00e4mmer om merge-konflikter?</p>  Uppst\u00e5r n\u00e4r samma rader \u00e4ndrats olika i tv\u00e5 brancher  Git markerar konflikten i filen med speciella mark\u00f6rer  G\u00e5r alltid \u00f6ver att l\u00f6sa med <code>git restore</code>  L\u00f6ses bara genom att radera filen <p></p> <p>9) Vilka p\u00e5st\u00e5enden st\u00e4mmer om remote och synk?</p> <code>git remote add origin &lt;URL&gt;</code> kopplar ett fj\u00e4rr-repo <code>git push</code> skickar upp lokala commits till fj\u00e4rr-repot <code>git pull</code> h\u00e4mtar och mergar fr\u00e5n fj\u00e4rr till lokal branch <code>git commit</code> laddar upp \u00e4ndringar till GitHub <p></p> <p>10) Vad g\u00f6r flaggan <code>-u</code> i <code>git push -u origin main</code>?</p>  S\u00e4tter upstream (sp\u00e5rning) mot <code>origin/main</code> f\u00f6r framtida push/pull  Uppdaterar Git till senaste version  Skapar en tagg p\u00e5 senaste commit <p></p> <p>11) Vad \u00e4r skillnaden mellan <code>git fetch</code> och <code>git pull</code>?</p> <code>fetch</code> h\u00e4mtar utan att merga; <code>pull</code> h\u00e4mtar och merga/uppdaterar din branch <code>fetch</code> pushar, <code>pull</code> committar  Ingen skillnad, de g\u00f6r samma sak <p></p> <p>12) Vad \u00e4r bra praxis n\u00e4r du startar ett C#-projekt i ett Classroom-repo?</p>  Skapa <code>.gitignore</code> f\u00f6r .NET (t.ex. <code>dotnet new gitignore</code>)  Commita tidigt (t.ex. direkt efter <code>dotnet new console</code>)  Ladda upp <code>bin/</code> och <code>obj/</code> till GitHub  Hoppa \u00f6ver commit-meddelanden f\u00f6r snabbhet <p></p> <p>R\u00e4tta alla</p> <p></p>","tags":["OOP1-quiz"]},{"location":"lektioner/oop/v04/lektion10/","title":"Lektion 10 - OOP Grunder forts\u00e4ttning","text":"<p>Moment: <code>Properties</code>, <code>Konstruktorer</code></p>"},{"location":"lektioner/oop/v04/lektion10/#dagens-innehall","title":"Dagens inneh\u00e5ll","text":"<ul> <li>Dagens enk\u00e4t! (0.5h)</li> <li>GIT-repetition (0.5h)</li> <li>Properties (1h)</li> <li>Konstruktorer (1h)</li> <li>\u00d6vningar resten av dagen</li> </ul>"},{"location":"lektioner/oop/v04/lektion10/#quiz","title":"Quiz","text":"<ul> <li>Properties</li> <li>Konstruktorer</li> </ul>"},{"location":"lektioner/oop/v04/lektion10/#lankar","title":"L\u00e4nkar","text":"<ul> <li>Material: Properties</li> <li>Material: Konstruktorer</li> </ul>"},{"location":"lektioner/oop/v04/lektion10/exercises10_01/","title":"\u00d6vning 10 Properties","text":"<p>OBS: Se avsnittet om properties f\u00f6r att se hur det skrivs i kod.</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v04/lektion10/exercises10_01/#steg-1-properties-istallet-for-getset-metoder","title":"Steg 1: Properties ist\u00e4llet f\u00f6r get/set metoder","text":"<p>Det moderna alternativet till att skapa get- och set-metoder \u00e4r att anv\u00e4nda properties. All kod i standardbiblioteket, och de flesta andra proffessionelt skrivna bibliotek, anv\u00e4nder properties, s\u00e5 det \u00e4r bra att v\u00e4nja sig vid det.</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v04/lektion10/exercises10_01/#11-byt-ut-getset-metoder-mot-properties","title":"1.1 Byt ut get/set metoder mot properties","text":"<ol> <li>Ta bort get- och set-metoderna du skapade i \u00d6vning 08 Inkapsling.</li> <li>Skapa ist\u00e4llet publika properties <code>Name</code> och <code>Phone</code> med <code>get</code> och <code>set</code>.</li> <li>L\u00e4gg in valideringen i <code>set</code>-delen av <code>Name</code> propertyn (Om du hade n\u00e5got validering vill s\u00e4ga. Annars kan du l\u00e4gga in det! Allts\u00e5, om n\u00e5n f\u00f6rs\u00f6ker s\u00e4tta <code>Name</code> till en tom str\u00e4ng, s\u00e5 ska den antingen s\u00e4ttas till \"No Name\" eller beh\u00e5lla det tidigare namnet).</li> <li><code>Phone</code> propertyn ska inte ha n\u00e5gon validering, utan kan vara en auto-implemented property.</li> <li>Uppdatera koden s\u00e5 att den anv\u00e4nder properties ist\u00e4llet f\u00f6r get- och set-metoderna.</li> </ol> <p>T\u00e4nk p\u00e5 att!</p> <ul> <li>N\u00e4r du anv\u00e4nder properties s\u00e5 anv\u00e4nds de precis som vanliga f\u00e4lt.</li> <li>Namnen p\u00e5 properties ska  b\u00f6rja med stor bokstav, medan f\u00e4ltnamn ska  b\u00f6rja med liten bokstav.</li> </ul>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v04/lektion10/exercises10_01/#12-en-till-property","title":"1.2 En till property","text":"<p>Ofta i adressb\u00f6cker g\u00e5r det att markera vissa kontakter som favoriter. L\u00e5t oss l\u00e4gga till en s\u00e5dan property.</p> <ol> <li>L\u00e4gg till en publik property <code>IsFavorite</code> av typen <code>bool</code> med b\u00e5de <code>get</code> och <code>set</code>.</li> <li>Denna property ska vara en auto-implemented property.</li> </ol>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v04/lektion10/exercises10_01/#13-annu-en-property-createdat","title":"1.3 \u00c4nnu en property - CreatedAt","text":"<p>I m\u00e5nga system \u00e4r det vanligt att spara n\u00e4r ett objekt skapades. L\u00e5t oss l\u00e4gga till en s\u00e5dan property.</p> <ol> <li>L\u00e4gg till en publik property <code>CreatedAt</code> av typen <code>DateTime</code> med bara en <code>get</code>. Detta blir nu en read-only property.</li> <li>S\u00e4tt v\u00e4rdet p\u00e5 <code>CreatedAt</code> med en sk. <code>field initializer</code> n\u00e4r du deklarerar propertyn, s\u00e5 att den s\u00e4tts till <code>DateTime.Now</code> n\u00e4r objektet skapas.</li> <li>Testa att skriva ut <code>CreatedAt</code> n\u00e4r du listar dina kontakter.</li> </ol>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v04/lektion10/exercises10_02/","title":"\u00d6vning 10 Konstruktor","text":"<p>OBS: Se avsnittet om konstruktorer f\u00f6r att se hur det skrivs i kod.</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v04/lektion10/exercises10_02/#2-en-konstruktor-i-contact","title":"2. En konstruktor i Contact","text":"<p>Vi vill kunna skapa ett <code>Contact</code>-objekt och direkt skicka med namn och telefonnummer, ist\u00e4llet f\u00f6r att f\u00f6rst skapa objektet och sedan s\u00e4tta egenskaperna. Detta g\u00f6r vi med en konstruktor. Det borde n\u00e4mligen inte g\u00e5 att skapa kontakt-objekt utan namn och telefonnummer!</p> <ol> <li>Skapa en konstruktor i <code>Contact</code>-klassen som tar emot namn och telefonnummer som parametrar.</li> <li>I konstruktorn s\u00e4tter du egenskaperna <code>Name</code> och <code>Phone</code> med de v\u00e4rden som skickas in.</li> <li>Uppdatera koden i <code>Main</code>-metoden s\u00e5 att den anv\u00e4nder den nya konstruktorn f\u00f6r att skapa <code>Contact</code>-objekt, ist\u00e4llet f\u00f6r att s\u00e4tta properties.</li> <li>Om du vill kan du s\u00e4tta <code>CreatedAt</code> i konstruktorn ist\u00e4llet f\u00f6r med en field initializer, men det spelar ingen st\u00f6rre roll.</li> </ol>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v04/lektion10/exercises10_02/#21-constructor-overloading","title":"2.1. Constructor overloading","text":"<ol> <li>Prova att g\u00f6ra konstruktorn till en overloaded constructor genom att skapa en till konstruktor som bara tar emot namn.</li> <li>Testa att skapa <code>Contact</code>-objekt med den nya konstruktorn ist\u00e4llet. OBS! Det \u00e4r fortfarande bara en konstruktor som ska anv\u00e4ndas! V\u00e4lj den som passar b\u00e4st.</li> </ol>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v04/lektion10/quiz_constructors/","title":"Quiz Konstruktorer","text":"<p>H\u00e4r kommer n\u00e5gra fr\u00e5gor p\u00e5 temat Konstruktorer i C#</p> <p>1) Vad \u00e4r syftet med en konstruktor?</p>  Att initiera ett objekt n\u00e4r det skapas  Att uppdatera olika properties  Att skriva ut data till konsolen <p></p> <p>2) Vilka av f\u00f6ljande \u00e4r giltiga konstruktorer i en klass <code>Person</code>?</p> <code>public Person() { } </code> <code>public void Person() { }</code> <code>public Person(string name) { this.Name = name; }</code> <code>private string Person() { return \"hej\"; }</code> <p></p> <p>3) Vad menas med en default-konstruktor?</p>  En konstruktor som alltid m\u00e5ste ha minst en parameter  En parameterl\u00f6s konstruktor som anropas automatiskt om ingen annan finns  En konstruktor som skapas i en statisk klass <p></p> <p>4) M\u00e5ste du skriva konstruktorer till alla klasser?</p>  Ja  Nej  Det beror p\u00e5, ibland m\u00e5ste man det <p></p> <p>5) Vad inneb\u00e4r att en klass har \u00f6verlagrade konstruktorer?</p>  Att en konstruktor kan anropas flera g\u00e5nger samtidigt  Att det finns flera konstruktorer med olika parametrar  Att en konstruktor \u00e4r markerad som <code>override</code> <p></p> <p>6) Vad anv\u00e4nds <code>this</code> till i en konstruktor?</p>  Att skilja p\u00e5 f\u00e4lt och parameter om de har samma namn  Att anropa en annan konstruktor i samma klass  Att ta bort objektet ur minnet  Att alltid g\u00f6ra f\u00e4lt publika <p></p> <p>R\u00e4tta alla</p> <p></p>","tags":["OOP1-quiz"]},{"location":"lektioner/oop/v04/lektion10/quiz_properties/","title":"Quiz Properties","text":"<p>H\u00e4r kommer n\u00e5gra fr\u00e5gor p\u00e5 temat Properties i C#</p> <p>1) Vad \u00e4r en property i C#?</p>  En metod som alltid m\u00e5ste ta parametrar  Ett privat f\u00e4lt som aldrig kan n\u00e5s  En medlem som kapslar in f\u00e4lt och exponerar dem via <code>get</code>/<code>set</code> <p></p> <p>2) Vilka av f\u00f6ljande \u00e4r giltiga auto-implementerade properties?</p>  public string Name { get; set; }  public string Name;  public int Age { get; private set; }  private bool IsOk { } <p></p> <p>3) Vad kallas en property med endast <code>get</code>?</p>  Read-only property  Write-only property  Auto-property <p></p> <p>4) Vad kallas en property med endast <code>set</code>?</p>  Read-only property  Write-only property  Static property <p></p> <p>5) Skriv en property f\u00f6r <code>Score</code> (int) med b\u00e5de get och set (auto-implementerad).</p> <pre><code></code></pre> <p></p> <p>6) Vilka \u00e4r syften med att anv\u00e4nda properties i C#?</p>  Kapsla in f\u00e4lt och kontrollera \u00e5tkomst  M\u00f6jlighet att l\u00e4gga till validering/logik vid l\u00e4sning/skrivning  G\u00f6ra koden l\u00e5ngsammare och mer komplicerad  Att g\u00f6ra livet surt f\u00f6r nyb\u00f6rjare <p></p> <p>R\u00e4tta alla</p> <p></p>","tags":["OOP1-quiz"]},{"location":"lektioner/oop/v04/lektion10/slides/02-slide/","title":"Slide 2","text":""},{"location":"lektioner/oop/v04/lektion10/slides/02-slide/#properties","title":"Properties","text":"<ul> <li>Ett modernt s\u00e4tt att skapa get- och set-metoder</li> <li>Ser ut som f\u00e4lt men \u00e4r egentligen metoder</li> <li>Anv\u00e4nds i all professionell kod</li> <li>Kan ha olika accesslevel f\u00f6r get och set</li> </ul> <pre><code>class TodoItem\n{\n    private string description;\n    public string Description\n    {\n        get { return description; }\n        set { description = value; }\n    }\n\n    private bool isDone;\n\n    public bool IsDone\n    {\n        get { return isDone; }\n        private set { isDone = value; } // Privat set-metod\n    }\n}\n</code></pre>"},{"location":"lektioner/oop/v04/lektion10/slides/03-slide/","title":"Slide 3","text":""},{"location":"lektioner/oop/v04/lektion10/slides/03-slide/#konstruktorer","title":"Konstruktorer","text":"<ul> <li>Specialmetod som k\u00f6rs n\u00e4r ett objekt skapas</li> <li>Anv\u00e4nds f\u00f6r att initiera objektets f\u00e4lt/egenskaper</li> <li>Ser ofta till s\u00e5 att ett objekt inte kan skapas i ett \"ogiltigt\" tillst\u00e5nd</li> <li>Eller, att s\u00e4tta \"default\"-v\u00e4rden p\u00e5 f\u00e4lt/egenskaper</li> <li>En klass kan ha flera konstruktorer med olika parametrar (precis som metoder)</li> <li>this och base \u00e4r keywords som blir relevanta i konstruktorsammanhang</li> </ul>"},{"location":"lektioner/oop/v04/lektion11/","title":"Lektion 11 - Projektstruktur och paket","text":"<p>Moment: <code>Namespaces</code>, <code>Arv</code>, <code>Object som alla klassers basklass</code>, <code>Polymorfism</code></p>"},{"location":"lektioner/oop/v04/lektion11/#dagens-innehall","title":"Dagens inneh\u00e5ll","text":"<ul> <li>N\u00e5gra kvarvarande saker om konstruktorer<ul> <li>Primary Constructors</li> <li>this, base</li> </ul> </li> <li>Namespaces och allm\u00e4n ordning och reda (1h)</li> <li>Arv, polymorfism, object, overrides (3h)</li> <li>Om tid finns: static</li> </ul>"},{"location":"lektioner/oop/v04/lektion11/#lankar","title":"L\u00e4nkar","text":"<ul> <li>Microsoft: Namespaces</li> <li>Material: Primary Constructors</li> <li>Material: Polymorfism</li> </ul>"},{"location":"lektioner/oop/v04/lektion11/#arv-vad-ar-det","title":"Arv - Vad \u00e4r det?","text":"<ul> <li>Fundamental del i Objektorienterad programmering</li> <li>En klass kan \u00e4rva fr\u00e5n en annan klass vilket g\u00f6r att den kan anv\u00e4nda dess egenskaper och metoder</li> <li>Arv \u00e4r ett bra s\u00e4tt att \u00e5teranv\u00e4nda kod, eller f\u00f6r att skapa en gemensam bas f\u00f6r liknande klasser</li> <li>Exempel p\u00e5 inbyggda arv i C#:<ul> <li>Alla klasser \u00e4rver fr\u00e5n <code>object</code>-klassen</li> <li><code>Exception</code>-klassen \u00e4r basklass f\u00f6r alla undantagsklasser</li> <li><code>Stream</code>-klassen \u00e4r basklass f\u00f6r olika typer av str\u00f6mmar (t.ex. <code>FileStream</code>, <code>MemoryStream</code>)</li> </ul> </li> <li>Exempel p\u00e5 andra m\u00f6jliga arv:<ul> <li>En <code>Discount</code>-klass kan ha flera subklasser som <code>PercentageDiscount</code> och <code>FixedAmountDiscount</code></li> <li>En <code>Report</code>-klass kan ha flera subklasser som <code>PdfReport</code>, <code>ExcelReport</code>, <code>HtmlReport</code></li> </ul> </li> </ul>"},{"location":"lektioner/oop/v04/lektion11/#namespaces","title":"Namespaces","text":"<ul> <li>Namespaces \u00e4r ett s\u00e4tt att organisera klasser och undvika namnkonflikter</li> <li>Ett namespace \u00e4r lite som en mappstruktur f\u00f6r klasser, l\u00e5dor vi kan l\u00e4gga klasser i som h\u00f6r ihop</li> <li>Vi kan skapa egna namespaces med <code>namespace</code>-nyckelordet</li> </ul>"},{"location":"lektioner/oop/v04/lektion11/exercises11_01/","title":"\u00d6vning 11 Arv","text":"<p>Se avsnittet om arv f\u00f6r att se hur det skrivs i kod.</p> <p>I m\u00e5nga system \u00e4r det vanligt att det finns en basklass som inneh\u00e5ller tex ett ID. L\u00e5t oss skapa en basklass <code>Entity</code> som inneh\u00e5ller ett ID, och l\u00e5t sedan <code>Contact</code> \u00e4rva fr\u00e5n den.</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v04/lektion11/exercises11_01/#11-basklassen-entity","title":"1.1 - Basklassen Entity","text":"<p>Klassen <code>Entity</code> ska ha: * En publik property <code>Id</code> med bara en <code>get</code>, typen ska vara <code>int</code> * En konstruktor som med hj\u00e4lp av Random s\u00e4tter ett slumpm\u00e4ssigt v\u00e4rde p\u00e5 <code>Id</code> mellan 1 och 1 000 000 * L\u00e5t nu <code>Contact</code> \u00e4rva fr\u00e5n <code>Entity</code> * Uppdatera koden i <code>Main</code>-metoden s\u00e5 att den skriver ut <code>Id</code> n\u00e4r den listar kontakter</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v04/lektion11/exercises11_01/#12-propertyn-createdat-i-entity-klassen-istallet","title":"1.2 - Propertyn CreatedAt i Entity-klassen ist\u00e4llet","text":"<p>I och med att <code>CreatedAt</code> \u00e4r en property som \u00e4r relevant f\u00f6r m\u00e5nga objekt, s\u00e5 kan den med f\u00f6rdel flyttas upp till basklassen <code>Entity</code>:</p> <ul> <li>Flytta propertyn <code>CreatedAt</code> till <code>Entity</code>-klassen ist\u00e4llet f\u00f6r i <code>Contact</code>.</li> <li>Din kod i <code>Main</code>-metoden ska fortfarande fungera som tidigare.</li> </ul>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v04/lektion11/exercises11_01/#2-en-ny-property-och-metod-i-basklassen","title":"2. - En ny property och metod i basklassen","text":"<p>Det kan ocks\u00e5 vara bra att veta n\u00e4r en viss entitet senast uppdaterades. L\u00e5t oss l\u00e4gga till en s\u00e5dan property och en metod som uppdaterar den:</p> <ul> <li>L\u00e4gg till en property <code>UpdatedAt</code> av typen <code>DateTime</code> med en <code>get</code> och en <code>private set</code>.</li> <li>L\u00e4gg till metoden <code>SetUpdatedAt()</code> i <code>Entity</code>-klassen som s\u00e4tter <code>UpdatedAt</code> till <code>DateTime.Now</code>.</li> <li>Du kan nu kalla p\u00e5 <code>SetUpdatedAt()</code> fr\u00e5n <code>Contact</code>-klassen n\u00e4r du vill uppdatera <code>UpdatedAt</code>. Exempelvis kan du kalla p\u00e5 den i <code>set</code>-delen av <code>Name</code> propertyn, samt n\u00e4r du \u00e4ndrar <code>Phone</code> propertyn.</li> <li>Testa att skriva ut <code>UpdatedAt</code> i <code>Main</code>-metoden efter att du \u00e4ndrat en kontakts namn eller telefonnummer (Om den funktionaliteten finns. Om den inte finns, hur kan du snabbt testa denna funktionalitet i kod?).</li> </ul>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v04/lektion11/exercises11_01/#3-virtual-och-override","title":"3. - Virtual och override","text":"<p>Ibland vill man kunna \u00e4ndra beteendet i en metod i en basklass. Detta g\u00f6rs med hj\u00e4lp av <code>virtual</code> och <code>override</code>. L\u00e5t oss s\u00e4ga att vi vill kunna skriva ut en kontakt p\u00e5 ett annat s\u00e4tt \u00e4n standarden som <code>ToString()</code> ger oss:</p> <ul> <li>Overridea <code>ToString()</code>-metoden i <code>Entity</code>-klassen s\u00e5 att den returnerar en str\u00e4ng med <code>Id</code>, <code>CreatedAt</code> och <code>UpdatedAt</code>.</li> <li>Overridea <code>ToString()</code>-metoden i <code>Contact</code>-klassen s\u00e5 att den returnerar en str\u00e4ng med <code>Id</code>, <code>Name</code>, <code>Phone</code>, <code>CreatedAt</code> och <code>UpdatedAt</code>.</li> <li>Testa att skriva ut en kontakt i <code>Main</code>-metoden med hj\u00e4lp av <code>Console.WriteLine(contact)</code> d\u00e4r <code>contact</code> \u00e4r en instans av <code>Contact</code>.</li> </ul>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v04/lektion11/exercises11_01/#4-en-ny-klass-baserad-pa-entity","title":"4. En ny klass baserad p\u00e5 Entity","text":"<p>Kan du komma p\u00e5 n\u00e5gon mer klass som skulle kunna \u00e4rva fr\u00e5n <code>Entity</code>? Skapa en s\u00e5dan klass och implementera den med n\u00e5gra properties och metoder. Testa sedan att skapa en instans av den i <code>Main</code>-metoden och skriv ut dess information. Exempel p\u00e5 klasser som skulle kunna vara relevanta i en adressbok \u00e4r:</p> <ul> <li>Relation (f\u00f6r att representera relationer mellan kontakter)</li> <li>Address (f\u00f6r att representera adresser kopplade till kontakter)</li> <li>Group (f\u00f6r att representera grupper av kontakter)</li> </ul>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v04/lektion11/quiz_inheritance/","title":"Quiz Arv","text":"<p>H\u00e4r kommer n\u00e5gra fr\u00e5gor p\u00e5 temat Arv i C# (utan abstrakta klasser)</p> <p>1) Vad \u00e4r syftet med arv i C#?</p>  Att till\u00e5ta flera basklasser per klass  Att g\u00f6ra alla f\u00e4lt tillg\u00e4ngliga i alla klasser  \u00c5teranv\u00e4nda kod genom att l\u00e5ta en klass \u00e4rva egenskaper/beteenden fr\u00e5n en basklass <p></p> <p>2) Vilka av f\u00f6ljande beskriver en rimlig is-a-relation f\u00f6r arv?</p> <code>Hund</code> \u00e4r ett <code>Djur</code> <code>Motor</code> \u00e4r en <code>Bil</code> <code>Rektangel</code> \u00e4r en <code>Form</code> <code>Adressbok</code> \u00e4r en <code>Kontakt</code> <p></p> <p>3) Hur skriver du f\u00f6rsta raden i en klassdeklaration d\u00e4r klassen Dog \u00e4rver klassen Animal.</p> <pre><code></code></pre> <p></p> <p>4) Hur g\u00f6r man s\u00e5 att en metod i basklassen kan ers\u00e4ttas i en subklass?</p>  M\u00e4rk basmetoden med <code>public</code> och subklassens med <code>new</code>  M\u00e4rk basmetoden <code>virtual</code> och subklassens metod <code>override</code>  Anv\u00e4nd <code>sealed</code> p\u00e5 basmetoden <p></p> <p>5) I vilken ordning k\u00f6rs konstruktorer n\u00e4r ett <code>Dog</code>-objekt skapas som \u00e4rver fr\u00e5n <code>Animal</code>?</p>  F\u00f6rst <code>Dog</code>, sedan <code>Animal</code>  F\u00f6rst <code>Animal</code>, sedan <code>Dog</code>  Ordningen \u00e4r slumpm\u00e4ssig <p></p> <p>7) Vad g\u00e4ller f\u00f6r <code>protected</code> medlemmar i en basklass?</p>  De \u00e4r \u00e5tkomliga i basklassen sj\u00e4lv  De \u00e4r \u00e5tkomliga i subklasser  De \u00e4r \u00e5tkomliga fr\u00e5n vilken klass som helst  De \u00e4r endast \u00e5tkomliga via instanser utanf\u00f6r hierarkin <p></p> <p>8) Vad st\u00e4mmer om arv f\u00f6r klasser i C#?</p>  En klass kan \u00e4rva fr\u00e5n flera basklasser  En klass kan \u00e4rva fr\u00e5n exakt en basklass  Arv m\u00e5ste anv\u00e4ndas <p></p> <p>R\u00e4tta alla</p> <p></p>","tags":["OOP1-quiz"]},{"location":"lektioner/oop/v04/lektion12/","title":"Lektion 12","text":"<p>Moment: <code>Felhantering</code>, <code>Exceptions</code></p>"},{"location":"lektioner/oop/v04/lektion12/#dagens-innehall","title":"Dagens inneh\u00e5ll","text":"<ul> <li>Felhantering och Exceptions</li> <li>\u00d6vningar resten av dagen</li> </ul>"},{"location":"lektioner/oop/v04/lektion12/#quiz","title":"Quiz","text":"<ul> <li>Exceptions</li> </ul>"},{"location":"lektioner/oop/v04/lektion12/#lankar","title":"L\u00e4nkar","text":"<ul> <li>Material: Exceptions'</li> <li>Microsoft Docs: Exception Handling</li> <li>\u00d6vningar</li> </ul>"},{"location":"lektioner/oop/v04/lektion12/exercises12_1/","title":"\u00d6vning 12 Exceptions","text":"<p>L\u00e4s avsnittet om Exceptions om du undrar hur du skriver koden.</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v04/lektion12/exercises12_1/#del-1-fanga-undantag","title":"Del 1 - F\u00e5nga undantag","text":"","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v04/lektion12/exercises12_1/#forberedelser","title":"F\u00f6rberedelser","text":"<ol> <li>Skapa ett nytt konsolprojekt med <code>dotnet new console --use-program-main</code> f\u00f6r att skapa ett projekt med en main-metod.</li> <li>Ett f\u00f6rslag \u00e4r att g\u00f6ra \u00f6vning 1-3 i separata metoder som du anropar fr\u00e5n Main, f\u00f6r att h\u00e5lla koden organiserad. Du kan d\u00e5 enkelt kommentera ut en metoden f\u00f6r att inte k\u00f6ra den delen av koden. Exempel:     <pre><code>static void Main()\n{\n    //Exercise1(); // Hoppa \u00f6ver \u00f6vning 1\n    Exercise2();\n    Exercise3();\n}\n\nstatic void Exercise1()\n{\n    // kod f\u00f6r \u00f6vning 1\n}\n\nstatic void Exercise2()\n{\n    // kod f\u00f6r \u00f6vning 2\n}\n\nstatic void Exercise3()\n{\n    // kod f\u00f6r \u00f6vning 3\n}\n</code></pre></li> </ol>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v04/lektion12/exercises12_1/#ovning-1-konvertera-strang-till-tal","title":"\u00d6vning 1 - Konvertera str\u00e4ng till tal","text":"<p>Skriv ett program som ber anv\u00e4ndaren om ett tal i form av en str\u00e4ng och f\u00f6rs\u00f6ker konvertera det till ett heltal.</p> <ul> <li>Anv\u00e4nd try/catch f\u00f6r att hantera FormatException om str\u00e4ngen inte \u00e4r ett giltigt tal.</li> <li>L\u00e4gg \u00e4ven till en OverflowException-hantering om talet \u00e4r f\u00f6r stort eller f\u00f6r litet f\u00f6r en int.</li> <li>Skriv ut ett trevligt felmeddelande i b\u00e5da fallen.</li> <li>Testa att skapa en loop som forts\u00e4tter fr\u00e5ga anv\u00e4ndaren om ett tal tills en giltig inmatning ges.</li> </ul> Startkod <pre><code>Console.Write(\"Skriv in ett heltal: \");\nstring input = Console.ReadLine();\n\nint tal = int.Parse(input);\nConsole.WriteLine($\"Du skrev in talet: {tal}\");\n</code></pre>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v04/lektion12/exercises12_1/#ovning-2-dela-tva-tal","title":"\u00d6vning 2 - Dela tv\u00e5 tal","text":"<p>Skriv ett program som ber anv\u00e4ndaren om tv\u00e5 heltal och sedan dividerar det f\u00f6rsta med det andra.</p> <ol> <li>Prova att skriva in n\u00e5got annat \u00e4n ett heltal f\u00f6r att se vad som h\u00e4nder. L\u00e4s felmeddelandet.</li> <li>Prova att dela n\u00e5got med noll f\u00f6r att se vad som h\u00e4nder. L\u00e4s felmeddelandet.</li> <li>F\u00f6rst, l\u00e4gg in en try/catch runt koden f\u00f6r att f\u00e5nga alla undantag (Exception).</li> <li>Skriv ut ett felmeddelande i catch-blocket, att n\u00e5got gick det. </li> <li>Anv\u00e4nd nu try med tv\u00e5 catch-block f\u00f6r att f\u00e5nga DivideByZeroException om anv\u00e4ndaren skriver in noll.</li> <li>L\u00e4gg \u00e4ven till en FormatException-hantering om anv\u00e4ndaren skriver n\u00e5got som inte \u00e4r ett heltal.</li> <li>Skriv ut olika felmeddelanden i de olika catch-blocken, och testa programmet med olika felaktiga inmatningar igen.</li> </ol> Startkod <pre><code>Console.Write(\"Skriv in ett heltal: \");\nint tal1 = int.Parse(Console.ReadLine());\n\nConsole.Write(\"Skriv in ett heltal till: \");\nint tal2 = int.Parse(Console.ReadLine());\n\nint resultat = tal1 / tal2;\nConsole.WriteLine($\"Resultatet blev: {resultat}\");\n</code></pre>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v04/lektion12/exercises12_1/#ovning-3-las-in-en-fil","title":"\u00d6vning 3 - L\u00e4s in en fil","text":"<p>Skriv ett program som f\u00f6rs\u00f6ker l\u00e4sa en textfil fr\u00e5n disk. Vad h\u00e4nder om du k\u00f6r progammet som det \u00e4r nu, och filen inte finns? Prova att skriva namnet p\u00e5 en fil som finns (exempelvis Program.cs!) ocks\u00e5 f\u00f6r att se att det fungerar.</p> <ul> <li>Anv\u00e4nd try/catch f\u00f6r att hantera situationen om filen inte finns (FileNotFoundException).</li> <li>Testa ocks\u00e5 att l\u00e4gga till en UnauthorizedAccessException ifall programmet inte har r\u00e4ttigheter att l\u00e4sa filen.</li> <li>L\u00e5t programmet skriva ut ett v\u00e4nligt felmeddelande i b\u00e5da fallen.</li> </ul> Startkod <pre><code>Console.Write(\"Ange filnamn: \");\nstring filnamn = Console.ReadLine();\n\nstring inneh\u00e5ll = File.ReadAllText(filnamn);\nConsole.WriteLine(\"Filens inneh\u00e5ll:\");\nConsole.WriteLine(inneh\u00e5ll);\n</code></pre>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v04/lektion12/exercises12_1/#del-2-kasta-och-fanga-undantag","title":"Del 2 - Kasta och f\u00e5nga undantag","text":"","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v04/lektion12/exercises12_1/#ovning-1-bankkonto","title":"\u00d6vning 1 - Bankkonto","text":"<p>Skapa klassen <code>BankAccount</code> som inneh\u00e5ller metoden <code>Withdraw(int amount)</code>.</p> <ul> <li>Om saldot inte r\u00e4cker till ska metoden kasta en InvalidOperationException.</li> <li>I huvudprogrammet anropar du Withdraw inuti en try/catch.</li> <li>L\u00e4gg till en finally som alltid skriver ut det aktuella saldot oavsett om uttaget gick igenom eller inte.</li> </ul> Startkod <pre><code>class Program\n{\n    static void Main()\n    {\n        BankAccount konto = new BankAccount(1000);\n\n        Console.Write(\"Hur mycket vill du ta ut? \");\n        int amount = int.Parse(Console.ReadLine());\n\n        konto.Withdraw(amount);\n\n        Console.WriteLine($\"Ditt saldo \u00e4r nu: {konto.Balance}\");\n    }\n}\n\nclass BankAccount\n{\n    public int Balance { get; private set; }\n\n    public BankAccount(int saldo)\n    {\n        Balance = saldo;\n    }\n\n    public void Withdraw(int amount)\n    {\n        Balance -= amount; // H\u00e4r ska det egentligen skyddas med exception\n    }\n}\n</code></pre>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v04/lektion12/exercises12_1/#ovning-2-bankkonto-med-insattning","title":"\u00d6vning 2 - Bankkonto med ins\u00e4ttning","text":"<p>L\u00e4gg till metoden Deposit(int amount) i din klass <code>BankAccount</code>. Metoden skall s\u00e4tta in m\u00e4ngden <code>amount</code> till Balance. Fundera p\u00e5 vilka fel som kan uppst\u00e5 n\u00e4r n\u00e5gon anv\u00e4nder den metoden. Var \u00e4r det rimligt att kasta undantag? Vilket undantag passar b\u00e4st? </p> Lista p\u00e5 vanliga exceptions <ul> <li>ArgumentException: N\u00e4r ett metodargument inte \u00e4r giltigt (fel v\u00e4rde).</li> <li>ArgumentNullException: N\u00e4r ett metodargument som inte f\u00e5r vara null faktiskt \u00e4r null.</li> <li>ArgumentOutOfRangeException: N\u00e4r ett argument ligger utanf\u00f6r det till\u00e5tna intervallet.</li> <li>InvalidOperationException: N\u00e4r en metod anropas i ett l\u00e4ge d\u00e4r den inte \u00e4r giltig.</li> <li>NullReferenceException: N\u00e4r man f\u00f6rs\u00f6ker anv\u00e4nda en referens som \u00e4r null.</li> <li>IndexOutOfRangeException: N\u00e4r man f\u00f6rs\u00f6ker n\u00e5 ett element utanf\u00f6r arrayens/listans gr\u00e4nser.</li> <li>FormatException: N\u00e4r en str\u00e4ng inte kan konverteras till r\u00e4tt format.</li> <li>DivideByZeroException: N\u00e4r man f\u00f6rs\u00f6ker dividera ett heltal med noll.</li> <li>OverflowException: N\u00e4r en ber\u00e4kning ger ett resultat som \u00e4r f\u00f6r stort eller f\u00f6r litet f\u00f6r datatypen.</li> </ul>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v04/lektion12/exercises12_1/#ovning-3-hindra-skapandet-av-contacts-med-tomt-namn","title":"\u00d6vning 3 - Hindra skapandet av Contacts med tomt namn","text":"<p>I din tidigare klass <code>Contact</code>:</p> <ul> <li>Kasta ett undantag (ArgumentException) i konstruktorn eller i en propertys set-metod om namnet \u00e4r tomt eller null.</li> <li>K\u00f6r programmet och prova att skapa en Contact med tomt namn.</li> <li>Se nu till att f\u00e5nga undantaget i huvudprogrammet med try/catch och skriv ut ett felmeddelande.</li> </ul> <p>Att kasts ett exception i en konstruktor eller property \u00e4r ett s\u00e4tt att skydda att objekt hamnar i ett ogiltigt tillst\u00e5nd, men det \u00e4r b\u00e4ttre att se till s\u00e5 att det inte h\u00e4nder genom att validera indata innan objektet skapas. Hur skulle du kunna g\u00f6ra det?</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v04/lektion12/exercises12_1/#ovning-4-hitta-anvandare","title":"\u00d6vning 4 - Hitta anv\u00e4ndare","text":"<p>Utg\u00e5 fr\u00e5n startkoden nedan.</p> <ul> <li>Skriv klart metoden <code>FindUser(string username)</code>. Den skall hitta anv\u00e4ndaren i listan.</li> <li>Om anv\u00e4ndaren inte finns, kasta ett KeyNotFoundException och hantera det p\u00e5 n\u00e5got s\u00e4tt.</li> </ul> <p>Diskutera med dig sj\u00e4lv eller andra: \u00c4r det b\u00e4st att kasta undantag n\u00e4r n\u00e5got inte hittas, eller \u00e4r det b\u00e4ttre att returnera null eller ist\u00e4llet g\u00f6ra en metod i stil med <code>TryFindUser</code> som returnerar en bool och anv\u00e4nder en out-variabel?</p> Startkod <pre><code>class Program\n{\n    static List&lt;User&gt; users = [\n        new(){ Username = \"alice\" },\n        new(){ Username = \"bob\" },\n        new(){ Username = \"charlie\" }\n    ];\n\n    static void Main()\n    {\n        Console.Write(\"Ange anv\u00e4ndarnamn att hitta: \");\n        string username = Console.ReadLine();\n\n        User user = FindUser(username);\n        Console.WriteLine($\"Hittade anv\u00e4ndaren: {user.Username} med ID {user.Id}\");\n    }\n\n    static User FindUser(string username)\n    {\n        throw new NotImplementedException(); // Implementera s\u00f6kningen h\u00e4r\n    }\n}\n\nclass User\n{\n    public int Id { get; set; } = Random.Shared.Next(1, 100);\n    public string Username { get; set; }\n}\n</code></pre>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v04/lektion12/quiz_exceptions/","title":"Quiz Exceptions","text":"<p>H\u00e4r kommer n\u00e5gra fr\u00e5gor p\u00e5 temat Exceptions i C#</p> <p>1) Vad \u00e4r syftet med exceptions i C#?</p>  Att avbryta loopar n\u00e4r n\u00e5got g\u00e5tr fel  Att signalera fel/ov\u00e4ntade tillst\u00e5nd och avbryta normalt fl\u00f6de  Att logga fel <p></p> <p>2) Vilka av f\u00f6ljande \u00e4r vanliga inbyggda exceptiontyper?</p>  ArgumentException  InvalidOperationException  FormatException  ConsoleException <p></p> <p>3) Vad anv\u00e4nds <code>finally</code>-blocket till?</p>  Att f\u00e5nga ett specifikt exception  Att alltid k\u00f6ra en viss bit kod oavsett om fel intr\u00e4ffar  Att skapa ett nytt exception <p></p> <p>4) M\u00e5ste du alltid f\u00e5nga (<code>catch</code>) ett exception i samma metod d\u00e4r det uppst\u00e5r?</p>  Ja, alltid  Nej, det \"bubblar upp\" till en niv\u00e5 d\u00e4r det kan hanteras  Endast i async-metoder <p></p> <p>5) I vilken ordning b\u00f6r flera <code>catch</code>-block placeras?</p>  Alfabetisk ordning  Mest specifika typer f\u00f6rst, mer generella (t.ex. <code>Exception</code>) sist  Generella f\u00f6rst, specifika sist  Spelar ingen roll <p></p> <p>6) Vilka \u00e4r bra praxis vid anv\u00e4ndning av exceptions?</p>  F\u00e5nga bara s\u00e5dant du kan hantera, l\u00e5t annars bubbla upp  Kasta r\u00e4tt typ (t.ex. <code>ArgumentException</code> f\u00f6r ogiltiga parametrar)  Anv\u00e4nd alltid <code>catch (Exception)</code> f\u00f6r enkelhet <p></p> <p>R\u00e4tta alla</p> <p></p>","tags":["OOP1-quiz"]},{"location":"lektioner/oop/v05/lektion13/","title":"Lektion 13","text":""},{"location":"lektioner/oop/v05/lektion13/#innehall","title":"Inneh\u00e5ll","text":"<ul> <li>Lab #2</li> </ul>"},{"location":"lektioner/oop/v06/lektion14/","title":"Lektion 14","text":"<p>Moment: <code>Enums</code></p>"},{"location":"lektioner/oop/v06/lektion14/#innehall","title":"Inneh\u00e5ll","text":"<ul> <li>Veckans enk\u00e4t!</li> <li>G\u00e5 igenom provet</li> <li>Prata om Lab #2</li> <li>Enums</li> <li>CRC-workshop och l\u00e4xa!</li> </ul>"},{"location":"lektioner/oop/v06/lektion14/#lankar","title":"L\u00e4nkar","text":"<ul> <li>Material: Enums</li> </ul>"},{"location":"lektioner/oop/v06/lektion14/exercises14_01/","title":"\u00d6vning 14 Enums","text":"","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v06/lektion14/exercises14_01/#1-en-enum-for-sasonger","title":"1. En enum f\u00f6r s\u00e4songer","text":"<ol> <li>Skapa en enum som heter <code>Season</code> med v\u00e4rdena <code>Spring</code>, <code>Summer</code>, <code>Autumn</code>, och <code>Winter</code>.</li> <li>Prova att skapa en variabel av typen <code>Season</code> och tilldela den ett v\u00e4rde.</li> <li>Skriv ut detta v\u00e4rde till konsolen.</li> </ol>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v06/lektion14/exercises14_01/#2-en-klass-med-sasongsegenskap","title":"2. En klass med s\u00e4songsegenskap","text":"<ol> <li>Skapa en klass som du kallar <code>SeasonalActivity</code> med en egenskap <code>Season</code> av typen <code>Season</code> (allts\u00e5 den du skapade i f\u00f6reg\u00e5ende \u00f6vning) och en egenskap <code>Activity</code> av typen <code>string</code>.</li> <li>Skapa en konstruktor som tar emot b\u00e5da egenskaperna och s\u00e4tter dem.</li> <li>Skapa en instans av <code>SeasonalActivity</code> f\u00f6r varje s\u00e4song med en passande aktivitet (t.ex. \"Skiing\" f\u00f6r Winter).</li> <li>Skriv ut alla aktiviteter med deras s\u00e4songer till konsolen.</li> </ol>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v06/lektion14/exercises14_01/#2-en-enum-for-menyval","title":"2. En enum f\u00f6r menyval","text":"<ol> <li>Skapa en enum som heter <code>MenuOption</code> med v\u00e4rdena <code>StartGame</code>, <code>LoadGame</code>, <code>Settings</code>, och <code>Exit</code>.</li> <li>Skapa metoden <code>HandleMenuOption</code> som tar emot en <code>MenuOption</code> som parameter och skriver ut en passande meddelande f\u00f6r varje menyval.</li> <li>Anropa denna metod med olika <code>MenuOption</code> v\u00e4rden f\u00f6r att testa den.</li> <li>Se om du kan l\u00e4sa in en int fr\u00e5n anv\u00e4ndaren och konvertera den till en <code>MenuOption</code> f\u00f6r att anropa <code>HandleMenuOption</code>.</li> </ol>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v06/lektion14/exercises14_01/#3-en-blog-artikel","title":"3. En blog-artikel","text":"<ol> <li>Skapa en klass som heter <code>BlogPost</code> med string-egenskaperna <code>Title</code> och <code>Content</code>.</li> <li>Skapa en enum som heter <code>PostState</code> med v\u00e4rdena <code>Draft</code>, <code>Published</code>, och <code>Archived</code>.</li> <li>L\u00e4gg till en egenskap <code>State</code> av typen <code>PostState</code> i <code>BlogPost</code>.</li> <li>Skapa en konstruktor som tar emot <code>Title</code>, <code>Content</code>. State skall s\u00e4ttas till <code>Draft</code> som standard.</li> <li>Skapa metoder <code>Publish</code> och <code>Archive</code> som \u00e4ndrar <code>State</code> till <code>Published</code> respektive <code>Archived</code>.</li> <li>Skapa en instans av <code>BlogPost</code>, publicera den, och arkivera den, och skriv ut dess tillst\u00e5nd efter varje \u00e4ndring.</li> <li>Extra: Hur skulle du g\u00f6ra om du vill styra s\u00e4ttet en post kan g\u00e5 fr\u00e5n ett tillst\u00e5nd till ett annat (t.ex. en post kan bara g\u00e5 fr\u00e5n <code>Draft</code> till <code>Published</code>, och fr\u00e5n <code>Published</code> till <code>Archived</code>)?</li> </ol>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v06/lektion14/exercises14_02/","title":"\u00d6vning 14 Refaktorering","text":"<p>Dags att refaktorera lite kod s\u00e5 att den blir mer objektorienterad och h\u00e5ller sig b\u00e4ttre till SRP (Single Responsibility Principle).  </p> <p>F\u00f6ljande klasser \u00e4r s\u00e5 kallade dom\u00e4nklasser, som skall inneh\u00e5lla data och beteenden som h\u00f6r ihop med datan, specifikt f\u00f6r en restaurangmeny och best\u00e4llning.  </p> <p>Problemet just nu \u00e4r att de ocks\u00e5 inneh\u00e5ller kod f\u00f6r att l\u00e4sa in data fr\u00e5n anv\u00e4ndaren och skriva ut data till konsolen, vilket bryter mot SRP (eftersom de d\u00e5 ocks\u00e5 h\u00e5ller p\u00e5 med anv\u00e4ndargr\u00e4nssnitt).  </p> <p>Ditt uppdrag h\u00e4r \u00e4r att f\u00e5 bort all in- och utmatning fr\u00e5n dessa klasser. Dvs, MenuItem och Order skall inte l\u00e4ngre ha n\u00e5gra Console.ReadLine eller Console.WriteLine i sig. All in- och utmatning skall ist\u00e4llet ske i Program.cs.  </p> Startkod<pre><code>class MenuItem\n{\n    public string Name { get; private set; }\n    public decimal Price { get; private set; }\n\n    public MenuItem(string name, decimal price)\n    {\n        Name = name;\n        Price = price;\n    }\n\n    public void Show()\n    {\n        Console.WriteLine($\"{Name} - {Price} kr\");\n    }\n}\n\nclass Order\n{\n    public string EatOptions { get; set; }\n    public List&lt;MenuItem&gt; _items = [];\n\n    public void EatHereOrTakeAway()\n    {\n        Console.WriteLine(\"V\u00e4lj alternativ\");\n        Console.WriteLine(\"1. \u00c4ta h\u00e4r\");\n        Console.WriteLine(\"2. Ta med\");\n\n        int val = int.Parse(Console.ReadLine());\n\n        if (val == 1)\n        {\n            EatOptions = \"\u00c4ta h\u00e4r\";\n        }\n        else\n        {\n            EatOptions = \"Ta med\";\n        }\n\n        Console.WriteLine($\"Du valde att: {EatOptions.ToLower()}\");\n    }\n\n    public void AddItem(List&lt;MenuItem&gt; menu)\n    {\n        for (int i = 0; i &lt; menu.Count; i++)\n        {\n            Console.Write($\"{i + 1}.\");\n            menu[i].Show();\n        }\n\n        Console.Write(\"Ange r\u00e4ttens nummer: \");\n        string? nr = Console.ReadLine();\n\n        if (!int.TryParse(nr, out int index) || index &lt; 1 || index &gt; menu.Count)\n        {\n            Console.WriteLine(\"Ogiltigt val!\");\n            return;\n        }\n\n        _items.Add(menu[index - 1]);\n\n        Console.Write($\"Lade till: \");\n        menu[index - 1].Show();\n    }\n\n    public void ShowTotal()\n    {\n        decimal total = 0;\n        foreach (var item in _items)\n        {\n            total += item.Price;\n        }\n        Console.WriteLine($\"Totalt pris: {total} kr\");\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        List&lt;MenuItem&gt; menu = [\n            new MenuItem(\"Pizza\", 80),\n            new MenuItem(\"Pasta\", 70),\n            new MenuItem(\"Salad\", 50)\n        ];\n\n        var order = new Order();\n\n        order.EatHereOrTakeAway();\n\n        do\n        {\n            order.AddItem(menu);\n            Console.WriteLine(\"Vill du l\u00e4gga till en r\u00e4tt till? (j/n) \");\n        } while (Console.ReadLine()?.ToLower() == \"j\");\n\n        order.ShowTotal();\n    }\n}\n</code></pre>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v06/lektion14/exercises14_02/#extra-en-enum-for-matkategori","title":"Extra: En enum f\u00f6r matkategori","text":"<ol> <li>Skapa en enum som heter <code>FoodCategory</code> med v\u00e4rdena <code>Appetizer</code>, <code>MainCourse</code>, <code>Dessert</code>, och <code>Beverage</code>.</li> <li>L\u00e4gg till en egenskap <code>Category</code> av typen <code>FoodCategory</code> i <code>MenuItem</code>.</li> <li>Uppdatera konstruktorn i <code>MenuItem</code> f\u00f6r att ta emot en <code>FoodCategory</code> parameter och s\u00e4tt egenskapen.</li> <li>Uppdatera skapandet av <code>MenuItem</code> objekt i <code>Program.Main</code> f\u00f6r att inkludera kategorin.</li> <li>Visa matr\u00e4tternas kategori n\u00e4r du listar menyn.</li> <li>Extra: Kan du sortera menyn efter kategori n\u00e4r du visar den?</li> </ol>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v06/lektion14/homework/","title":"L\u00e4xa 14 Objektorienterad design","text":"<p>Systemet vi ska designa \u00e4r detta:</p> <p>T\u00e4nk dig att vi \u00e4r en kommun som vill h\u00e5lla kolla p\u00e5 jobbresor. Vi vill kunna registrera f\u00f6rare, fordon och resor. En f\u00f6rare kan g\u00f6ra flera resor. En resa kan bara genomf\u00f6ras med ett fordon, men samma fordon kan s\u00e5klart anv\u00e4ndas till flera resor. En resa har en starttidpunkt, en sluttid, en f\u00f6rare, ett fordon som anv\u00e4nts samt en str\u00e4cka i kilometer. Ett fordon har ett registeringsnummer, en modell och en f\u00f6rbrukning i liter per mil samt br\u00e4nsletyp. En f\u00f6rare har ett namn och ett personnummer.</p> <p>Optimalt vore ocks\u00e5 om det gick att f\u00e5 ut rapporter! Tex en rapport f\u00f6r en f\u00f6rare (Hur l\u00e5ngt den k\u00f6rt totalt, total br\u00e4nslef\u00f6brukning, total kostnad), en rapport f\u00f6r ett specifikt fordon (Hur l\u00e5ngt fordonet k\u00f6rt, hur mycket br\u00e4nsle som g\u00e5tt \u00e5t, total kostnad) samt en total rapport f\u00f6r alla resor (Totalt antal resor, totalt antal kilometer, total br\u00e4nslef\u00f6rbrukning, total kostnad).</p>","tags":["OOP1-L\u00e4xa"]},{"location":"lektioner/oop/v06/lektion14/homework/#forberedelser-under-lektionen","title":"F\u00f6rberedelser under lektionen","text":"<p>Vi kan jobba med detta genom att anv\u00e4nda s\u00e5 kallade CRC-kort (Class, Responsibility, Collaboration). G\u00f6r detta i grupp genom att:</p> <ul> <li>Identifiera klasser</li> <li>Identifiera ansvarsomr\u00e5den f\u00f6r varje klass (Grovt, inga detaljer!)</li> <li>Identifiera samarbeten mellan klasser (Vilka andra klasser m\u00e5ste denna klass prata med f\u00f6r att f\u00e5 sitt jobb gjort?)</li> <li>Rita upp detta p\u00e5 ett CRC-kort f\u00f6r varje klass<ul> <li>Class: Namnet p\u00e5 klassen</li> <li>Responsibility: Ansvarsomr\u00e5den</li> <li>Collaboration: Vilka andra klasser samarbetar denna klass med?</li> </ul> </li> </ul> <p>Ett s\u00e4tt att komma fram till detta \u00e4r att l\u00e5ta en person per grupp \"spela\" rollen av en viss klass. Vem h\u00e5ller kolla p\u00e5 vilken information? Vem g\u00f6r vad? Vilka andra klasser beh\u00f6ver de prata med f\u00f6r att f\u00e5 sitt jobb gjort?</p>","tags":["OOP1-L\u00e4xa"]},{"location":"lektioner/oop/v06/lektion14/homework/#laxan","title":"L\u00e4xan","text":"<p>Uppgiften g\u00e5r ut p\u00e5 att skapa dessa klasser och f\u00e5 en redan existerande kod att fungera med dessa klasser!</p> Startkod <pre><code>Driver driver = new Driver(\"Gustav\", \"123456-7890\");\nConsole.WriteLine($\"F\u00f6rare skapad: {driver.Name}, Personnummer: {driver.PersonalNumber}\");\n\nVehicle vehicle = new Vehicle(\"ABC123\", \"Volvo\", 0.7, FuelType.Diesel);\nVehicle vehicle2 = new Vehicle(\"XYZ789\", \"Toyota\", 0.5, FuelType.Gasoline);\n\n//Skapa n\u00e5gra resor\nJourney journey1 = new Journey(new DateTime(2023, 1, 1, 6, 0, 0), new DateTime(2023, 1, 1, 7, 0, 0), 100, driver, vehicle);\nJourney journey2 = new Journey(new DateTime(2023, 1, 1, 8, 0, 0), new DateTime(2023, 1, 1, 10, 0, 0), 200, driver, vehicle2);\n\n// Registrera resorna i FleetManager\nFleetManager fleetManager = new FleetManager();\nfleetManager.RegisterJourney(journey1);\nfleetManager.RegisterJourney(journey2);\n\n// Generera rapporter f\u00f6r en viss f\u00f6rare som en str\u00e4ng (Hur l\u00e5ngt den k\u00f6rt totalt, total br\u00e4nslef\u00f6brukning, total kostnad)\nConsole.WriteLine(fleetManager.GenerateReportForDriver(driver));\n\n// Mer avancerad, generera en rapport f\u00f6r ett visst fordon och ta emot det som ett VehicleReport objekt\nVehicleReport report = fleetManager.GenerateReportForVehicle(vehicle);\nConsole.WriteLine($\"Vehicle Report for {vehicle.Name} ({vehicle.RegistrationNumber}):\");\nConsole.WriteLine($\"Total Distance: {report.TotalDistance} km\");\nConsole.WriteLine($\"Total Fuel Consumption: {report.TotalFuelConsumption} liters\");\nConsole.WriteLine($\"Total Cost: {report.TotalCost} SEK\");\n\n// Generera en total rapport f\u00f6r alla fordon p\u00e5 samma s\u00e4tt som ovan\nvar totalReport = fleetManager.GenerateTotalReport();\nConsole.WriteLine(\"Total Report for all vehicles:\");\nConsole.WriteLine($\"Total Distance: {totalReport.TotalDistance} km\");\nConsole.WriteLine($\"Total Fuel Consumption: {totalReport.TotalFuelConsumption} liters\");\nConsole.WriteLine($\"Total Cost: {totalReport.TotalCost} SEK\");\n</code></pre>","tags":["OOP1-L\u00e4xa"]},{"location":"lektioner/oop/v07/lektion15/","title":"Lektion 15","text":"<p>Moment: <code>SOLID</code>, <code>Abstrakta klasser</code></p>"},{"location":"lektioner/oop/v07/lektion15/#innehall","title":"Inneh\u00e5ll","text":"<ul> <li>Veckans enk\u00e4t!</li> <li>Vi tittar p\u00e5 l\u00e4xan</li> <li>Repetition The Four Pillars of OOP</li> <li>Abstrakta klasser (Report-klass, Shape-klass)</li> <li>SOLID</li> </ul>"},{"location":"lektioner/oop/v07/lektion15/#lankar","title":"L\u00e4nkar","text":"<ul> <li>Material: SOLID</li> </ul>"},{"location":"lektioner/oop/v07/lektion15/exercises01/","title":"\u00d6vning 15 Abstrakta klasser","text":"","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v07/lektion15/exercises01/#intro-abstrakt-basklass-override","title":"Intro: abstrakt basklass + override","text":"<ul> <li>Skapa den abstrakta basklassen <code>Animal</code> med en abstrakt metod <code>MakeSound()</code>.</li> <li>Skapa tv\u00e5 subklasser <code>Dog</code> och <code>Cat</code> som \u00e4rver fr\u00e5n <code>Animal</code>.</li> <li>Implementera <code>MakeSound()</code> i b\u00e5da subklasserna s\u00e5 att <code>Dog</code> returnerar \"Woof!\" och <code>Cat</code> returnerar \"Meow!\".</li> <li>I <code>Main</code>-metoden, skapa en lista av <code>Animal</code>-objekt som inneh\u00e5ller b\u00e5de <code>Dog</code> och <code>Cat</code>.</li> <li>Loop genom listan och anropa <code>MakeSound()</code> f\u00f6r varje djur, och skriv ut resultatet till konsolen.</li> <li>Bonus: L\u00e4gg till propertyn <code>Name</code> i <code>Animal</code>-klassen och s\u00e4tt namn f\u00f6r varje djur. Skriv ut namnet tillsammans med ljudet.</li> </ul>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v07/lektion15/exercises01/#1-abstrakt-klass-for-sensorer","title":"1. Abstrakt klass f\u00f6r Sensorer","text":"<p>Vi l\u00e5tsas att vi g\u00f6r ett system f\u00f6r att hantera olika typer av sensorer i ett smart hem. </p> <ul> <li>Skapa en abstrakt basklass <code>Sensor</code> som definierar gemensamma egenskaper och metoder f\u00f6r alla sensorer.</li> <li>L\u00e4gg till en abstrakt metod <code>ReadValue()</code> som ska returnera ett v\u00e4rde fr\u00e5n sensorn av typ <code>double</code>.</li> <li>L\u00e4gg till en property <code>Unit</code> som beskriver enhet f\u00f6r sensorn (t.ex. \"Celsius\", \"Percentage\", etc.).</li> <li>Skapa tv\u00e5 subklasser <code>TemperatureSensor</code> och <code>HumiditySensor</code> som \u00e4rver fr\u00e5n <code>Sensor</code>.</li> <li><code>ReadValue()</code> i <code>TemperatureSensor</code> ska returnera ett slumpm\u00e4ssigt temperaturv\u00e4rde mellan -10 och 50 grader Celsius, </li> <li><code>ReadValue()</code> i <code>HumiditySensor</code> ska returnera ett slumpm\u00e4ssigt fuktighetsv\u00e4rde mellan 0 och 100 procent.</li> <li>I <code>Main</code>-metoden, skapa en lista av <code>Sensor</code>-objekt som inneh\u00e5ller b\u00e5de <code>TemperatureSensor</code> och <code>HumiditySensor</code>.</li> <li> <p>Loop genom listan och anropa <code>ReadValue()</code> f\u00f6r varje sensor, och skriv ut resultatet till konsolen.</p> </li> <li> <p>L\u00e4gg till ytterligare en subklass <code>LightSensor</code> som ocks\u00e5 \u00e4rver fr\u00e5n <code>Sensor</code>.</p> </li> <li><code>ReadValue()</code> i <code>LightSensor</code> ska returnera ett slumpm\u00e4ssigt ljusv\u00e4rde mellan 0 och 1000 lux.</li> <li>L\u00e4gg till <code>LightSensor</code> i listan av sensorer i <code>Main</code>-metoden och k\u00f6r programmet. Se att alla sensorer fungerar korrekt.</li> </ul>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v07/lektion15/exercises02/","title":"\u00d6vning 15 SOLID","text":"","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v07/lektion15/exercises02/#ovning-1-srp-dela-upp-en-gudklass-i-tva-ansvar","title":"\u00d6vning 1 \u2013 SRP: Dela upp en \u201cgudklass\u201d i tv\u00e5 ansvar","text":"<p>M\u00e5l: Separera ber\u00e4kning av orderbelopp fr\u00e5n utskrift/rendering av kvitto.</p> <p>Startkod</p> <pre><code>class Program\n{\n    static void Main()\n    {\n        var items = new List&lt;OrderItem&gt;\n        {\n            new(\"Bok\", 2, 120m),\n            new(\"Penna\", 5, 10m)\n        };\n\n        var order = new Order();\n        order.Add(items);\n        order.PrintReceipt(); // Skriver ut totalsumma + rader\n    }\n}\n\nclass OrderItem\n{\n    public string Name { get; }\n    public int Quantity { get; }\n    public decimal UnitPrice { get; }\n    public OrderItem(string name, int qty, decimal price)\n        =&gt; (Name, Quantity, UnitPrice) = (name, qty, price);\n}\n\nclass Order\n{\n    private readonly List&lt;OrderItem&gt; _items = new();\n\n    public void Add(IEnumerable&lt;OrderItem&gt; items) =&gt; _items.AddRange(items);\n\n    // ANSVAR 1: ber\u00e4kningar\n    public decimal CalculateSubtotal()\n    {\n        decimal sum = 0;\n        foreach (var i in _items) sum += i.UnitPrice * i.Quantity;\n        return sum;\n    }\n\n    public decimal CalculateVat(decimal rate = 0.25m) \n    { \n        return CalculateSubtotal() * rate; \n    }\n\n    public decimal CalculateTotal(decimal rate = 0.25m) \n    { \n        return CalculateSubtotal() + CalculateVat(rate); \n    }\n\n    // ANSVAR 2: presentation/utskrift\n    public void PrintReceipt()\n    {\n        Console.WriteLine(\"KVITTO\");\n        foreach (var i in _items)\n            Console.WriteLine($\"{i.Name} x{i.Quantity} \u00e1 {i.UnitPrice:C} = {(i.UnitPrice*i.Quantity):C}\");\n        Console.WriteLine($\"Delsumma: {CalculateSubtotal():C}\");\n        Console.WriteLine($\"Moms (25%): {CalculateVat():C}\");\n        Console.WriteLine($\"Totalt: {CalculateTotal():C}\");\n    }\n}\n</code></pre>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v07/lektion15/exercises02/#uppgift","title":"Uppgift","text":"<p>Dela upp Order i tv\u00e5 klasser:</p> <ul> <li>Order: tar en lista OrderItem och ansvarar f\u00f6r CalculateSubtotal, CalculateVat, CalculateTotal.</li> <li>ReceiptPrinter: har ansvar f\u00f6r att presentera/skriva ut kvittot (tar in en order eller f\u00e4rdiga v\u00e4rden).</li> </ul> <p>\u00c4ndra i Main s\u00e5 att den anv\u00e4nder b\u00e5da klasserna.</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v07/lektion15/exercises02/#ovning-2-ocp-lagg-till-ny-rabatt-utan-att-andra-befintlig-kod","title":"\u00d6vning 2 \u2013 OCP: L\u00e4gg till ny rabatt utan att \u00e4ndra befintlig kod","text":"<p>M\u00e5l: Kunna l\u00e4gga till ny rabattlogik genom att l\u00e4gga till ny klass, inte \u00e4ndra p\u00e5 befintliga.</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v07/lektion15/exercises02/#uppgift_1","title":"Uppgift","text":"<ol> <li> <p>L\u00e4s koden och testa den med olika DiscountPolicy-subklasser.     Exempel:     <pre><code>DiscountPolicy discount = new ThresholdDiscount(500, 0.10m);\n</code></pre></p> </li> <li> <p>L\u00e4gg till en ny rabattpolicy genom att skapa en ny klass som \u00e4rver fr\u00e5n DiscountPolicy, t.ex.:</p> <ul> <li>ItemCountDiscount \u2013 10 % rabatt om antal artiklar &gt; 10</li> <li>PaltkomaDiscount \u2013 15 % rabatt om klockan \u00e4r efter lunch</li> </ul> </li> <li> <p>\u00c4ndra bara raden i Main d\u00e4r DiscountPolicy instansieras.</p> </li> <li>Inga \u00e4ndringar f\u00e5r g\u00f6ras i Checkout-klassen.</li> </ol> <p>Startkod</p> <pre><code>class Program\n{\n    static void Main()\n    {\n        var items = new List&lt;OrderItem&gt;\n        {\n            new(\"Bok\", 2, 120m),\n            new(\"Penna\", 5, 10m)\n        };\n\n        DiscountPolicy discount = new NoDiscount(); // byt h\u00e4r till andra rabatter\n        var checkout = new Checkout(discount);\n\n        var total = checkout.Total(items);\n        Console.WriteLine($\"Totalt att betala: {total:C}\");\n    }\n}\n\nclass OrderItem\n{\n    public string Name { get; }\n    public int Quantity { get; }\n    public decimal UnitPrice { get; }\n\n    public OrderItem(string name, int qty, decimal price)\n        =&gt; (Name, Quantity, UnitPrice) = (name, qty, price);\n}\n\n// Abstrakt basklass f\u00f6r rabatter\nabstract class DiscountPolicy\n{\n    // Virtuell metod som kan overridas i subklasser\n    public virtual decimal Apply(decimal subtotal) =&gt; subtotal;\n\n    // Hj\u00e4lpmetod som kan anv\u00e4ndas av alla subklasser\n    protected decimal PercentageOff(decimal subtotal, decimal percent)\n        =&gt; subtotal * (1 - percent);\n}\n\n// --- Konkreta rabattklasser ---\nclass NoDiscount : DiscountPolicy\n{\n    // \u00c4rver standardbeteende (ingen rabatt)\n}\n\nclass PercentageDiscount : DiscountPolicy\n{\n    private readonly decimal _percent;\n    public PercentageDiscount(decimal percent) =&gt; _percent = percent;\n\n    public override decimal Apply(decimal subtotal) =&gt; PercentageOff(subtotal, _percent);\n}\n\nclass ThresholdDiscount : DiscountPolicy\n{\n    private readonly decimal _threshold;\n    private readonly decimal _percent;\n\n    public ThresholdDiscount(decimal threshold, decimal percent)\n    {\n        _threshold = threshold;\n        _percent = percent;\n    }\n\n    public override decimal Apply(decimal subtotal)\n    {\n        if (subtotal &gt;= _threshold)\n            return PercentageOff(subtotal, _percent);\n        return subtotal;\n    }\n}\n\n// --- Checkoutklass som \u00e4r OCP-kompatibel ---\nclass Checkout\n{\n    private readonly DiscountPolicy _discount;\n    public Checkout(DiscountPolicy discount) =&gt; _discount = discount;\n\n    public decimal Total(IEnumerable&lt;OrderItem&gt; items, decimal vatRate = 0.25m)\n    {\n        decimal subtotal = 0;\n        foreach (var i in items)\n            subtotal += i.UnitPrice * i.Quantity;\n\n        var discounted = _discount.Apply(subtotal);\n        var vat = discounted * vatRate;\n        return discounted + vat;\n    }\n}\n</code></pre>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v07/lektion16/","title":"Lektion 16","text":""},{"location":"lektioner/oop/v07/lektion16/#innehall","title":"Inneh\u00e5ll","text":"<ul> <li>Interfaces</li> </ul>"},{"location":"lektioner/oop/v07/lektion16/#lankar","title":"L\u00e4nkar","text":""},{"location":"lektioner/oop/v07/lektion16/exercises01/","title":"\u00d6vning 16 - Interfaces","text":"","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v07/lektion16/exercises01/#intro-datetimenow","title":"Intro: DateTime.Now","text":"<p>En strukturerad \u00f6vning vi g\u00f6r tillsammans steg f\u00f6r steg i klassrummet.</p> <p>Vi skapar f\u00f6rst klassen <code>TimedGreetingService</code>. Den anv\u00e4nder <code>DateTime.Now</code> f\u00f6r att ta reda p\u00e5 vilken tid p\u00e5 dygnet det \u00e4r och visar olika h\u00e4lsningsfraser beroende p\u00e5 det.</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v07/lektion16/exercises01/#startkod","title":"Startkod","text":"<p>Kommande \u00f6vningar utg\u00e5r fr\u00e5n denna startkod:</p> Startkod <pre><code>class Program\n{\n    static void Main()\n    {\n        var addressBook = new AddressBook();\n        addressBook.Add(new Contact(\"Kalle\", \"Anka\", \"kalle@anka.se\", new DateTime(1980, 1, 1)));\n        addressBook.Add(new Contact(\"Kajsa\", \"Anka\", \"kajsa@anka.se\", new DateTime(1985, 2, 2)));\n\n        foreach (var c in addressBook.GetAll())\n        {\n            Console.WriteLine(c);\n        }\n    }\n}\n\nclass Contact(string firstName, string lastName, string email)\n{\n    public string FirstName { get; } = firstName;\n    public string LastName { get; } = lastName;\n    public string Email { get; } = email;\n    public DateTime BirthDate { get; set; } = DateTime.MinValue;\n}\n\nclass AddressBook\n{\n    private readonly List&lt;Contact&gt; _contacts = new();\n\n    public void Add(Contact contact)\n    {\n        if (string.IsNullOrWhiteSpace(contact.Email) || !contact.Email.Contains(\"@\"))\n        {\n            return;\n        }\n\n        _contacts.Add(contact);\n    }\n\n    public IEnumerable&lt;Contact&gt; GetAll()\n    { \n        return _contacts;\n    }\n\n    public Contact? FindByEmail(string email)\n    {\n        foreach (var c in _contacts)\n        {\n            if (c.Email.Equals(email, StringComparison.OrdinalIgnoreCase))\n            {\n                return c;\n            }\n        }\n        return null;\n    }\n}\n</code></pre>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v07/lektion16/exercises01/#iemailservice","title":"IEmailService","text":"<p>Vi vill l\u00e4gga till m\u00f6jligheten att skicka ett grattis-mail till alla kontakter som fyller \u00e5r idag.</p> <ol> <li>Skapa en klass som skall ha ansvaret f\u00f6r att skicka epost. Klassen ska heta <code>TestEmailService</code> och ha en metod <code>SendEmail(string to, string subject, string body)</code>. Denna metod ska bara skriva ut till konsolen att ett mail skickas (vi skickar inga riktiga mail i denna \u00f6vning).</li> <li>L\u00e4gg till metoden <code>SendBirthdayEmails()</code> i <code>AddressBook</code> som skickar ett mail till alla kontakter som fyller \u00e5r idag:<ul> <li>Loopa igenom alla kontakter</li> <li>Kolla om kontaktens <code>BirthDate</code> \u00e4r samma dag och m\u00e5nad som idag (allts\u00e5 inte exakt p\u00e5 millisekunden, vilket det blir om du j\u00e4mf\u00f6r <code>BirthDate == DateTime.Now</code>).</li> <li>Om det \u00e4r det, skapa en ny instans av <code>TestEmailService</code> och anropa <code>SendEmail</code> med kontaktens epostadress, \u00e4mnet \"Grattis p\u00e5 f\u00f6delsedagen!\" och valfri br\u00f6dtext.</li> </ul> </li> <li>Testa i <code>Main</code> att det fungerar genom att anropa <code>SendBirthdayEmails()</code> p\u00e5 din <code>AddressBook</code>-instans.</li> <li>Men, det \u00e4r ju inte bra att <code>AddressBook</code> skapar en instans av <code>TestEmailService</code> direkt! Det leder till stark koppling mellan klasserna, och g\u00f6r det sv\u00e5rt att byta ut <code>TestEmailService</code> mot en annan implementation (t.ex. en som skickar riktiga mail). </li> <li>Vi l\u00f6ser detta genom att koppla loss AddressBook fr\u00e5n EmailService med hj\u00e4lp av ett interface! </li> <li>Skapa ett interface <code>IEmailService</code> med metoden <code>SendEmail(string to, string subject, string body)</code>.</li> <li>\u00c4ndra <code>TestEmailService</code> s\u00e5 att den implementerar <code>IEmailService</code>.</li> <li>L\u00e4gg till en konstruktor till <code>AddressBook</code> som tar in ett objekt av typen <code>IEmailService</code>. Skapa ett f\u00e4lt av typen <code>IEmailService</code>, f\u00f6r att lagra referensen till objektet. Anv\u00e4nd sedan detta f\u00e4lt i <code>SendBirthdayEmails()</code> ist\u00e4llet f\u00f6r att skapa en ny instans av <code>TestEmailService</code>.</li> <li>\u00c4ndra i <code>Main</code> s\u00e5 att den skapar en instans av <code>TestEmailService</code> och skickar in den i <code>AddressBook</code>-konstruktorn.</li> <li>Testa att det fortfarande fungerar.</li> <li>Skapa nu en ny klass <code>RealEmailService</code> som implementerar <code>IEmailService</code>. Den ska ocks\u00e5 bara skriva ut till konsolen att     ett mail skickas (Men kanske med en annan f\u00e4rg eller n\u00e5got, vi l\u00e5tsas att den mailar p\u00e5 riktigt. Kanske skriver till en textfil ist\u00e4llet om du inte vill att den skriver till konsolen).</li> <li>\u00c4ndra i <code>Main</code> s\u00e5 att AddressBook f\u00e5r <code>RealEmailService</code> ist\u00e4llet f\u00f6r <code>TestEmailService</code>. Testa att det fungerar.</li> </ol> <p>Kopplingen mellan AddressBook och klasserna som skickar mail \u00e4r nu betydligt svagare! Vi kan enkelt byta implementation av <code>IEmailService</code> utan att beh\u00f6va \u00e4ndra i <code>AddressBook</code>.</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v07/lektion16/exercises01/#ilogger","title":"ILogger","text":"<p>Det \u00e4r vanligt att vi i olika program vill logga vad som h\u00e4nder, t.ex. f\u00f6r att kunna fels\u00f6ka problem. Men hur loggning sker kan skilja sig \u00e5t mellan olika program, eller i olika skeden av utvecklinge av programmet. Ibland kanske vi vill logga till en textfil, ibland till en databas, ibland bara skriva till konsolen. Detta \u00e4r en perfekt exempel p\u00e5 n\u00e4r vi kan anv\u00e4nda ett interface f\u00f6r att koppla loss loggningen fr\u00e5n resten av programmet.</p> <p>S\u00e5, s\u00e4g att vi vill logga ut varje g\u00e5ng en kontakt l\u00e4ggs till i <code>AddressBook</code>.</p> <ol> <li>B\u00f6rja med det absolut enklaste s\u00e4ttet: L\u00e4gg till Console.WriteLine i <code>Add</code>-metoden i <code>AddressBook</code> s\u00e5 att den skriver ut \"Lade till kontakt: {f\u00f6rnamn} {efternamn}\" varje g\u00e5ng en kontakt l\u00e4ggs till.</li> <li>Det vi nu gjort \u00e4r att vi l\u00f6st ett s\u00e4tt att logga n\u00e4r en kontakt l\u00e4ggs till. Men, kopplingen till just att det ska loggas till consolen \u00e4r nu v\u00e4ldigt stark.</li> <li>F\u00f6r att kunna g\u00f6ra kopplingen svagare, skapa ett interface <code>ILogger</code> med en metod <code>Log(string message)</code>.</li> <li>Skapa en klass <code>ConsoleLogger</code> som implementerar <code>ILogger</code> och skriver ut loggmeddelanden till konsolen.</li> <li>\u00c4ndra <code>AddressBook</code> s\u00e5 att den tar in ett <code>ILogger</code> i konstruktorn och anv\u00e4nder det f\u00f6r att logga n\u00e4r en kontakt l\u00e4ggs till.</li> <li>\u00c4ndra i <code>Main</code> s\u00e5 att den skapar en instans av <code>ConsoleLogger</code> och skickar in den i <code>AddressBook</code>-konstruktorn.</li> <li>Testa att det fortfarande fungerar.</li> <li>Skapa nu en ny klass <code>FileLogger</code> som implementerar <code>ILogger</code> och skriver loggmeddelanden till en textfil ist\u00e4llet f\u00f6r till konsolen.</li> <li>\u00c4ndra i <code>Main</code> s\u00e5 att AddressBook f\u00e5r <code>FileLogger</code> ist\u00e4llet f\u00f6r <code>ConsoleLogger</code>. Testa att det fungerar.</li> </ol>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v07/lektion16/exercises01/#irepository","title":"IRepository","text":"<p>Utg\u00e5 fr\u00e5n startkoden ovan.</p> <p>Klassen <code>AddressBook</code> har idag ansvar f\u00f6r att </p> <ul> <li>lagra kontakter</li> <li>validera e-postadresser</li> <li>s\u00f6ka efter kontakter</li> </ul> <p>Lagringen g\u00e5r till s\u00e5 att kontakter sparas i en lista i minnet. Det \u00e4r inte s\u00e4rskilt flexibelt, och det g\u00e5r inte att spara kontakter mellan k\u00f6rningar av programmet. L\u00e5t oss d\u00e4rf\u00f6r skapa ett interface s\u00e5 att AddressBook inte beh\u00f6ver veta exakt hur lagringen g\u00e5r till, bara att den kan lagra och h\u00e4mta kontakter!</p>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v07/lektion16/exercises01/#uppgift","title":"Uppgift","text":"<ol> <li>Skapa ett interface <code>IContactRepository</code> med metoderna <code>Add(Contact contact)</code> och <code>IEnumerable&lt;Contact&gt; GetAll()</code>.</li> <li>\u00c4ndra <code>AddressBook</code> s\u00e5 att den tar in ett <code>IContactRepository</code> i konstruktorn och anv\u00e4nder det f\u00f6r lagring och h\u00e4mtning av kontakter.</li> <li>Skapa en klass <code>InMemoryContactRepository</code> som implementerar <code>IContactRepository</code> och lagrar kontakter i en lista i minnet (som idag).</li> <li>\u00c4ndra i <code>Main</code> s\u00e5 att den f\u00f6rst anv\u00e4nder <code>InMemoryContactRepository</code> f\u00f6r att lagra kontakter i minnet. Testa att det fungerar.</li> <li>Skapa nu en ny klass: <code>FileContactRepository</code> som implementerar <code>IContactRepository</code> och lagrar kontakter i en textfil ist\u00e4llet (t.ex. CSV-format). Testa att k\u00f6ra programmet med denna ist\u00e4llet f\u00f6r <code>InMemoryContactRepository</code>.</li> </ol>","tags":["OOP1-\u00d6vning"]},{"location":"lektioner/oop/v08/lektion17/","title":"Lektion 17","text":""},{"location":"lektioner/oop/v08/lektion17/#innehall","title":"Inneh\u00e5ll","text":"<ul> <li>Veckans enk\u00e4t!</li> <li>Snabb kod\u00f6vning</li> <li>Prat om LLM/AI och l\u00e4xan</li> <li>Vad borde vi kunna vid det h\u00e4r laget? Vad borde vara tydligt nu?<ul> <li>Variablers livsl\u00e4ngd och scope</li> <li>Hur funkar metoder och vad \u00e4r det f\u00f6r skillnad p\u00e5 argument och parameter?</li> <li>Vad \u00e4r det f\u00f6r skillnad p\u00e5 en klass och ett objekt?</li> <li>Vad \u00e4r det f\u00f6r skillnad p\u00e5 instansmetoder och klassmetoder?</li> <li>Hur en lista kan loopas igenom och hur indexering funkar</li> <li>Skillnaden mellan referens- och v\u00e4rdetyper</li> </ul> </li> <li>Vad g\u00f6r jag f\u00f6r att utvecklas som programmerare? Vilka rutiner har jag f\u00f6r att unders\u00f6ka om jag kan det vi ska kunna?</li> <li>Lab #3</li> </ul>"},{"location":"lektioner/oop/v08/lektion17/#relevanta-lankar","title":"Relevanta l\u00e4nkar","text":"<ul> <li>Material: Livsl\u00e4ngd och scope</li> <li>Material: Metoder</li> <li>Material: Klasser och objekt</li> <li>Material: Statiska och instansmedlemmar</li> <li>Material: Loopar</li> <li>Material: Indexering</li> <li>Material: V\u00e4rde- och referenstyper</li> </ul>"},{"location":"lektioner/oop/v09/lektion18/","title":"Lektion 18","text":""},{"location":"lektioner/oop/v09/lektion18/#innehall","title":"Inneh\u00e5ll","text":"<ul> <li>Veckans enk\u00e4t! *</li> </ul>"},{"location":"lektioner/oop/v09/lektion18/#relevanta-lankar","title":"Relevanta l\u00e4nkar","text":""},{"location":"lektioner/oop/v09/lektion18/exercises01/","title":"Exercises01","text":""},{"location":"lektioner/oop/v09/lektion18/exercises01/#ovning-lektion-18","title":"\u00d6vning - Lektion 18","text":""},{"location":"lektioner/oop/v10/lektion19/","title":"Lektion 19","text":""},{"location":"lektioner/oop/v10/lektion19/#innehall","title":"Inneh\u00e5ll","text":"<ul> <li>Veckans enk\u00e4t! *</li> </ul>"},{"location":"lektioner/oop/v10/lektion19/#relevanta-lankar","title":"Relevanta l\u00e4nkar","text":""},{"location":"lektioner/oop/v10/lektion19/exercises01/","title":"Exercises01","text":""},{"location":"lektioner/oop/v10/lektion19/exercises01/#ovning-lektion-19","title":"\u00d6vning - Lektion 19","text":""},{"location":"lektioner/project/v11-Null/","title":"Null??","text":""},{"location":"lektioner/project/v11-Null/#ingen-oop-denna-vecka-full-on-databasfokus-go-sql","title":"Ingen OOP denna vecka! Full-on databasfokus! Go SQL!","text":"<p>Trivia: Mannen p\u00e5 bilder \u00e4r A'Shawn Robinson, professionell amerikansk fotbollsspelare som spelar f\u00f6r Carolina Panthers i NFL.</p>"},{"location":"lektioner/project/v12-Testning/lektion20/","title":"Lektion 20","text":""},{"location":"lektioner/project/v12-Testning/lektion20/#innehall","title":"Inneh\u00e5ll","text":"<ul> <li>Veckans enk\u00e4t!</li> <li>Introduktion till enhetstestning</li> <li>xUnit</li> <li>\u00d6vningar</li> </ul>"},{"location":"lektioner/project/v12-Testning/lektion20/#relevanta-lankar","title":"Relevanta l\u00e4nkar","text":""},{"location":"lektioner/project/v12-Testning/lektion20/exercises20/","title":"Exercises20","text":""},{"location":"lektioner/project/v12-Testning/lektion20/exercises20/#ovning-20","title":"\u00d6vning 20","text":""},{"location":"lektioner/project/v12-Testning/lektion21/","title":"Lektion 21","text":""},{"location":"lektioner/project/v12-Testning/lektion21/#innehall","title":"Inneh\u00e5ll","text":"<ul> <li>Mocks och Stubs</li> </ul>"},{"location":"lektioner/project/v12-Testning/lektion21/#relevanta-lankar","title":"Relevanta l\u00e4nkar","text":""},{"location":"lektioner/project/v12-Testning/lektion21/exercises21/","title":"Exercises21","text":""},{"location":"lektioner/project/v12-Testning/lektion21/exercises21/#ovning-21","title":"\u00d6vning 21","text":"<p>Kommer</p>"},{"location":"lektioner/project/v12-Testning/lektion22/","title":"Lektion 22","text":""},{"location":"lektioner/project/v12-Testning/lektion22/#innehall","title":"Inneh\u00e5ll","text":""},{"location":"lektioner/project/v12-Testning/lektion22/#relevanta-lankar","title":"Relevanta l\u00e4nkar","text":""},{"location":"lektioner/project/v12-Testning/lektion22/exercises22/","title":"Exercises22","text":""},{"location":"lektioner/project/v12-Testning/lektion22/exercises22/#ovning-22","title":"\u00d6vning 22","text":"<p>Kommer</p>"},{"location":"lektioner/project/v13/lektion23/","title":"Lektion 23","text":""},{"location":"lektioner/project/v13/lektion23/#innehall","title":"Inneh\u00e5ll","text":"<ul> <li>Veckans enk\u00e4t! *</li> </ul>"},{"location":"lektioner/project/v13/lektion23/#relevanta-lankar","title":"Relevanta l\u00e4nkar","text":""},{"location":"lektioner/project/v13/lektion23/exercises01/","title":"Exercises01","text":""},{"location":"lektioner/project/v13/lektion23/exercises01/#ovning-lektion-23","title":"\u00d6vning - Lektion 23","text":""},{"location":"lektioner/project/v13/lektion24/","title":"Lektion 24","text":""},{"location":"lektioner/project/v13/lektion24/#innehall","title":"Inneh\u00e5ll","text":"<ul> <li>Veckans enk\u00e4t! *</li> </ul>"},{"location":"lektioner/project/v13/lektion24/#relevanta-lankar","title":"Relevanta l\u00e4nkar","text":""},{"location":"lektioner/project/v13/lektion24/exercises01/","title":"Exercises01","text":""},{"location":"lektioner/project/v13/lektion24/exercises01/#ovning-lektion-24","title":"\u00d6vning - Lektion 24","text":""},{"location":"lektioner/project/v14/lektion25/","title":"Lektion 25","text":""},{"location":"lektioner/project/v14/lektion25/#innehall","title":"Inneh\u00e5ll","text":"<ul> <li>Veckans enk\u00e4t! *</li> </ul>"},{"location":"lektioner/project/v14/lektion25/#relevanta-lankar","title":"Relevanta l\u00e4nkar","text":""},{"location":"lektioner/project/v14/lektion25/exercises01/","title":"Exercises01","text":""},{"location":"lektioner/project/v14/lektion25/exercises01/#ovning-lektion-25","title":"\u00d6vning - Lektion 25","text":""},{"location":"lektioner/project/v15/lektion26/","title":"Lektion 26","text":""},{"location":"lektioner/project/v15/lektion26/#innehall","title":"Inneh\u00e5ll","text":"<ul> <li>Veckans enk\u00e4t! *</li> </ul>"},{"location":"lektioner/project/v15/lektion26/#relevanta-lankar","title":"Relevanta l\u00e4nkar","text":""},{"location":"lektioner/project/v15/lektion26/exercises01/","title":"Exercises01","text":""},{"location":"lektioner/project/v15/lektion26/exercises01/#ovning-lektion-26","title":"\u00d6vning - Lektion 26","text":""},{"location":"lektioner/project/v16/","title":"Lektion 27","text":""},{"location":"lektioner/project/v16/#troligen-ingen-lektion-denna-vecka","title":"Troligen ingen lektion denna vecka.","text":""},{"location":"material/","title":"V\u00e4lkommen!","text":"<p>Det h\u00e4r \u00e4r en hemsida som sammanfattar grunderna i C# och utveckling i Microsoft .NET och Visual Studio Code, samt SQL.</p> <p>Det f\u00f6rsta du kan g\u00f6ra om du \u00e4r helt ny \u00e4r att g\u00e5 till Installera VS Code och .NET och f\u00f6lja instruktionerna d\u00e4r f\u00f6r att installera allt du beh\u00f6ver, och komma ig\u00e5ng med din f\u00f6rsta C#-applikation.</p> <p>De stora sektionerna p\u00e5 sidan \u00e4r:</p>"},{"location":"material/#allmant","title":"Allm\u00e4nt","text":"<p>H\u00e4r finns det lite allm\u00e4nna saker som \u00e4r bra att k\u00e4nna till n\u00e4r du programmerar, som vanliga begrepp, metodik och fels\u00f6kning, samt information om .NET-ramverket. </p>"},{"location":"material/#c","title":"C#","text":"<p>Allt som har specifikt med C# att g\u00f6ra, samt grundl\u00e4ggande info om objektorienterad programmering.</p>"},{"location":"material/#sql","title":"SQL","text":"<p>Allt som har specifikt med SQL att g\u00f6ra, samt hur man kommer ig\u00e5ng med DataGrip mot Kristers server.</p>"},{"location":"material/#git","title":"GIT","text":"<p>Versionshantering och samarbete med GIT och GitHub.</p>"},{"location":"material/#testning","title":"Testning","text":"<p>Framf\u00f6rallt enhetstestning och TDD (Test Driven Development).</p>"},{"location":"material/#ovrigt","title":"\u00d6vrigt","text":"<p>H\u00e4r hittar du</p> <ul> <li>L\u00e4nkar</li> <li>Guider</li> <li>Kategorier med taggar</li> </ul>"},{"location":"material/cs/","title":"C#","text":"<p>C# \u00e4r ett modernt, objektorienterat programmeringsspr\u00e5k utvecklat av Microsoft som anv\u00e4nds f\u00f6r att bygga en m\u00e4ngd olika applikationer, fr\u00e5n webbapplikationer till spel och mobilappar. Det \u00e4r en del av .NET-plattformen och \u00e4r k\u00e4nt f\u00f6r sin enkelhet, kraftfulla funktioner och starka typkontroll.</p> <p>C# \u00e4r starkt inspirerat av andra programmeringsspr\u00e5k som Java och C++, vilket g\u00f6r det l\u00e4tt att l\u00e4ra sig f\u00f6r utvecklare som redan \u00e4r bekanta med dessa spr\u00e5k. Det erbjuder en rad funktioner som g\u00f6r det m\u00f6jligt att skriva ren, underh\u00e5llbar och effektiv kod.</p> <p>C# \u00e4r under st\u00e4nding utveckling och den senaste versionen 2025 \u00e4r C# 14.</p> <p>L\u00e4s mer om spr\u00e5ket h\u00e4r:</p> <ul> <li>https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/program-structure/</li> </ul>"},{"location":"material/cs/basics/array/","title":"Array","text":"<p>Arrayer \u00e4r en grundl\u00e4ggande datastruktur i C# som anv\u00e4nds f\u00f6r att lagra flera v\u00e4rden av samma typ i en enda variabel. Det g\u00e5r att t\u00e4nka p\u00e5 arrayer som en lista med v\u00e4rden. N\u00e5gra viktiga detaljer ang\u00e5ende arrayer:</p> <ul> <li>En array har en fast storlek som best\u00e4ms n\u00e4r den skapas</li> <li>Varje element i arrayen kan n\u00e5s via dess index, som b\u00f6rjar p\u00e5 0</li> <li>Arrayer kan inneh\u00e5lla vilken datatyp som helst, inklusive egna klasser, men bara en typ \u00e5t g\u00e5ngen</li> </ul> Exempel p\u00e5 array<pre><code>int[] numbers = new int[5]; // Skapar en array som kan h\u00e5lla 5 heltal\n\nnumbers[0] = 10; // Tilldelar v\u00e4rdet 10 till f\u00f6rsta elementet\nnumbers[1] = 20; // Tilldelar v\u00e4rdet 20 till andra elementet\n\nConsole.WriteLine(numbers[0]); // Skriver ut f\u00f6rsta elementet (10)\nConsole.WriteLine(numbers.Length); // Skriver ut l\u00e4ngden p\u00e5 arrayen (5)\n</code></pre> <p>Arrayer kan ocks\u00e5 initialiseras med v\u00e4rden direkt vid skapandet:</p> Initialisering av array med v\u00e4rden<pre><code>string[] fruits = [\"Apple\", \"Banana\", \"Cherry\"]; // Skapar och initierar en array med str\u00e4ngar\n\nConsole.WriteLine(fruits[1]); // Skriver ut andra elementet (Banana)\n</code></pre> <p>Det \u00e4r vanligt att loopa igenom arrayer med en for-loop:</p> Loopa igenom en array<pre><code>for (int i = 0; i &lt; fruits.Length; i++)\n{\n    Console.WriteLine(fruits[i]); // Skriver ut varje frukt i arrayen\n}\n</code></pre>","tags":["OOP1"]},{"location":"material/cs/basics/enums/","title":"Enums","text":"<p>Enums (kort f\u00f6r \"enumerations\") \u00e4r en speciell datatyp i C# som anv\u00e4nds f\u00f6r att definiera en upps\u00e4ttning namngivna konstanter. De \u00e4r anv\u00e4ndbara n\u00e4r du har en variabel som bara kan anta ett begr\u00e4nsat antal v\u00e4rden, vilket g\u00f6r koden mer l\u00e4sbar och l\u00e4ttanv\u00e4nd.</p> <p>Du har troligen redan anv\u00e4nt enums utan att veta det om du har \u00e4ndrat f\u00e4rgen i console-f\u00f6nstret med <code>Console.ForegroundColor</code> eller <code>Console.BackgroundColor</code>. Dessa egenskaper anv\u00e4nder enums f\u00f6r att representera olika f\u00e4rger, ist\u00e4llet f\u00f6r siffror som \u00e4r sv\u00e5ra att komma ih\u00e5g.</p>","tags":["OOP1"]},{"location":"material/cs/basics/enums/#ett-exempel","title":"Ett exempel","text":"<p>S\u00e4g att vi vill representera olika storlekar p\u00e5 kl\u00e4der: Small, Medium, Large och ExtraLarge. Vilka olika s\u00e4tt kan vi g\u00f6ra detta p\u00e5? Tex kan vi anv\u00e4nda heltal:</p> Heltal<pre><code>int size = 1; // 1 = Small, 2 = Medium, 3 = Large, 4 = Extra\n</code></pre> <p>Eller s\u00e5 kan vi anv\u00e4nda str\u00e4ngar:</p> Str\u00e4ngar<pre><code>string size = \"Medium\"; // \"Small\", \"Medium\", \"Large\", \"Extra\"\n</code></pre> <p>B\u00e5da dessa s\u00e4tt fungerar, men de har nackdelar. Med heltal \u00e4r det sv\u00e5rt att komma ih\u00e5g vad varje nummer betyder, och med str\u00e4ngar finns det risk att vi r\u00e5kar skriva fel (t.ex. \"meduim\" ist\u00e4llet f\u00f6r \"medium\").</p> <p>Enums l\u00f6ser dessa problem genom att ge namn \u00e5t varje v\u00e4rde, vilket g\u00f6r koden mer sj\u00e4lvdokumenterande och minskar risken f\u00f6r fel.</p> Enum<pre><code>enum Size\n{\n    Small,      // 0\n    Medium,     // 1\n    Large,      // 2\n    ExtraLarge  // 3\n}\n\nSize size = Size.Medium;\n</code></pre> <p>Vi kan tex nu anv\u00e4nda denna enum i en klass som representerar kl\u00e4der    :</p> Anv\u00e4nda enum i klass<pre><code>class Clothing\n{\n    public string Name { get; set; }\n    public Size Size { get; set; }\n\n    public Clothing(string name, Size size)\n    {\n        Name = name;\n        Size = size;\n    }\n}\n\nClothing shirt = new Clothing(\"T-Shirt\", Size.Medium);\n</code></pre>","tags":["OOP1"]},{"location":"material/cs/basics/enums/#mer-avancerat","title":"Mer avancerat","text":"<p>Det g\u00e5r att g\u00f6ra mycket mer mer enums! Tex kan vi:</p> <ul> <li>Loopa igenom alla v\u00e4rden i en enum.</li> <li>Konvertera mellan enum och dess underliggande v\u00e4rde.</li> <li>\u00c4ndra den underliggande typen av enum.</li> </ul>","tags":["OOP1"]},{"location":"material/cs/basics/enums/#loopa-igenom-varden","title":"Loopa igenom v\u00e4rden","text":"<p>Vi kan anv\u00e4nda <code>Enum.GetValues</code> f\u00f6r att f\u00e5 alla v\u00e4rden i en enum och loopa igenom dem.</p> Loop genom enum<pre><code>foreach (Size size in Enum.GetValues(typeof(Size)))\n{\n    Console.WriteLine(size);\n}\n</code></pre>","tags":["OOP1"]},{"location":"material/cs/basics/enums/#konvertera-mellan-enum-och-underliggande-varde","title":"Konvertera mellan enum och underliggande v\u00e4rde","text":"<p>Vi kan konvertera en enum till dess underliggande v\u00e4rde (som \u00e4r ett heltal) och vice versa.</p> Konvertera enum<pre><code>Size size = Size.Large;\nint intValue = (int)size; // Konvertera enum till int\nConsole.WriteLine(intValue); // Output: 2\nSize newSize = (Size)2; // Konvertera int till enum\nConsole.WriteLine(newSize); // Output: Large\n</code></pre>","tags":["OOP1"]},{"location":"material/cs/basics/enums/#underliggande-typ","title":"Underliggande typ","text":"<p>Som standard \u00e4r den underliggande typen f\u00f6r en enum <code>int</code>, och den b\u00f6rjar r\u00e4kna fr\u00e5n noll. Det g\u00e5r dock att \u00e4ndra detta till en annan heltalstyp (t.ex. <code>byte</code>, <code>short</code>, <code>long</code> etc.) genom att specificera det vid deklarationen.</p> Underliggande typ<pre><code>enum Size : byte\n{\n    Small = 1,\n    Medium = 2,\n    Large = 3,\n    ExtraLarge = 4\n}\n</code></pre>","tags":["OOP1"]},{"location":"material/cs/basics/errorhandling/","title":"Felhantering","text":"<p>N\u00e4r vi hanterar data och information i v\u00e5ra program \u00e4r det viktigt att kontrollera s\u00e5 att den st\u00e4mmer, f\u00f6r att saker och ting inte ska g\u00e5 s\u00f6nder. Det finns lite olika s\u00e4tt att g\u00f6ra detta i C#, beroende p\u00e5 vilket typ av fel som ska hanteras. </p> <p>Olika typer av fel i kod: </p> <ul> <li>Kompileringsfel - Fel som uppt\u00e4cks n\u00e4r koden kompileras, t.ex. syntaxfel eller felaktiga datatyper. Dessa syns ofta som r\u00f6da streck i koden i din kodeditor.</li> <li>Logiska fel - Fel i programmets logik som g\u00f6r att det inte beter sig som f\u00f6rv\u00e4ntat, t.ex. felaktiga ber\u00e4kningar eller if-satser. Dessa fel kan vara sv\u00e5ra att uppt\u00e4cka direkt och kr\u00e4ver testning.</li> <li>K\u00f6rningsfel - P\u00e5 engelska Runtime Error. Fel som uppst\u00e5r n\u00e4r programmet k\u00f6rs, t.ex. att dela med noll eller f\u00f6rs\u00f6ka l\u00e4sa en fil som inte finns. Beror ofta p\u00e5 felaktig indata eller of\u00f6rutsedda situationer.</li> </ul>","tags":["OOP1"]},{"location":"material/cs/basics/errorhandling/#kompileringsfel","title":"Kompileringsfel","text":"<p>Kompileringsfel \u00e4r fel som uppt\u00e4cks n\u00e4r koden kompileras, allts\u00e5 innan programmet k\u00f6rs. Dessa fel \u00e4r ofta l\u00e4tta att uppt\u00e4cka eftersom de visas som r\u00f6da streck i koden i din kodeditor. Dessa fel g\u00e5r inte att undvika att r\u00e4tta till, eftersom programmet inte kan k\u00f6ras f\u00f6rr\u00e4n de \u00e4r \u00e5tg\u00e4rdade.</p>","tags":["OOP1"]},{"location":"material/cs/basics/errorhandling/#logiska-fel","title":"Logiska fel","text":"<p>Logiska fel \u00e4r fel i programmets logik som g\u00f6r att det inte beter sig som f\u00f6rv\u00e4ntat. Dessa fel kan vara sv\u00e5ra att uppt\u00e4cka direkt och kr\u00e4ver testning. Ett exempel p\u00e5 ett logiskt fel \u00e4r om du har en if-sats som inte t\u00e4cker alla m\u00f6jliga fall, vilket kan leda till att programmet inte g\u00f6r det du t\u00e4nkt dig i vissa situationer. Eller en if-sats med flera else if som inte \u00e4r i r\u00e4tt ordning, s\u00e5 att vissa villkor aldrig uppfylls. Vissa logiska fel kan visas i din kodeditor genom att kodblock blir lite m\u00f6rkare, vilket indikerar att de aldrig kommer att k\u00f6ras. Exempelvis en else if som aldrig kan uppfyllas eftersom ett tidigare villkor alltid \u00e4r sant.</p> <p>Det b\u00e4sta s\u00e4ttet n\u00e4r du b\u00f6rjar l\u00e4ra dig programmering \u00e4r att anv\u00e4nda Debuggern f\u00f6r att f\u00f6rst\u00e5 steg-f\u00f6r-steg vad som h\u00e4nder i koden, och att skriva ut v\u00e4rden p\u00e5 variabler med <code>Console.WriteLine</code> f\u00f6r att se vad som h\u00e4nder. L\u00e4ngre fram kommer vi att skriva enhetstester f\u00f6r att automatiskt testa att koden fungerar som den ska.</p>","tags":["OOP1"]},{"location":"material/cs/basics/errorhandling/#korningsfel","title":"K\u00f6rningsfel","text":"<p>K\u00f6rningsfel \u00e4r fel som uppst\u00e5r p\u00e5 grund av of\u00f6rutsedda situationer n\u00e4r programmet k\u00f6rs. Det kan vara input fr\u00e5n anv\u00e4ndaren som inte \u00e4r f\u00f6rv\u00e4ntad, eller att en fil som ska l\u00e4sas in inte finns av n\u00e5gon anledning. Dessa fel kan g\u00f6ra att programmet kraschar om de inte hanteras p\u00e5 r\u00e4tt s\u00e4tt. Ofta \u00e4r de l\u00e4tta att uppt\u00e4cka d\u00e5 hela programmet kraschar och ett felmeddelande visas i konsolen. Detta \u00e4r bra! Det \u00e4r b\u00e4ttre att programmet kraschar tidigt och visar p\u00e5 att n\u00e5got \u00e4r fel, och att vi borde hantera detta felet i v\u00e5r kod s\u00e5 att programmet inte kraschar utan ist\u00e4llet hanterar felet p\u00e5 ett bra s\u00e4tt.</p> <p>K\u00f6rningsfel hanteras i C# ofta med <code>try/catch</code>, vilket vi tittar n\u00e4rmare p\u00e5 i n\u00e4sta avsnitt.</p>","tags":["OOP1"]},{"location":"material/cs/basics/exceptions/","title":"Exceptions","text":"<p>Ett <code>exception</code> \u00e4r ett fel som uppst\u00e5r n\u00e4r programmet k\u00f6rs, t.ex. att dela med noll eller l\u00e4sa en fil som inte finns.</p>","tags":["OOP1"]},{"location":"material/cs/basics/exceptions/#hantera-exceptions-undantag","title":"Hantera exceptions (undantag)","text":"<p>I C# anv\u00e4nds try/catch f\u00f6r att f\u00e5nga och hantera felet s\u00e5 att programmet inte kraschar.</p> Kodstruktur<pre><code>try\n{\n    // kod som kan orsaka ett fel som vi vill testa att k\u00f6ra\n}\ncatch \n{\n    // Om koden i try-blocket orsakar ett fel, s\u00e5 hoppar vi hit\n    // och kan hantera felet p\u00e5 n\u00e5got s\u00e4tt, skriva ut ett felmeddelande etc.\n    // Utan detta skulle programmet krascha med felmeddelandet \"Unhandled Exception\"\n} \n</code></pre> <p>Du kan se detta n\u00e4stan som en specialiserad form av if-sats, d\u00e4r du testar om n\u00e5got g\u00e5r fel. P\u00e5 samma s\u00e4tta g\u00e5r det att ha flera catch-block f\u00f6r att hantera olika typer av fel.</p> Flera catch-block<pre><code>try\n{\n    // kod som kan orsaka olika typer av fel\n}\ncatch (DivideByZeroException ex)\n{\n    // Hantera fallet n\u00e4r anv\u00e4ndaren f\u00f6rs\u00f6ker dela med noll\n}\ncatch (FormatException ex)\n{\n    // Hantera fallet n\u00e4r anv\u00e4ndaren skriver in n\u00e5got som inte \u00e4r ett tal\n}\ncatch (Exception ex)\n{\n    // Hantera alla andra typer av fel\n}\n</code></pre>","tags":["OOP1"]},{"location":"material/cs/basics/exceptions/#sammanfattning","title":"Sammanfattning","text":"<ul> <li>Exception = fel vid k\u00f6rning.</li> <li>Utan try/catch kraschar programmet.</li> <li> <p>Med try/catch kan du styra \u00f6ver felet.</p> </li> <li> <p>try = koden som kan g\u00e5 fel.</p> </li> <li>catch = vad som h\u00e4nder om felet uppst\u00e5r.</li> <li>finally = k\u00f6rs alltid, oavsett om fel intr\u00e4ffat eller inte.</li> </ul>","tags":["OOP1"]},{"location":"material/cs/basics/exceptions/#kasta-exceptions","title":"Kasta exceptions","text":"<p>Vi kan ocks\u00e5 sj\u00e4lva kasta exceptions med <code>throw</code>-satsen. Detta anv\u00e4nds ofta i metoder f\u00f6r att signalera att n\u00e5got g\u00e5tt fel.</p> Kasta exception<pre><code>if (string.IsNullOrEmpty(name))\n{\n    throw new ArgumentException(\"Name cannot be null or empty.\");\n}\n</code></pre>","tags":["OOP1"]},{"location":"material/cs/basics/exceptions/#tank-pa-att","title":"T\u00e4nk p\u00e5 att","text":"<ul> <li>Anv\u00e4nd exceptions f\u00f6r ov\u00e4ntade fel som inte kanske borde h\u00e4nda i vanliga fall, inte ist\u00e4llet f\u00f6r vanlig fl\u00f6deskontroll.</li> <li>Anv\u00e4nd specifika exception-typer (t.ex. <code>DivideByZeroException</code>) ist\u00e4llet f\u00f6r den generella <code>Exception</code> n\u00e4r det \u00e4r m\u00f6jligt, f\u00f6r att kunna hantera olika fel p\u00e5 olika s\u00e4tt.</li> <li>Det finns metoder som undviker exceptions, t.ex. <code>int.TryParse</code>. Det kan ofta vara smidigare att anv\u00e4nda dem ist\u00e4llet f\u00f6r att hantera exceptions.</li> </ul>","tags":["OOP1"]},{"location":"material/cs/basics/iteration/","title":"Iteration","text":"<p>Iteration, eller loopar som det ofta kallas, anv\u00e4nds f\u00f6r att upprepa ett kodblock flera g\u00e5nger s\u00e5 l\u00e4nge ett visst villkor \u00e4r uppfyllt. </p> <p>Detta \u00e4r otroligt vanligt inom programmering, och det \u00e4r viktigt att f\u00f6rst\u00e5 hur det fungerar.</p> <p>Gemensamt f\u00f6r alla loopar \u00e4r att de:</p> <ul> <li>Har ett villkor som avg\u00f6r om loopen ska forts\u00e4tta eller inte.</li> <li>Har ett kodblock som k\u00f6rs varje g\u00e5ng loopen itererar (upprepar sig).</li> </ul> <p>Allts\u00e5 strukturellt kan det se ut s\u00e5 h\u00e4r:</p> <pre><code>looptyp (villkor)\n{\n    // Kod som k\u00f6rs s\u00e5 l\u00e4nge villkoret \u00e4r sant\n}\n</code></pre>","tags":["OOP1"]},{"location":"material/cs/basics/iteration/#while","title":"While","text":"<p>Den enklaste loopen \u00e4r while-loopen. Den k\u00f6rs s\u00e5 l\u00e4nge ett villkor \u00e4r sant. H\u00e4r \u00e4r det enklaste exemplet:</p> <pre><code>while (true)\n{\n    Console.WriteLine(\"En evighetsmaskin!\");\n}\n</code></pre> <p>O\u00e4ndliga loopar</p> <p>En loop som aldrig slutar kallas f\u00f6r en o\u00e4ndlig loop. Om du beh\u00f6ver avbryta ett program som fastnat i en o\u00e4ndlig loop kan du ofta g\u00f6ra det med <code>Ctrl+C</code> i terminalen.</p> <p>Vanligare \u00e4r att anv\u00e4nda n\u00e5gon form av r\u00e4knare f\u00f6r att h\u00e5lla koll p\u00e5 hur m\u00e5nga g\u00e5nger loopen har k\u00f6rts. H\u00e4r \u00e4r ett exempel som skriver ut talen 1 till 5:</p> <pre><code>int count = 1; // Startv\u00e4rde\nwhile (count &lt;= 5) // Villkor\n{\n    Console.WriteLine(count); // Kod som k\u00f6rs varje g\u00e5ng\n    count++; // Uppdatera r\u00e4knaren\n}\n</code></pre>","tags":["OOP1"]},{"location":"material/cs/basics/iteration/#do-while","title":"Do-while","text":"<p>Det finns ocks\u00e5 do-while-loopen, som \u00e4r likadan som while med den skillnanden att den alltid k\u00f6rs minst en g\u00e5ng, eftersom villkoret kollas efter att koden har k\u00f6rts:</p> <pre><code>int count = 1;\ndo\n{\n    Console.WriteLine(count);\n    count++;\n} while (count &lt;= 5);\n</code></pre>","tags":["OOP1"]},{"location":"material/cs/basics/iteration/#for","title":"For","text":"<p>En annan vanlig loop \u00e4r for-loopen, som \u00e4r en mer kompakt version av while. Den inneh\u00e5ller startv\u00e4rde, villkor och uppdatering av r\u00e4knaren p\u00e5 samma rad:</p> <pre><code>for (int count = 1; count &lt;= 5; count++)\n{\n    Console.WriteLine(count);\n}\n</code></pre> <p>H\u00e4r \u00e4r samma fl\u00f6de visualiserat som ett fl\u00f6desschema:</p> <pre><code>flowchart LR\n    A@{shape: stadium, label: \"Start\"} --&gt; B[count = 1]\n    B --&gt; C{count &lt;= 5?}\n    C -- Ja --&gt; D[Skriv ut count]\n    D --&gt; E[count++]\n    E --&gt; C\n    C -- Nej --&gt; F@{shape: stadium, label: \"slut\"}\n</code></pre>","tags":["OOP1"]},{"location":"material/cs/basics/iteration/#foreach","title":"Foreach","text":"<p>Den sista sortens loop \u00e4r foreach-loopen, som anv\u00e4nds f\u00f6r att iterera \u00f6ver (g\u00e5 igenom) alla element i en samling, som en array eller en lista:</p> <pre><code>string[] fruits = { \"Apple\", \"Banana\", \"Cherry\" };\nforeach (string fruit in fruits)\n{\n    Console.WriteLine(fruit);\n}\n</code></pre>","tags":["OOP1"]},{"location":"material/cs/basics/iteration/#break-continue","title":"break / continue","text":"<p>Inom loopar kan du anv\u00e4nda break f\u00f6r att avbryta loopen helt, och continue f\u00f6r att hoppa \u00f6ver resten av koden i loopen och g\u00e5 direkt till n\u00e4sta iteration.</p> <pre><code>for (int i = 1; i &lt;= 10; i++)\n{\n    if (i == 5)\n    {\n        break; // Avbryter loopen n\u00e4r i \u00e4r 5\n    }\n    if (i % 2 == 0)\n    {\n        continue; // Hoppar \u00f6ver j\u00e4mna tal\n    }\n    Console.WriteLine(i); // Skriver ut udda tal mindre \u00e4n 5\n}\n</code></pre>","tags":["OOP1"]},{"location":"material/cs/basics/iteration/#fler-exempel","title":"Fler exempel","text":"Testa l\u00f6senord med do-while <pre><code>do\n{\n    Console.Write(\"Skriv l\u00f6senord: \");;\n} while (Console.ReadLine() != \"password\");\n\nConsole.WriteLine(\"Grattis du \u00e4r inloggad!\");\n</code></pre> Loopa igenom en lista eller array <pre><code>string[] censureradeOrd = [\"fisk\", \"r\u00e4ka\", \"hund\", \"katt\", \"apa\"];\n\nfor (int i = 0; i &lt; censureradeOrd.Length; i++)\n{\n    Console.WriteLine(censureradeOrd[i]);\n}\n\n//Identisk funktion fast med foreach:\n\nforeach (string ord in censureradeOrd)\n{\n    Console.WriteLine(ord);\n}\n</code></pre>","tags":["OOP1"]},{"location":"material/cs/basics/methods/","title":"Metoder","text":"<p>Metoder (eller ibland kallat funktioner) \u00e4r ett namngivet kodblock som kan kallas p\u00e5 fr\u00e5n v\u00e5r kod genom att vi skriver namnet p\u00e5 metoden och skickar med eventuell data till den. F\u00f6r att inte program ska bli allt f\u00f6r l\u00e5nga och sv\u00e5rl\u00e4sta \u00e4r det ett m\u00e5ste att dela upp koden i mindre delar. Det \u00e4r h\u00e4r metoder kommer in i bilden.</p> En metods allm\u00e4nna struktur<pre><code>\u00c5TKOMSTMODIFIERARE TYP METODNAMN(PARAMETRAR)\n{\n    //Kod som k\u00f6rs n\u00e4r metoden anropas\n}\n</code></pre> <p>Metoder deklareras i turordning med:</p> <ul> <li>\u00c5tkomstmodifierare. T.ex. <code>public</code>, <code>private</code>, <code>protected</code> etc. Default \u00e4r <code>private</code> om inget anges.</li> <li>Returtyp. T.ex. <code>void</code>, <code>int</code>, <code>string</code> etc. M\u00e5ste alltid anges. <code>void</code> betyder att metoden inte returnerar n\u00e5got v\u00e4rde.</li> <li>Metodnamn. T.ex. <code>WriteMessage</code>, <code>CalculateSum</code> etc. B\u00f6r beskriva vad metoden g\u00f6r, ofta med verb i b\u00f6rjan.</li> <li>Parametrar inom parentes. T.ex. <code>int tal1, int tal2</code>. Om metoden inte tar n\u00e5gra parametrar, skrivs tomma parenteser <code>()</code>.</li> <li>Metodkropp inom klamrar <code>{ }</code> som inneh\u00e5ller koden som ska k\u00f6ras n\u00e4r metoden anropas.</li> </ul> <p>En metods kombination av returtyp, namn och parametrar kallas f\u00f6r metodsignatur.</p> <p>En metod ligger vanligtvis deklarerad inom en klass eller en struct.<sup>1</sup></p> Enklaste metoden, utan parametrar och utan returv\u00e4rde<pre><code>void WriteMessage()\n{\n    Console.WriteLine(\"Hej fr\u00e5n metoden!\");\n}\n\n//F\u00f6r att kalla p\u00e5 (anv\u00e4nda) metoden, skrivs metodens namn f\u00f6ljt av parenteser\nWriteMessage();\n</code></pre>","tags":["OOP1"]},{"location":"material/cs/basics/methods/#parametrar","title":"Parametrar","text":"<p>Parametrar anv\u00e4nds f\u00f6r att skicka in data till metoden. En metod kan ha noll eller flera parametrar, och varje parameter m\u00e5ste ha en typ och ett namn. Parametrarna fungerar som lokala variabler inom metodens kodblock.</p> Metod med parametrar och utan returv\u00e4rde<pre><code>void WriteMessage(string message, int number)\n{\n    Console.WriteLine($\"Meddelande: {message}, Nummer: {number}\");\n}\n</code></pre>","tags":["OOP1"]},{"location":"material/cs/basics/methods/#returvarde","title":"Returv\u00e4rde","text":"<p>P\u00e5 samma s\u00e4tt som att en metod kan ta emot data via parametrar, kan den ocks\u00e5 skicka tillbaka data till den som anropar metoden. Detta g\u00f6rs genom att ange en returtyp ist\u00e4llet f\u00f6r <code>void</code> och anv\u00e4nda <code>return</code>-satsen f\u00f6r att skicka tillbaka ett v\u00e4rde.</p> Metod med parametrar och med returv\u00e4rde av typen int<pre><code>int Add(int a, int b)\n{\n    return a + b;\n}\n\n//F\u00e5nga upp returv\u00e4rdet s\u00e5 h\u00e4r\nint sum = Add(5, 10);\n</code></pre>","tags":["OOP1"]},{"location":"material/cs/basics/methods/#overlagring-overloading","title":"\u00d6verlagring / Overloading","text":"<p>En metod kan ha flera olika signaturer, vilket inneb\u00e4r att du kan skapa flera metoder med samma namn. Detta kallas f\u00f6r \u00f6verlagring eller overloading. Metoderna m\u00e5ste skilja sig \u00e5t genom olika antal eller typer av parametrar.</p> Exempel p\u00e5 metod\u00f6verlagring<pre><code>int Multiply(int a, int b)\n{\n    return a * b;\n}\n\ndouble Multiply(double a, double b)\n{\n    return a * b;\n}\n\nstring Multiply(string a, int times)\n{\n    string tmp = \"\";\n    for (int i = 0; i &lt; times; i++)\n    {\n        tmp += a;\n    }\n    return tmp;\n}\n</code></pre>","tags":["OOP1"]},{"location":"material/cs/basics/methods/#out","title":"Out","text":"<p>Ibland vill man att en metod ska kunna returnera flera v\u00e4rden. Detta kan g\u00f6ras med hj\u00e4lp av <code>out</code>-parametrar. En <code>out</code>-parameter fungerar som en vanlig parameter med skillnaden att den m\u00e5ste tilldelas ett v\u00e4rde inom metoden innan den avslutas.</p> Exempel p\u00e5 out-parameter med bool<pre><code>bool TryReadFile(string filePath, out string content)\n{\n    try\n    {\n        content = System.IO.File.ReadAllText(filePath);\n        return true;\n    }\n    catch (Exception)\n    {\n        content = null;\n        return false;\n    }\n}\n\n// Anv\u00e4ndning av metoden\nif (TryReadFile(\"example.txt\", out string fileContent))\n{\n    Console.WriteLine(\"File content:\");\n    Console.WriteLine(fileContent);\n}\nelse\n{\n    Console.WriteLine(\"Failed to read the file.\");\n}\n</code></pre>","tags":["OOP1"]},{"location":"material/cs/basics/methods/#defaultvarden","title":"Defaultv\u00e4rden","text":"<p>Ibland vill man kunna anropa en metod utan att beh\u00f6va skicka med alla parametrar. Detta kan g\u00f6ras genom att ange defaultv\u00e4rden f\u00f6r vissa eller alla parametrar. Om en parameter har ett defaultv\u00e4rde, kan den utel\u00e4mnas vid anropet.</p> Exempel p\u00e5 defaultv\u00e4rden<pre><code>void Greet(string name = \"G\u00e4st\", string greeting = \"Hej\")\n{\n    Console.WriteLine($\"{greeting}, {name}!\");\n}\n// Anrop med b\u00e5da parametrarna\nGreet(\"Anna\", \"V\u00e4lkommen\");\n// Anrop med en parameter, den andra f\u00e5r defaultv\u00e4rdet\nGreet(\"Bob\");\n// Anrop utan parametrar, b\u00e5da f\u00e5r defaultv\u00e4rdena\nGreet();\n</code></pre> <p>Viktigt att veta \u00e4r att om en metod har parametrar med defaultv\u00e4rden, m\u00e5ste dessa komma sist i parameterlistan.</p>","tags":["OOP1"]},{"location":"material/cs/basics/methods/#params","title":"Params","text":"<p>Ibland vill man kunna skicka in ett obest\u00e4mt antal argument till en metod. Detta kan g\u00f6ras med hj\u00e4lp av <code>params</code>-nyckelordet. En <code>params</code>-parameter m\u00e5ste vara den sista parametern i metodens parameterlista och kan ta emot noll eller flera argument av samma typ.</p> Exempel p\u00e5 params<pre><code>int Sum(params int[] numbers)\n{\n    int total = 0;\n    foreach (int number in numbers)\n    {\n        total += number;\n    }\n    return total;\n}\n\n// Anrop med olika antal argument\nint result1 = Sum(1, 2, 3); // 6\nint result2 = Sum(10, 20);   // 30\nint result3 = Sum();         // 0\n</code></pre>","tags":["OOP1"]},{"location":"material/cs/basics/methods/#lankar","title":"L\u00e4nkar","text":"<ul> <li>https://learn.microsoft.com/en-us/dotnet/csharp/methods</li> </ul> <ol> <li> <p>L\u00e4s mer om klasser och structs i kapitlet OOP\u00a0\u21a9</p> </li> </ol>","tags":["OOP1"]},{"location":"material/cs/basics/selection/","title":"Selektion","text":"<p>If, else if och else \u00e4r grundl\u00e4ggande kontrollstrukturer i C# som anv\u00e4nds f\u00f6r att styra fl\u00f6det av programmet baserat p\u00e5 villkor. De g\u00f6r det m\u00f6jligt att utf\u00f6ra olika kodblock beroende p\u00e5 om ett visst villkor \u00e4r sant eller falskt.</p> <p>H\u00e4r \u00e4r ett enkelt exempel som visar hur if, else if och else fungerar i C#:</p> <pre><code>int number = 10;\n\nif (number &gt; 0)\n{\n    Console.WriteLine(\"Numret \u00e4r positivt.\");\n}\nelse if (number &lt; 0)\n{\n    Console.WriteLine(\"Numret \u00e4r negativt.\");\n}\nelse\n{\n    Console.WriteLine(\"Numret \u00e4r noll.\");\n}\n</code></pre> <p>H\u00e4r \u00e4r samma fl\u00f6de visualiserat som ett fl\u00f6desschema:</p> <pre><code>flowchart TD\n    A@{shape: stadium, label: \"Programmet startar\" } -- number = 10 --&gt; B{number &gt; 0?}\n    B -- Ja --&gt; C[Numret \u00e4r positivt]\n    B -- Nej --&gt; D{number &lt; 0?}\n    D -- Ja --&gt; E[Numret \u00e4r negativt]@{ shape: display }\n    D -- Nej --&gt; F[Numret \u00e4r noll]\n    C --&gt; G@{ shape: stadium, label: \"Programmet slutar\" }\n    E --&gt; G\n    F --&gt; G</code></pre> <p>Det g\u00e5r att endast ha ett if-statement, utan else if eller else. Det g\u00e5r ocks\u00e5 att ha flera else if-satser f\u00f6r att kontrollera flera olika villkor. N\u00e5gra exempel:</p> Endast if <pre><code>    int number = 10;\n    if (number &gt; 0)\n    {\n        Console.WriteLine(\"Numret \u00e4r positivt.\");\n    }\n</code></pre> Flera else if <pre><code>int number = 10;\nif (number &gt; 0)\n{\n    Console.WriteLine(\"Numret \u00e4r positivt.\");\n}\nelse if (number &lt; 0)\n{\n    Console.WriteLine(\"Numret \u00e4r negativt.\");\n}\nelse if (number == 10)\n{\n    Console.WriteLine(\"Numret \u00e4r exakt tio.\");\n}\nelse\n{\n    Console.WriteLine(\"Numret \u00e4r noll.\");\n}\n</code></pre>","tags":["OOP1"]},{"location":"material/cs/basics/selection/#switch","title":"Switch","text":"<p>En annan anv\u00e4ndbar selektionsstruktur \u00e4r switch, som \u00e4r s\u00e4rskilt anv\u00e4ndbar n\u00e4r du har m\u00e5nga olika m\u00f6jliga v\u00e4rden att kontrollera. H\u00e4r \u00e4r ett exempel:</p> <p><pre><code>char grade = 'B'; //Det troliga \u00e4r att denna kommer n\u00e5nstans ifr\u00e5n, en databas eller liknande.\n\nswitch (grade)\n{\n    case 'A':\n        Console.WriteLine(\"Utm\u00e4rkt!\");\n        break;\n    case 'B':\n        Console.WriteLine(\"Bra jobbat!\");\n        break;\n    case 'C':\n        Console.WriteLine(\"Du klarade det.\");\n        break;\n    case 'D':\n        Console.WriteLine(\"Du beh\u00f6ver f\u00f6rb\u00e4ttra dig.\");\n        break;\n    case 'F':\n        Console.WriteLine(\"Du misslyckades.\");\n        break;\n    default:\n        Console.WriteLine(\"Ogiltigt betyg.\");\n        break;\n}\n</code></pre> Observera behovet av break i varje case. Utan dem skulle programmet forts\u00e4tta k\u00f6ra koden i de efterf\u00f6ljande casen, vilket oftast inte \u00e4r \u00f6nskv\u00e4rt.</p> <p>Observera ocks\u00e5 att typen p\u00e5 det som kommer efter switch m\u00e5ste vara samma som typen p\u00e5 case-v\u00e4rdena. I detta exempel \u00e4r b\u00e5de grade och case-v\u00e4rdena av typen char.</p>","tags":["OOP1"]},{"location":"material/cs/basics/variables/","title":"Variabler","text":"<p>Variabler i C# anv\u00e4nds f\u00f6r att lagra data som kan anv\u00e4ndas och \u00e4ndras under programmets g\u00e5ng. </p> <p>En variabel har:</p> <ul> <li>Ett namn</li> <li>En typ</li> <li>Ett v\u00e4rde</li> </ul> <p>Exempel: <pre><code>int myVariable = 42;\n^typ    ^namn    ^v\u00e4rde\n</code></pre></p>","tags":["OOP1"]},{"location":"material/cs/basics/variables/#namn","title":"Namn","text":"<p>Namnet p\u00e5 en variabel anv\u00e4nds f\u00f6r att referera till den i koden. Namnet m\u00e5ste b\u00f6rja med en bokstav eller ett understreck (_) och kan f\u00f6ljas av bokst\u00e4ver, siffror eller understreck. Namn \u00e4r sk. 'case sensitive', vilket betyder att <code>myVariable</code> och <code>MyVariable</code> \u00e4r tv\u00e5 olika variabler. Det \u00e4r l\u00e4tt att g\u00f6ra fel h\u00e4r! Om du ser felmeddelandet \"The name 'X' does not exist in the current context\" s\u00e5 har du troligen stavat fel p\u00e5 variabeln, s\u00e5 dubbelkolla det.</p>","tags":["OOP1"]},{"location":"material/cs/basics/variables/#typ","title":"Typ","text":"<p>C# \u00e4r ett sk. strikt typat spr\u00e5k, vilket betyder att varje variabel m\u00e5ste deklareras med en specifik datatyp. N\u00e5gra vanliga datatyper \u00e4r:</p> <ul> <li><code>int</code> - Heltal (t.ex. 1, 42, -7)</li> <li><code>float</code> - Decimaltal (t.ex. 3.14f, -0.001f)</li> <li><code>double</code> - decimaltal med h\u00f6gre precision (t.ex. 3.1415926183273)</li> <li><code>string</code> - Text (t.ex. \"Hello, World!\")</li> <li><code>bool</code> - Boolean (sant eller falskt, t.ex. true, false)</li> <li><code>char</code> - Enskild tecken (t.ex. 'A', 'b', '3')</li> </ul> <p>L\u00e4s mer om typer h\u00e4r: https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/built-in-types </p>","tags":["OOP1"]},{"location":"material/cs/basics/variables/#varde","title":"V\u00e4rde","text":"<p>V\u00e4rdet skrivs p\u00e5 olika s\u00e4tt beroende p\u00e5 typen: * Heltal och decimaltal skrivs som vanliga siffror (t.ex. <code>42</code>, <code>3.14</code>) * Text (str\u00e4ngar) skrivs inom dubbla citattecken (t.ex. <code>\"Hello\"</code>) * V\u00e4rden av type <code>char</code> skrivs inom enkla citattecken (t.ex. <code>'A'</code>) * Boolean-v\u00e4rden skrivs som <code>true</code> eller <code>false</code> * V\u00e4rden av type <code>float</code> m\u00e5ste avslutas med bokstaven <code>f</code> (t.ex. <code>3.14f</code>) * V\u00e4rden av type <code>double</code> kan skrivas med eller utan bokstaven <code>d</code> (t.ex. <code>3.14</code> eller <code>3.14d</code>) * V\u00e4rden av type <code>decimal</code> m\u00e5ste avslutas med bokstaven <code>m</code> (t.ex. <code>3.14m</code>)</p> <p>Skillanden mellan <code>double</code>och <code>float</code> \u00e4r att <code>double</code> har h\u00f6gre precision och kan lagra st\u00f6rre tal. </p>","tags":["OOP1"]},{"location":"material/cs/basics/variables/#deklaration-och-initiering","title":"Deklaration och initiering","text":"<p>En variabel m\u00e5ste deklareras innan den anv\u00e4nds. Deklarationen anger variabelns namn och typ. Initiering \u00e4r n\u00e4r du tilldelar ett v\u00e4rde till variabeln f\u00f6r f\u00f6rsta g\u00e5ngen.</p> <pre><code>int number; // Deklaration\nnumber = 10; // Initiering\nstring message = \"Hello\"; // Deklaration och initiering p\u00e5 samma rad funkar ocks\u00e5.\n</code></pre>","tags":["OOP1"]},{"location":"material/cs/basics/variables/#anvandning","title":"Anv\u00e4ndning","text":"<p>N\u00e4r en variabel har deklarerats och initierats kan du anv\u00e4nda den i din kod. Du kan l\u00e4sa v\u00e4rdet, \u00e4ndra det eller anv\u00e4nda det i ber\u00e4kningar.</p> <pre><code>int a = 5;\nint b = 10;\nint sum = a + b; // sum kommer att vara 15\nConsole.WriteLine(\"Summan \u00e4r: \" + sum);\n</code></pre>","tags":["OOP1"]},{"location":"material/cs/basics/variables/#exempel-pa-variabler","title":"Exempel p\u00e5 variabler","text":"<pre><code>int age = 25; // En variabel av typen int (heltal) med namnet age och v\u00e4rdet 25\nstring name = \"Alice\"; // En variabel av typen string (text) med namnet 'name' och v\u00e4rdet \"Alice\"\nbool isStudent = true; // En variabel av typen bool (boolean) med namnet isStudent och v\u00e4rdet true\n</code></pre>","tags":["OOP1"]},{"location":"material/cs/basics/variables/#alla-variabeltyper","title":"Alla variabeltyper","text":"Typ Beskrivning Exempel <code>int</code> Heltal (-2,147,483,648 till 2,147,483,647) <code>42</code>, <code>-7</code> <code>long</code> Heltal (mycket stort) <code>9223372036854775807</code> <code>float</code> Decimaltal (flyttal) <code>3.14f</code>, <code>-0.001f</code> <code>double</code> Decimaltal med h\u00f6gre precision <code>3.14159265358979</code> <code>decimal</code> Decimal (f\u00f6r finansiella ber\u00e4kningar) <code>19.99m</code> <code>string</code> Text <code>\"Hello, World!\"</code> <code>char</code> Enskild tecken <code>'A'</code>, <code>'b'</code> <code>bool</code> Boolean (sant eller falskt) <code>true</code>, <code>false</code> <code>byte</code> Heltal (0 till 255) <code>255</code> <code>short</code> Heltal (-32,768 till 32,767) <code>32000</code> <code>ushort</code> Heltal (0 till 65,535) <code>60000</code> <code>uint</code> Heltal (0 till 4,294,967,295) <code>4000000000</code> <code>ulong</code> Heltal (0 till 18,446,744,073,709,551,615) <code>18000000000000000000</code> <code>object</code> Bas-typ f\u00f6r alla typer <code>new object()</code>","tags":["OOP1"]},{"location":"material/cs/oop/","title":"Intro","text":"<p>I takt med att ett program v\u00e4xer och blir mer komplext, v\u00e4xer ocks\u00e5 behovet av att organisera koden p\u00e5 ett bra s\u00e4tt s\u00e5 att det g\u00e5r att jobba effektivt med den. Ett s\u00e4tt att g\u00f6ra detta \u00e4r att anv\u00e4nda sig av objektorienterad programmering (OOP). C# \u00e4r ett objektorienterat spr\u00e5k, vilket inneb\u00e4r att det \u00e4r baserat p\u00e5 de objektorienterade principerna.  </p> <p>Objektorientering i sig \u00e4r inte ett programmeringsspr\u00e5k, utan ett s\u00e4tt att t\u00e4nka kring och strukturera data.</p>"},{"location":"material/cs/oop/#vad-ar-oop","title":"Vad \u00e4r OOP?","text":"<p>Objektorienterad programmering \u00e4r ett programmeringsparadigm som anv\u00e4nder \"objekt\" f\u00f6r att representera data och funktionalitet. Ett objekt \u00e4r en instans av en klass, som \u00e4r en mall eller ritning f\u00f6r att skapa objekt. Klasser kan inneh\u00e5lla b\u00e5de data (attribut eller egenskaper) och funktionalitet (metoder eller beteenden).</p>"},{"location":"material/cs/oop/#fyra-grundlaggande-principer","title":"Fyra grundl\u00e4ggande principer","text":"<ol> <li>Abstraktion: Fokusera p\u00e5 det v\u00e4sentliga och ignorera det ov\u00e4sentliga.</li> <li>Inkapsling: D\u00f6lj intern komplexitet och exponera endast n\u00f6dv\u00e4ndig information.</li> <li>Arv: Skapa nya klasser baserade p\u00e5 befintliga klasser.</li> <li>Polymorfism: Objekt kan ta m\u00e5nga former, och ses som en instans av sin egen klass eller av en basklass.</li> </ol>"},{"location":"material/cs/oop/#lankar","title":"L\u00e4nkar","text":"<ul> <li>Microsoft Learn Object Oriented Fundamentals</li> <li>Christopher Okhravi</li> </ul>"},{"location":"material/cs/oop/abstraction/","title":"Abstraktion","text":"<p>Abstraktion \u00e4r en grundl\u00e4ggande princip inom objektorienterad programmering (OOP) som handlar om att fokusera p\u00e5 det v\u00e4sentliga och ignorera det ov\u00e4sentliga. Genom att anv\u00e4nda abstraktion kan vi skapa modeller av verkliga objekt eller system genom att identifiera de viktigaste egenskaperna och beteendena, samtidigt som vi d\u00f6ljer detaljer som inte \u00e4r relevanta f\u00f6r den aktuella kontexten.</p> <p>En <code>person</code> i verkligheten \u00e4r ytterst komplex. Om vi i ett datasystem skall hantera information om en person beh\u00f6ver vi inte all denna komplexitet. Vi kan ist\u00e4llet skapa en abstraktion av en person som inneh\u00e5ller de egenskaper och beteenden som \u00e4r relevanta f\u00f6r v\u00e5rt system.</p> <p>Exempel p\u00e5 en abstraktion av en person i C#:</p> <pre><code>public class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n</code></pre> <p>I detta fall bryr vi oss tydligen bara om att personen heter n\u00e5got och hur gammal den \u00e4r. Vi har ignorerat andra detaljer som h\u00e5rf\u00e4rg, l\u00e4ngd, vikt, yrke, intressen, familjef\u00f6rh\u00e5llanden och s\u00e5 vidare.</p> <p>I ett annat system kanske vi beh\u00f6ver h\u00e5lla andra detaljer om en person. Vi har d\u00e5 en annan abstraktion av en person:</p> <pre><code>public class Person\n{\n    public string Name { get; set; }\n    public string SocialSecurityNumber { get; set; }\n    public string Position { get; set; }\n    public decimal Salary { get; set; }\n    public DateTime HireDate { get; set; }\n}\n</code></pre> <p>Att kunna analysera ett system och hitta de v\u00e4sentliga delarna \u00e4r en viktig f\u00e4rdighet inom mjukvaruutveckling. Genom att anv\u00e4nda abstraktion kan vi skapa enklare och mer hanterbara modeller av komplexa system, vilket underl\u00e4ttar b\u00e5de design och implementering av programvara.</p>"},{"location":"material/cs/oop/classes/","title":"Intro","text":"<p>Klasser \u00e4r ett fundamentalt koncept inom objektorienterad programmering (OOP). En klass \u00e4r som en mall eller ritning som definierar egenskaper (attribut) och beteenden (metoder) f\u00f6r objekt som skapas fr\u00e5n den klassen.</p> <p>Eh, va?</p> <p>Klasser och objekt anv\u00e4nds f\u00f6r att strukturera kod p\u00e5 ett s\u00e4tt som g\u00f6r det l\u00e4ttare att hantera komplexa system genom att gruppera relaterade data och funktioner tillsammans. </p>"},{"location":"material/cs/oop/classes/#exempel","title":"Exempel","text":"<p>S\u00e4g att vi vill hantera data om saker som ska g\u00f6ras, l\u00e5t oss kalla det f\u00f6r en Todo. F\u00f6r att gruppera all information p\u00e5 ett bra s\u00e4tt kan vi t\u00e4nka p\u00e5 en *todo som en sak som har vissa egenskaper och som kan utf\u00f6ra vissa handlingar:</p> <ul> <li>En Todo kan exempelvis t\u00e4nkas ha den h\u00e4r informationen:<ul> <li>Ett namn (ex. \"Handla mat\")</li> <li>En beskrivning (ex. \"Mj\u00f6lk, \u00e4gg, br\u00f6d\")</li> <li>Ett datum n\u00e4r den ska vara klar</li> <li>En status som visar om den \u00e4r klar eller inte</li> </ul> </li> </ul> <p>Vi kan \"modellera\" detta i C# genom att skapa en klass som heter <code>Todo</code>:</p> <pre><code>public class Todo\n{\n    public string Name;\n    public string Description;\n    public DateTime DueDate;\n    public bool IsCompleted;\n}\n</code></pre> <p>Vi har nu skapat en mall som beskriver hur en Todo ser ut. Vi kan nu skapa massa olika Todo-objekt utifr\u00e5n denna mall och anv\u00e4nda i v\u00e5r kod:</p> <pre><code>Todo myTodo = new Todo(); // Kan ocks\u00e5 skrivas kortare som: Todo myTodo = new();\nmyTodo.Name = \"Handla mat\";\nmyTodo.Description = \"Mj\u00f6lk, \u00e4gg, br\u00f6d\";\nmyTodo.DueDate = new DateTime(2024, 5, 1);\nmyTodo.IsCompleted = false;\n</code></pre> <p>Detta objekt <code>myTodo</code> \u00e4r en instans av klassen <code>Todo</code>, och vi kan skapa s\u00e5 m\u00e5nga olika Todo-objekt vi vill med olika information i. Om detta inte hade varit ett difitalt system kan du t\u00e4nka p\u00e5 varje <code>Todo</code>-objekt som en fysisk lapp med information om en sak som ska g\u00f6ras, samt en ruta att bocka av n\u00e4r den \u00e4r klar.</p> <ul> <li>En Todo kan ocks\u00e5 t\u00e4nkas kunna g\u00f6ra vissa saker:<ul> <li>Markeras som klar eller inte klar</li> <li>Visa sin information p\u00e5 ett sammanh\u00e5llet och snyggt s\u00e4tt</li> </ul> </li> </ul> <p>Vi kan l\u00e4gga till dessa beteenden som metoder i v\u00e5r <code>Todo</code>-klass:</p> <pre><code>public class Todo\n{\n    public string Name;\n    public string Description;\n    public DateTime DueDate;\n    public bool IsCompleted;\n\n    public void MarkAsCompleted()\n    {\n        IsCompleted = true;\n    }\n\n    public void DisplayInfo()\n    {\n        Console.WriteLine($\"Todo: {Name}\");\n        Console.WriteLine($\"Description: {Description}\");\n        Console.WriteLine($\"Due Date: {DueDate.ToShortDateString()}\");\n        Console.WriteLine($\"Completed: {IsCompleted}\");\n    }\n}\n</code></pre> <p>Nu kan vi anv\u00e4nda dessa metoder p\u00e5 v\u00e5ra Todo-objekt:</p> <p><pre><code>myTodo.MarkAsCompleted();\nmyTodo.DisplayInfo();\n</code></pre> En viktig sak att notera med metoder p\u00e5 objekt \u00e4r att de tillh\u00f6r just det objektet. <code>MarkAsCompleted</code>-metoden \u00e4ndrar <code>IsCompleted</code>-egenskapen f\u00f6r just det objektet den anropas p\u00e5, inte p\u00e5 n\u00e5got annat objekt. </p> <p>Detta \u00e4r grunderna i hur klasser och objekt fungerar i C#. Genom att anv\u00e4nda klasser kan vi organisera v\u00e5r kod p\u00e5 ett s\u00e4tt som g\u00f6r det l\u00e4ttare att f\u00f6rst\u00e5, underh\u00e5lla och \u00e5teranv\u00e4nda. L\u00e4s nu p\u00e5 mer om de olika principerna f\u00f6r objektorienterad programmering (OOP) som inkapsling, arv och polymorfism f\u00f6r att f\u00e5 en djupare f\u00f6rst\u00e5else av hur klasser kan anv\u00e4ndas effektivt.</p>"},{"location":"material/cs/oop/classes/#klasser-och-objekt","title":"Klasser och objekt","text":"<p>Skillnaden mellan klasser och objekt \u00e4r att:</p> <ul> <li>En klass kan ses som en beskrivning f\u00f6r hur ett objekt \u00e4r och fungerar. S\u00e5 s\u00e4g att vi skriver en beskrivning av hur bilar \u00e4r och fungerar. Den beskrivningen kanske s\u00e4ger att:<ul> <li>En bil har en f\u00e4rg, ett m\u00e4rke, en modell och en max-hastighet</li> <li>En bil kan starta, stanna och k\u00f6ra Detta betyder ju dock inte att det \u00e4nnu finns n\u00e5gon speciell bil, utan bara en beskrivning av hur bilar \u00e4r och fungerar.</li> </ul> </li> <li>Ett objekt kan ses som n\u00e5got som faktiskt finns. S\u00e5 vi kan anv\u00e4nda f\u00f6reg\u00e5ende bil-klass f\u00f6r att skapa faktiska bilar. Vi kan med klassens hj\u00e4lp skapa ett bil-objekt med egenskaperna r\u00f6d f\u00e4rg, Volvo som m\u00e4rke, XC90 som modell och 300 som max-hastighet. Detta bil-objekt g\u00e5r nu att anv\u00e4nda till n\u00e5got konkret, genom att starta, stanna och k\u00f6ra.</li> </ul>"},{"location":"material/cs/oop/classes/#abstrakta-klasser","title":"Abstrakta klasser","text":"<p>Abstrakta klasser \u00e4r klasser som inte kan instansieras direkt, utan m\u00e5ste \u00e4rvas av andra klasser. De anv\u00e4nds f\u00f6r att definiera gemensam funktionalitet och struktur som kan delas av flera relaterade klasser, men d\u00e4r det inte \u00e4r relevant att instansiera sj\u00e4lva den abstrakta klassen.</p> <p>Exempel: En abstrakt klass 'Shape' kan definiera gemensamma egenskaper och metoder f\u00f6r olika former som 'Circle' och 'Rectangle', men du kan inte skapa en instans av 'Shape' direkt. </p> <p>En abstrakt klass kan ocks\u00e5 definiera abstrakta metoder, som \u00e4r metoder utan implementation som m\u00e5ste implementeras av subklasserna.</p> <p>Exempel: En <code>Shape</code>-klass kan ha en abstrakt metod <code>CalculateArea()</code> som m\u00e5ste implementeras av alla subklasser.</p> <pre><code>public abstract class Shape\n{\n    public abstract double CalculateArea();\n}\n</code></pre>"},{"location":"material/cs/oop/classes/#lankar","title":"L\u00e4nkar","text":"<p>Medlemmar</p>"},{"location":"material/cs/oop/constructors/","title":"Konstruktorer","text":"<p>En konstruktor \u00e4r en speciell metod som anropas n\u00e4r ett objekt av en klass skapas. Den anv\u00e4nds f\u00f6r att initiera objektets egenskaper med specifika v\u00e4rden vid skapandet av objektet.</p>"},{"location":"material/cs/oop/constructors/#exempel-pa-konstruktor","title":"Exempel p\u00e5 konstruktor","text":"<pre><code>public class TodoItem\n{\n    public string Title { get; set; }\n    public bool IsDone { get; set; }\n\n    // Konstruktor\n    // Namnet m\u00e5ste vara samma som klassens namn\n    // OBS! Ingen returtyp, inte ens void. Det konstruktorn returnerar alltid en instans av klassen\n    public TodoItem(string title)\n    {\n        Title = title;\n        IsDone = false;\n    }\n}\n</code></pre> <p>I exemplet ovan har vi en klass <code>TodoItem</code> med en konstruktor som tar en parameter <code>title</code>. N\u00e4r vi skapar ett nytt objekt av <code>TodoItem</code> m\u00e5ste vi ange ett v\u00e4rde f\u00f6r <code>title</code>, och konstruktorn kommer att s\u00e4tta <code>Title</code>-egenskapen till det v\u00e4rdet och <code>IsDone</code> till <code>false</code> som standard.</p> <p>Vi kan skapa en instans av <code>TodoItem</code> s\u00e5 h\u00e4r:</p> <pre><code>TodoItem myTodo = new TodoItem(\"L\u00e4r dig om konstruktorer\");\nConsole.WriteLine(myTodo.Title); // Output: L\u00e4r dig om konstruktorer\nConsole.WriteLine(myTodo.IsDone); // Output: False\n</code></pre>"},{"location":"material/cs/oop/constructors/#constructor-overloading","title":"Constructor Overloading","text":"<p>En klass kan ha flera konstruktorer med olika parametrar, vilket kallas f\u00f6r \"constructor overloading\". Detta g\u00f6r det m\u00f6jligt att skapa objekt p\u00e5 olika s\u00e4tt beroende p\u00e5 vilka v\u00e4rden som \u00e4r tillg\u00e4ngliga vid skapandet.</p> <pre><code>public class TodoItem\n{\n    public string Title { get; set; }\n    public bool IsDone { get; set; }\n\n    // Konstruktor\n    public TodoItem(string title)\n    {\n        Title = title;\n        IsDone = false;\n    }\n\n    // \u00d6verlagrad konstruktor\n    public TodoItem(string title, bool isDone)\n    {\n        Title = title;\n        IsDone = isDone;\n    }\n}\n\nNu kan vi skapa `TodoItem`-objekt p\u00e5 tv\u00e5 olika s\u00e4tt:\n\n```csharp\nTodoItem myTodo1 = new TodoItem(\"L\u00e4r dig om konstruktorer\");\nTodoItem myTodo2 = new TodoItem(\"L\u00e4r dig om \u00f6verlagrade konstruktorer\", true);\n</code></pre> <p>Detta \u00e4r v\u00e4ldigt likt \"method overloading\".</p>"},{"location":"material/cs/oop/constructors/#primary-constructors","title":"Primary Constructors","text":"<p>I .NET 8 introducerades \"primary constructors\" som ett s\u00e4tt att f\u00f6renkla syntaxen f\u00f6r klasser som huvudsakligen anv\u00e4nds f\u00f6r att h\u00e5lla data. En primary constructor definieras direkt i klassens deklaration och kan anv\u00e4ndas f\u00f6r att initiera egenskaper.</p> <pre><code>public class TodoItem(string title, bool isDone = false) // Primary constructor\n{\n    public string Title { get; set; } = title;\n    public bool IsDone { get; set; } = isDone;\n}\n</code></pre>"},{"location":"material/cs/oop/encapsulation/","title":"Inkapsling &amp; \u00e5tkomstmodifierare","text":"<p>Inkapsling \u00e4r ett grundl\u00e4ggande koncept inom objektorienterad programmering. Det inneb\u00e4r att man d\u00f6ljer ett objekts interna data och implementation<sup>1</sup> fr\u00e5n omv\u00e4rlden.   </p> <p>D\u00f6lja?</p> <p>Med \"d\u00f6lja\" menas h\u00e4r att g\u00f6ra data och implementation otillg\u00e4nglig f\u00f6r kod utanf\u00f6r klassen. Detta uppn\u00e5s genom att anv\u00e4nda \u00e5tkomstmodifierare (access modifiers) som <code>public</code>, <code>private</code>, <code>protected</code> och <code>internal</code> f\u00f6r att begr\u00e4nsa \u00e5tkomsten till klassens medlemmar.</p> <p>Intern data?</p> <p>De variabler och metoder som \u00e4r deklarerade inom en klass och som inte \u00e4r direkt \u00e5tkomliga fr\u00e5n kod utanf\u00f6r<sup>2</sup> klassen.  Dvs, alla privata medlemmar<sup>3</sup>.</p> <p>Omv\u00e4rlden?</p> <p>Kod som inte \u00e4r en del av objektet, dvs kod som inte \u00e4r deklarerad inom samma klass. Kod som vill interagera med objektet m\u00e5ste g\u00f6ra det via objektets publika gr\u00e4nssnitt, dvs publika metoder och egenskaper.</p>"},{"location":"material/cs/oop/encapsulation/#exempel","title":"Exempel","text":"<p>(INFOGA BILD)</p>"},{"location":"material/cs/oop/encapsulation/#varfor-ar-det-viktigt","title":"Varf\u00f6r \u00e4r det viktigt?","text":"<ul> <li>S\u00e4kerhet: Inkapsling minskar risken f\u00f6r att andra programmerare beg\u00e5r misstag.</li> <li>Modularitet: Koden blir l\u00e4ttare att f\u00f6rst\u00e5 n\u00e4r varje klass har ett tydligt ansvar och gr\u00e4nssnitt ut\u00e5t.</li> <li>Underh\u00e5llbarhet: Genom att d\u00f6lja interna detaljer kan klassen \u00e4ndras internt utan risk att p\u00e5verka annan kod som anv\u00e4nder klassen.</li> </ul> <p>Att f\u00f6rst\u00e5 och till\u00e4mpa inkapsling \u00e4r ett viktigt steg i att bli en skicklig programmerare, eftersom det fr\u00e4mjar god koddesign och underl\u00e4ttar utveckling av komplexa system.</p>"},{"location":"material/cs/oop/encapsulation/#kodexempel","title":"Kodexempel:","text":"<pre><code>public class BankAccount\n{\n    // Privat f\u00e4lt, inte \u00e5tkomligt utanf\u00f6r klassen\n    private decimal balance;\n\n    // Publik metod f\u00f6r att s\u00e4tta in pengar\n    public void Deposit(decimal amount)\n    {\n        if (amount &gt; 0) balance += amount;\n    }\n\n    // Publik metod f\u00f6r att ta ut pengar\n    public void Withdraw(decimal amount)\n    {\n        //Ta inte ut negativa belopp (f\u00f6r d\u00e5 skulle ju saldot \u00f6ka!)\n        //Ta bara ut pengar om det finns tillr\u00e4ckligt med saldo\n        if (amount &gt; 0 &amp;&amp; amount &lt;= balance) balance -= amount;\n    }\n\n    // Publik egenskap f\u00f6r att l\u00e4sa saldot\n    public decimal Balance\n    {\n        get { return balance; }\n    }\n}\n\n//Nedanst\u00e5ende kod kommer att skapa ett BankAccount-objekt och anv\u00e4nda dess publika metoder \n//och egenskaper. Denna kod anses vara \"utanf\u00f6r\" BankAccount-klassen. D\u00e4rf\u00f6r kan vi bara \n//interagera med objektet account via dess publika metoder och egenskaper.\npublic class Program\n{\n    public static void Main()\n    {\n        BankAccount account = new BankAccount();\n        account.Deposit(100);\n        account.Withdraw(30);\n        Console.WriteLine($\"Nuvarande saldo: {account.Balance}\"); // Output: Nuvarande saldo: 70\n\n        // F\u00f6ljande rad skulle orsaka ett kompileringsfel eftersom 'balance' \u00e4r privat\n        // Console.WriteLine(account.balance); // Fel!\n    }\n}\n</code></pre>"},{"location":"material/cs/oop/encapsulation/#tips","title":"Tips","text":"<ul> <li>B\u00f6rja alltid med att g\u00f6ra medlemmar <code>private</code> och \u00f6ka \u00e5tkomsten endast om det beh\u00f6vs.</li> <li>Anv\u00e4nd PascalCase f\u00f6r publika metoder och egenskaper. </li> <li>Anv\u00e4nd camelCase f\u00f6r privata f\u00e4lt (eventuellt med understreck _)</li> <li>Inkapsling hj\u00e4lper till att f\u00f6rebygga oavsiktliga \u00e4ndringar och buggar.</li> <li>F\u00f6rbereder f\u00f6r Teamarbete: I professionella milj\u00f6er \u00e4r god inkapsling avg\u00f6rande f\u00f6r samarbete och underh\u00e5ll.</li> </ul> <ol> <li> <p>Med implementation menas h\u00e4r hur en klass \u00e4r skriven och uppbyggd, dvs vilka medlemmar den har och hur dessa fungerar.\u00a0\u21a9</p> </li> <li> <p>Med utanf\u00f6r menas allts\u00e5 kod som inte ligger innanf\u00f6r det kodblock som definierar klassen. Det kan vara i en annan klass, i en annan metod, eller i ett annat namespace. Det finns olika niv\u00e5er av \u00e5tkomstkontroll i C#, s\u00e5som <code>private</code>, <code>protected</code>, <code>internal</code> och <code>public</code>. Dessa niv\u00e5er best\u00e4mmer hur och var medlemmar av en klass kan n\u00e5s fr\u00e5n andra st\u00e4llen i koden.\u00a0\u21a9</p> </li> <li> <p>Med medlemmar menas variabler och metoder som \u00e4r deklarerade inom en klass.\u00a0\u21a9</p> </li> </ol>"},{"location":"material/cs/oop/inheritance/","title":"Arv","text":"<p>Arv \u00e4r en grundl\u00e4ggande funktionalitet i objektorienterad programmering. Det inneb\u00e4r att en klass kan \u00e4rva medlemmar fr\u00e5n en annan klass. Den klass som \u00e4rver kallas f\u00f6r subklass eller child class, medan den klass som blir \u00e4rvd kallas f\u00f6r superklass eller basklass.</p> <p>S\u00e5 h\u00e4r skriver vi en basklass <code>Entity</code>:</p> <pre><code>public class Entity\n{\n    public int Id;\n    public DateTime CreatedAt;\n}\n</code></pre> <p>Vill vi nu \u00e4rva dessa egenskaper i en annan klass, t.ex. <code>Person</code>, s\u00e5 g\u00f6r vi det genom att anv\u00e4nda ett kolon (<code>:</code>):</p> <pre><code>public class Person : Entity\n{\n    public string Name;\n    public string Email;\n}\n</code></pre> <p>Person-klassen har nu automatiskt f\u00e4lten <code>Id</code> och <code>CreatedAt</code> fr\u00e5n Entity-klassen, ut\u00f6ver sina egna f\u00e4lt <code>Name</code> och <code>Email</code>.</p> <p>Vi kan skapa en instans av <code>Person</code> och anv\u00e4nda alla dess f\u00e4lt:</p> <pre><code>Person person = new Person();\nperson.Id = 1;\nperson.CreatedAt = DateTime.Now;\nperson.Name = \"Alice\";\nperson.Email = \"alice@epost.se\";\n</code></pre>"},{"location":"material/cs/oop/inheritance/#konstruktorer-och-arv","title":"Konstruktorer och arv","text":"<p>N\u00e4r en subklass skapas, anropas f\u00f6rst basklassens konstruktor innan subklassens konstruktor k\u00f6rs. Om basklassen har en parameterl\u00f6s konstruktor, anropas den automatiskt. Om basklassen har en konstruktor med parametrar, m\u00e5ste subklassen explicit anropa den med <code>base</code>-nyckelordet.</p> <pre><code>public class Entity\n{\n    public int Id;\n    public DateTime CreatedAt;\n\n    public Entity(int id)\n    {\n        Id = id;\n        CreatedAt = DateTime.Now;\n    }\n}\n\npublic class Person : Entity\n{\n    public string Name;\n    public string Email;\n\n    public Person(int id, string name, string email) : base(id) //H\u00e4r anropar vi basklassens konstruktor med : base(id)\n    {\n        Name = name;\n        Email = email;\n    }\n}\n</code></pre>"},{"location":"material/cs/oop/inheritance/#metoder-och-arv","title":"Metoder och arv","text":"<p>Subklasser kan ocks\u00e5 \u00e4rva metoder fr\u00e5n sina basklasser. Om en metod i basklassen \u00e4r markerad som <code>virtual</code>, kan subklassen override (skriva \u00f6ver) den med sin egen implementation.</p> <pre><code>public class Entity\n{\n    public int Id;\n    public DateTime CreatedAt;\n\n    public virtual string GetInfo()\n    {\n        return $\"Entity ID: {Id}, Created At: {CreatedAt}\";\n    }\n}\n\npublic class Person : Entity\n{\n    public string Name;\n    public string Email;\n\n    public override string GetInfo()\n    {\n        return base.GetInfo() + $\", Name: {Name}, Email: {Email}\";\n    }\n}\n</code></pre>"},{"location":"material/cs/oop/inheritance/#base-och-this","title":"base och this","text":"<p>I arvssammanhang anv\u00e4nds <code>base</code> f\u00f6r att referera till basklassens medlemmar, medan <code>this</code> refererar till den aktuella instansen av subklassen.</p> <pre><code>public class Person : Entity\n{\n    public string Name;\n    public string Email;\n\n    public Person(int id, string name, string email) : base(id)\n    {\n        this.Name = name; // 'this' refererar till den aktuella instansen av Person\n        this.Email = email;\n    }\n\n    public override string GetInfo()\n    {\n        return base.GetInfo() + $\", Name: {this.Name}, Email: {this.Email}\"; // 'base' refererar till Entity's GetInfo\n    }\n}\n</code></pre>"},{"location":"material/cs/oop/inheritance/#arv-och-polymorfism","title":"Arv och polymorfism","text":"<p>Polymorfism inneb\u00e4r att en subklass kan behandlas som en instans av sin basklass. Detta \u00e4r anv\u00e4ndbart n\u00e4r vi vill skapa generiska metoder eller datatyper som kan arbeta med olika typer av objekt. Till exempel:</p> <pre><code>public void PrintEntityInfo(Entity entity)\n{\n    Console.WriteLine(entity.GetInfo());\n}\n</code></pre> <p>H\u00e4r kan vi skicka in b\u00e5de <code>Entity</code>-objekt och <code>Person</code>-objekt till <code>PrintEntityInfo</code>-metoden, och den kommer att anropa r\u00e4tt <code>GetInfo</code>-metod beroende p\u00e5 vilken typ av objekt som skickas in.</p> <pre><code>Entity entity = new Entity(1);\nPerson person = new Person(2, \"Alice\", \"epost@exempel.se\");\n\nPrintEntityInfo(entity); // Anropar Entity's GetInfo\nPrintEntityInfo(person); // Anropar Person's GetInfo\n</code></pre> <p>Ett annat exempel, d\u00e4r vi anv\u00e4nder typen <code>object</code>, som \u00e4r basklassen f\u00f6r alla typer i C#, f\u00f6r att lagra referenser till olika objekt:</p> <pre><code>object person = new Person(); //Vi h\u00e5ller reda p\u00e5 en Person-instans som ett object\nobject entity = new Entity(); //Vi h\u00e5ller reda p\u00e5 en Entity-instans som ett object\n\nConsole.WriteLine(person.GetType().Name); // Skriver ut \"Person\"\nConsole.WriteLine(entity.GetType().Name); // Skriver ut \"Entity\"\n</code></pre>"},{"location":"material/cs/oop/interfaces/","title":"Interfaces","text":"<p>Ett interface \u00e4r ett s\u00e4tt att koppla loss kod som faktiskt g\u00f6r n\u00e5got fr\u00e5n koden som anropar den.  </p> <p>Ett fundamentalt koncept inom OOP \u00e4r \"code to an abstraction not an implementation\", vilket betyder att du helst inte ska referera till konkreta klasser utan den enklaste typen du kan f\u00f6r att fortfarande komma \u00e5t de n\u00f6dv\u00e4ndiga funktionerna hos ett objekt.  </p> <p>Ett s\u00e4tt att f\u00f6rklara interfaces \u00e4r att t\u00e4nka p\u00e5 dem som kontrakt. Ett interface definierar en upps\u00e4ttning metoder och egenskaper som en klass m\u00e5ste implementera om den vill \"skriva under\" p\u00e5 kontraktet. Detta g\u00f6r det m\u00f6jligt att skapa kod som \u00e4r mer flexibel och l\u00e4ttare att underh\u00e5lla, eftersom du kan byta ut implementationer utan att \u00e4ndra koden som anv\u00e4nder dem.</p> <p>Interfaces \u00e4r l\u00e4tt rent tekniskt, men kan vara sv\u00e5ra att f\u00f6rst\u00e5 konceptuellt och hur/n\u00e4r de ska anv\u00e4ndas.</p> <p>Det kan ibland vara sv\u00e5rt att se skillnaden mellan ett interface och en abstrakt klass. H\u00e4r \u00e4r n\u00e5gra viktiga skillnader: - En abstrakt klass kan inneh\u00e5lla b\u00e5de abstrakta metoder (utan implementation) och konkreta metoder (med implementation), medan ett interface endast kan inneh\u00e5lla metodsignaturer (utan implementation). - Abstrakta metoder m\u00e5ste overridas i en subklass, medan metoder i ett interface bara m\u00e5ste skrivas som en vanlig metod i den klass som implementerar interfacet. - Det g\u00e5r bara att \u00e4rva fr\u00e5n en klass, men det g\u00e5r att implementera flera interfaces.</p>"},{"location":"material/cs/oop/interfaces/#ett-enkelt-exempel","title":"Ett enkelt exempel","text":"<pre><code>public interface IDrawable\n{\n    void Draw();\n}\n\npublic class Circle : IDrawable\n{\n    public void Draw()\n    {\n        Console.WriteLine(\"Drawing a circle\");\n    }\n}\n\npublic class Square : IDrawable\n{\n    public void Draw()\n    {\n        Console.WriteLine(\"Drawing a square\");\n    }\n}\n</code></pre> <p>Klasserna <code>Circle</code> och <code>Square</code> s\u00e4gs h\u00e4r implementera  interfacet <code>IDrawable</code>. Detta inneb\u00e4r att de b\u00e5da m\u00e5ste ha metoden <code>Draw()</code>. Nu kan vi skapa en metod som tar emot en lista av <code>IDrawable</code>-objekt och anropar <code>Draw()</code> p\u00e5 varje objekt, utan att beh\u00f6va veta vilken typ av objekt det \u00e4r.</p> <pre><code>foreach (IDrawable drawable in drawables)\n{\n    drawable.Draw();\n}\n</code></pre>"},{"location":"material/cs/oop/interfaces/#interfaces-i-net","title":"Interfaces i .NET","text":"<p>M\u00e5nga av de grundl\u00e4ggande typerna i .NET anv\u00e4nder interfaces f\u00f6r att definiera gemensamma beteenden. H\u00e4r \u00e4r n\u00e5gra exempel:</p> <ul> <li><code>IEnumerable</code>: Definierar en metod f\u00f6r att f\u00e5 en enumerator som kan iterera genom en samling. Detta interface anv\u00e4nds av alla samlingstyper i .NET, inklusive listor, arrayer och dictionaries. Det g\u00f6r att du kan anv\u00e4nda <code>foreach</code>-satsen f\u00f6r att iterera genom samlingar.</li> <li><code>IDisposable</code>: Definierar en metod f\u00f6r att frig\u00f6ra resurser.     Detta interface anv\u00e4nds av klasser som hanterar resurser som beh\u00f6ver frig\u00f6ras n\u00e4r de inte l\u00e4ngre beh\u00f6vs, till exempel filstr\u00f6mmar eller databasanslutningar. Genom att implementera <code>IDisposable</code> kan du anv\u00e4nda <code>using</code>-satsen f\u00f6r att s\u00e4kerst\u00e4lla att resurser frig\u00f6rs korrekt.</li> </ul>"},{"location":"material/cs/oop/polymorphism/","title":"Polymorfism","text":"<p>Ordet \"polymorfism\" kommer fr\u00e5n grekiskan och betyder \"m\u00e5nga former\". Inom OOP inneb\u00e4r polymorfism att objekt kan ta m\u00e5nga former, vilket g\u00f6r det m\u00f6jligt att behandla objekt av olika klasser p\u00e5 ett enhetligt s\u00e4tt.</p> <p>Mer info kommer! Kolla p\u00e5 den h\u00e4r s\u00e5 l\u00e4nge och fundera p\u00e5 vad som h\u00e4nder:</p> <pre><code>List&lt;object&gt; objects = new List&lt;object&gt;();\n\nobjects.Add(new Dog());\nobjects.Add(new Cat());\nobjects.Add(new Car());\nobjects.Add(new Person());\n\nforeach (var obj in objects)\n{\n    Console.WriteLine(obj.ToString());\n}\n</code></pre>"},{"location":"material/cs/oop/properties/","title":"Properties","text":"<p>Microsofts dokumentation om properties \u00e4r bra: Using properties</p> <p>Properties \u00e4r ett s\u00e4tt att kapsla in f\u00e4lt i en klass, och ge kontrollerad \u00e5tkomst till dem. De fungerar som \"smarta\" f\u00e4lt som kan ha logik f\u00f6r att validera eller transformera data n\u00e4r de l\u00e4ses eller skrivs.</p> <p>Properties anv\u00e4nds ocks\u00e5 av m\u00e5nga olika ramverk och bibliotek i .NET-ekosystemet, s\u00e5 det \u00e4r en bra vana att anv\u00e4nda dem ist\u00e4llet f\u00f6r publika f\u00e4lt.</p> <p>Om du unders\u00f6ker .NETs standardbibliotek s\u00e5 kommer du att se att n\u00e4stan alla publika f\u00e4lt \u00e4r properties.</p>"},{"location":"material/cs/oop/properties/#vad-ar-en-property","title":"Vad \u00e4r en property?","text":"<p>En property \u00e4r en medlem i en klass. Den ser ut\u00e5t ut som ett f\u00e4lt p\u00e5 s\u00e5 s\u00e4tt att den kan l\u00e4sas och skrivas till med punktnotation. Men, en property \u00e4r egentligen en kombination av tv\u00e5 metoder: en <code>get</code>-metod och en <code>set</code>-metod.</p> <p>S\u00e5 h\u00e4r skrivs en fullst\u00e4ndig property:</p> <pre><code>private string name; // privat f\u00e4lt, kallas f\u00f6r *backing field*\n\npublic string Name   // publik property\n{\n    get \n    { \n        return name; // H\u00e4r returnerar vi v\u00e4rdet p\u00e5 det privata f\u00e4ltet `name`\n    }    \n    set \n    { \n        if (!string.IsNullOrWhiteSpace(value)) \n            name = value; \n        else \n            name = \"Noname\"; //Detta ser till att name aldrig blir en tom str\u00e4ng\n    }   \n}\n</code></pre>"},{"location":"material/cs/oop/properties/#auto-implemented-properties","title":"Auto-implemented properties","text":"<p>Det finns ocks\u00e5 en kortare syntax f\u00f6r properties som inte beh\u00f6ver n\u00e5gon validering. De kallas f\u00f6r auto-implemented properties, och \u00e4r v\u00e4ldigt vanliga:</p> <pre><code>public string Name { get; set; }\n</code></pre> <p>Auto-implemented properties heter s\u00e5 p\u00e5 grund av att kompilatorn automatiskt skapar ett privat <code>backing field</code> bakom kulisserna f\u00f6r att lagra v\u00e4rdet.</p>"},{"location":"material/cs/oop/properties/#properties-med-bara-get-eller-set","title":"Properties med bara get eller set","text":"<p>Det \u00e4r ocks\u00e5 m\u00f6jligt att skapa properties som bara har en <code>get</code>- eller en <code>set</code>-del. En property med bara en <code>get</code>-del \u00e4r read-only, medan en property med bara en <code>set</code>-del \u00e4r write-only.</p> <pre><code>public string ReadOnlyProperty { get; } // Kan bara l\u00e4sas\npublic string WriteOnlyProperty { set; } // Kan bara skrivas till\n</code></pre>"},{"location":"material/cs/oop/properties/#hur-satts-en-read-only-property","title":"Hur s\u00e4tts en read-only property?","text":"<p>Det kan g\u00f6ras p\u00e5 tv\u00e5 s\u00e4tt:</p> <ul> <li>I konstruktorn </li> <li>Genom en field initializer</li> </ul> Konstruktor-exempel<pre><code>public class Person\n{\n    public string Name { get; } // Read-only property\n\n    // S\u00e4tts i konstruktorn\n    public Person(string name)\n    {\n        Name = name; //Namnet kan nu aldrig \u00e4ndras efter att objektet \u00e4r skapat\n    }\n}\n</code></pre> Field initializer-exempel<pre><code>public class Person\n{\n    public string Name { get; } = \"Noname\"; // S\u00e4tts med en field initializer\n}\n</code></pre> <p>Gemensamt f\u00f6r dessa tv\u00e5 metoder \u00e4r att <code>Name</code>-propertyn inte kan \u00e4ndras utifr\u00e5n klassen efter att objektet har skapats. Den \u00e4r allts\u00e5 read-only. Alla dessa tre metoder kan kombineras i samma klass.</p>"},{"location":"material/cs/oop/solid/","title":"SOLID","text":"<p>SOLID \u00e4r fem grundprinciper f\u00f6r att skriva h\u00e5llbar, tydlig och l\u00e4tt-\u00e4ndrad kod i objektorienterad programmering. Varje bokstav st\u00e5r f\u00f6r en princip:</p>"},{"location":"material/cs/oop/solid/#srp-single-responsibility-principle","title":"SRP \u2013 Single Responsibility Principle","text":"<p>En klass ska ha ett enda ansvar. Den ska vara fokuserad p\u00e5 sitt syfte.</p> <p>Exempel: En <code>User</code>-klass ska bara hantera anv\u00e4ndardata, inte skicka e-post.</p>"},{"location":"material/cs/oop/solid/#ocp-openclosed-principle","title":"OCP \u2013 Open/Closed Principle","text":"<p>Klasser ska vara \u00f6ppna f\u00f6r utbyggnad men st\u00e4ngda f\u00f6r \u00e4ndring. Du ska kunna l\u00e4gga till ny funktionalitet utan att \u00e4ndra befintlig kod.</p> <p>Exempel: Anv\u00e4nd arv eller interfaces f\u00f6r att l\u00e4gga till nya beteenden.</p>"},{"location":"material/cs/oop/solid/#lsp-liskov-substitution-principle","title":"LSP \u2013 Liskov Substitution Principle","text":"<p>En underklass ska kunna ers\u00e4tta sin basklass utan att programmet slutar fungera.</p> <p>Exempel: Om <code>Dog</code> \u00e4r en subklass till <code>Animal</code>, ska du kunna anv\u00e4nda en <code>Dog</code> var som helst d\u00e4r en <code>Animal</code> f\u00f6rv\u00e4ntas.</p>"},{"location":"material/cs/oop/solid/#isp-interface-segregation-principle","title":"ISP \u2013 Interface Segregation Principle","text":"<p>Skapa flera sm\u00e5 interfaces ist\u00e4llet f\u00f6r ett stort med m\u00e5nga metoder. Detta f\u00f6r att klasser ska inte tvingas implementera metoder de inte beh\u00f6ver.</p> <p>Exempel: Ist\u00e4llet f\u00f6r ett stort <code>IMachine</code>-interface, skapa <code>IPrinter</code>, <code>IScanner</code> osv.</p>"},{"location":"material/cs/oop/solid/#dip-dependency-inversion-principle","title":"DIP \u2013 Dependency Inversion Principle","text":"<p>Koda mot abstraktioner, inte konkreta klasser.</p> <p>Exempel: Anv\u00e4nd interfaces eller abstrakta klasser f\u00f6r att minska beroenden mellan klasser.</p> <p>Det heter dependency inversion pga man v\u00e4nder p\u00e5 beroendena, s\u00e5 att h\u00f6g-niv\u00e5 moduler (tex business-logik) inte beror p\u00e5 l\u00e5g-niv\u00e5 moduler (till exempel databas-access), utan b\u00e5da beror p\u00e5 abstraktioner. </p> <p>DI-principen fr\u00e4mjar l\u00f6s koppling mellan komponenter i ett system, vilket g\u00f6r det l\u00e4ttare att underh\u00e5lla och testa koden.</p> <p>Exempel:</p> <pre><code>classDiagram\n\n    class HighLevelModule {\n        +performTask()\n    }\n\n    class LowLevelModule {\n        +execute()\n    }\n\n    class ITask {\n        &lt;&lt;interface&gt;&gt;\n        +execute()\n    }\n\n    HighLevelModule ..|&gt; ITask\n    LowLevelModule ..|&gt; ITask</code></pre> <p>L\u00e4nk till mer info om DI: Understanding the dependency inversion</p>"},{"location":"material/cs/oop/solid/#lankar","title":"L\u00e4nkar:","text":"<ul> <li>Stefano Santilli - SRP</li> <li>Stefano Santilli - OCP</li> <li>Stefano Santilli - LSP</li> <li>Stefano Santilli - ISP</li> <li>Stefano Santilli - DIP</li> </ul>"},{"location":"material/cs/oop/static/","title":"Statiska kontra instansmedlemmar","text":"<p>Den korta f\u00f6rklaringen \u00e4r: </p> <p>Statiska medlemmar tillh\u00f6r sj\u00e4lva klassen, medan instansmedlemmar tillh\u00f6r enskilda objekt (instanser) av klassen.</p> <p>Det \u00e4r inte sv\u00e5rare \u00e4n s\u00e5! Men f\u00f6r att f\u00f6rst\u00e5 vad de orden inneb\u00e4r m\u00e5ste du veta vad ett objekt \u00e4r.  </p> <p>En statisk variabel finns det bara en av, oavsett hur m\u00e5nga objekt (instanser) av klassen som skapas. Alla objekt delar p\u00e5 samma statiska variabel, eftersom det tillh\u00f6r klassen i sig.</p> <p>Instansmedlemmar d\u00e4remot, finns det kopior av f\u00f6r varje enskilt objekt som skapas, och kan d\u00e4rmed h\u00e5lla unik data f\u00f6r varje objekt.</p>"},{"location":"material/cs/oop/static/#exempel","title":"Exempel","text":"<p>Om en Person-klass hade haft en statisk namn-variabel, s\u00e5 skulle alla personer ha haft samma namn. Det \u00e4r d\u00e4rf\u00f6r namn-variabeln ist\u00e4llet \u00e4r en instansvariabel, s\u00e5 att varje person-objekt kan ha sitt eget namn.</p> <pre><code>public class Person\n{\n    public static int Population; // Statisk variabel som h\u00e5ller koll p\u00e5 antalet personer\n    public string Name; // Instansvariabel som h\u00e5ller koll p\u00e5 personens namn\n\n    public Person(string name)\n    {\n        Name = name;\n        Population++; // \u00d6ka populationen varje g\u00e5ng en ny person skapas\n    }\n}\n</code></pre>"},{"location":"material/cs/oop/static/#atkomst","title":"\u00c5tkomst","text":"<p>F\u00f6r att komma \u00e5t en statisk medlem anv\u00e4nds klassens namn, medan instansmedlemmar n\u00e5s via objektet:</p> <pre><code>Person newPerson = new Person(\"Alice\");\nConsole.WriteLine(newPerson.Name); // \u00c5tkomst till instansvariabel\nConsole.WriteLine(Person.Population); // \u00c5tkomst till statisk variabel, skriver ut 1.\n\nPerson anotherPerson = new Person(\"Bob\");\nConsole.WriteLine(anotherPerson.Name); // \u00c5tkomst till instansvariabel\nConsole.WriteLine(Person.Population); // \u00c5tkomst till statisk variabel, skriver nu ut 2.\n</code></pre> <p>I exemplet ovan kan vi se att <code>Population</code> \u00e4r en statisk variabel som vi n\u00e5r via <code>Person.Population</code>, medan <code>Name</code> \u00e4r en instansvariabel som vi n\u00e5r via <code>newPerson.Name</code>.</p> <p>Detta g\u00e4ller allts\u00e5 samtliga typer av medlemmar: variabler, metoder, egenskaper osv.</p>"},{"location":"material/cs/oop/types/","title":"Typsystemet i C","text":"<p>I C# \u00e4r allt baserat p\u00e5 typer. En typ definierar vilken sorts data en variabel kan h\u00e5lla och vilka operationer som kan utf\u00f6ras p\u00e5 den datan. Typer kan delas in i tv\u00e5 huvudkategorier: v\u00e4rdetyper och referenstyper.</p> <p>Kort f\u00f6rklarat: En v\u00e4rdetyp h\u00e5ller sj\u00e4lva v\u00e4rdet direkt, medan en referenstyp h\u00e5ller en referens (adress) till var v\u00e4rdet finns i minnet. Flera variabler kan referera till samma objekt i minnet n\u00e4r det g\u00e4ller referenstyper, medan varje variabel av en v\u00e4rdetyp har sitt eget unika v\u00e4rde.</p>"},{"location":"material/cs/oop/types/#vardetyper","title":"V\u00e4rdetyper","text":"<p>V\u00e4rdetyper inkluderar grundl\u00e4ggande datatyper som <code>int</code>, <code>float</code>, <code>bool</code>, och <code>char</code>. N\u00e4r du skapar en variabel av en v\u00e4rdetyp, lagras v\u00e4rdet direkt i den minnesplats som \u00e4r reserverad f\u00f6r den variabeln.</p> <pre><code>int a = 10;\nint b = a; // b f\u00e5r en kopia av v\u00e4rdet som ligger lagrat i a\nb = 20; // \u00c4ndrar b p\u00e5verkar inte a\nConsole.WriteLine(a); // Skriver ut 10\nConsole.WriteLine(b); // Skriver ut 20\n</code></pre>"},{"location":"material/cs/oop/types/#referenstyper","title":"Referenstyper","text":"<p>Referenstyper inkluderar klasser, arrayer, och str\u00e4ngar. N\u00e4r du skapar en variabel av en referenstyp, lagras en referens (adress) till objektet i minnet ist\u00e4llet f\u00f6r sj\u00e4lva v\u00e4rdet.</p> <pre><code>class Person\n{\n    public string Name;\n}\n\nPerson person1 = new Person();\nperson1.Name = \"Alice\";\nPerson person2 = person1; // person2 refererar till samma objekt som person1\nperson2.Name = \"Bob\"; // \u00c4ndrar Name via person2 och p\u00e5verkar d\u00e4rmed person1\nConsole.WriteLine(person1.Name); // Skriver ut \"Bob\"\nConsole.WriteLine(person2.Name); // Skriver ut \"Bob\"\n</code></pre>"},{"location":"material/cs/standardbibliotek/","title":"Standardbibliotek","text":"<p>Standardbiblioteket i .NET \u00e4r en samling av f\u00f6rdefinierade klasser, metoder och funktioner som ing\u00e5r i .NET-plattformen. Det erbjuder en m\u00e4ngd verktyg och funktioner som f\u00f6renklar utvecklingen av applikationer genom att tillhandah\u00e5lla \u00e5teranv\u00e4ndbara komponenter.</p> <p>Tv\u00e5 av de f\u00f6rsta metoderna en nyb\u00f6rjare i C# ofta st\u00f6ter p\u00e5 \u00e4r <code>Console.WriteLine()</code> och <code>Console.ReadLine()</code>. Dessa metoder tillh\u00f6r klassen <code>System.Console</code>, som \u00e4r en del av standardbiblioteket.</p>"},{"location":"material/cs/standardbibliotek/#systemconsole","title":"System.Console","text":"<p>Denna klass anv\u00e4nds f\u00f6r att hantera in- och utmatning i konsolapplikationer. Den inneh\u00e5ller metoder som <code>WriteLine</code> f\u00f6r att skriva text till konsolen och <code>ReadLine</code> f\u00f6r att l\u00e4sa in anv\u00e4ndarens inmatning.</p> <pre><code>Console.WriteLine(\"Hej, v\u00e4rlden!\"); // Skriver ut text till konsolen\nstring input = Console.ReadLine(); // L\u00e4ser in anv\u00e4ndarens inmatning\n</code></pre>"},{"location":"material/cs/standardbibliotek/#las-mer-om-standardbiblioteket-i-de-olika-sektionerna","title":"L\u00e4s mer om standardbiblioteket i de olika sektionerna!","text":""},{"location":"material/cs/standardbibliotek/console/","title":"Console","text":"<p>Console-klassen inneh\u00e5ller metoder och v\u00e4rden som \u00e4r anv\u00e4ndbara n\u00e4r vi g\u00f6r program som k\u00f6rs i just konsolen/terminalen.</p> <p>H\u00e4r \u00e4r n\u00e5gra exempel:</p> <pre><code>//Rensa sk\u00e4rmen\nConsole.Clear();\n\n//S\u00e4tt f\u00e4rgen p\u00e5 text\nConsole.ForegroundColor = ConsoleColor.Red;\n//S\u00e4tt bakgrundsf\u00e4rg\nConsole.BackgroundColor = ConsoleColor.Gray;\n\n//S\u00e4tt mark\u00f6rens position. N\u00e4sta `Write` eller `WriteLine` kommer utg\u00e5 d\u00e4rifr\u00e5n\nConsole.SetCursorPosition(3, 4); //3 tecken in, 4 rader ned\n\nConsole.CursorVisible = false; // D\u00f6ljer mark\u00f6ren\n\nint left = Console.CursorLeft; // Positionen p\u00e5 mark\u00f6ren just nu i sidled\nint top = Console.CursorTop; // Rad-positionen p\u00e5 mark\u00f6ren just nu\n</code></pre> Ett enkelt ritprogarm / snake-spel <pre><code>int posX = 0;\nint posY = 0;\n\nwhile (true)\n{\n    if (Console.KeyAvailable)\n    {\n        var key = Console.ReadKey(true);\n        if (key.Key == ConsoleKey.Escape)\n            break;\n        if (key.Key == ConsoleKey.LeftArrow)\n        {\n            posX--;\n        }\n        if (key.Key == ConsoleKey.RightArrow)\n        {\n            posX++;\n        }\n        if (key.Key == ConsoleKey.UpArrow)\n        {\n            posY--;\n        }\n        if (key.Key == ConsoleKey.DownArrow)\n        {\n            posY++;\n        }\n\n        Console.SetCursorPosition(posX, posY);\n        Console.Write(\"X\");\n    }\n}\n</code></pre>"},{"location":"material/cs/standardbibliotek/datetime/","title":"Datum &amp; tid","text":"<p>Datum och tid en en hel vetenskap i sig. I .NET finns en rad klasser som hj\u00e4lper oss att hantera datum och tid p\u00e5 ett bra s\u00e4tt. </p> <p>Den vanligaste klassen \u00e4r <code>DateTime</code>, som representerar ett specifikt datum och tid. Dock s\u00e4ger den inte exakt vilken tid det \u00e4r d\u00e5 den inte tar h\u00e4nsyn till tidszoner. F\u00f6r att hantera tidzoner m\u00e5ster du anv\u00e4nda <code>DateTimeOffset</code>, som tar h\u00e4nsyn till avst\u00e5ndet fr\u00e5n UTC (Coordinated Universal Time). Se, redan h\u00e4r blev det lite kr\u00e5ngligt!</p> <p>Hursomhelst, s\u00e5 h\u00e4r skapar du ett <code>DateTimeOffset</code>-objekt som representerar just nuvarande tid:</p> <pre><code>DateTimeOffset now = DateTimeOffset.Now;\nConsole.WriteLine(now); // Exempelutskrift: 2024-06-15 14:30:00 +02:00\n</code></pre> <p>Det g\u00e5r ocks\u00e5 att skapa ett <code>DateTimeOffset</code>-objekt med ett specifikt datum och tid:</p> <pre><code>DateTimeOffset specificDate = new DateTimeOffset(2023, 12, 25, 10, 30, 0, TimeSpan.FromHours(1)); // 25 december 2023, 10:30 AM, UTC+1\nConsole.WriteLine(specificDate); // Exempelutskrift: 2023-12-25 10:30:00 +01:00\n</code></pre>"},{"location":"material/cs/standardbibliotek/file/","title":"File","text":"<p>File-klassen inneh\u00e5ller metoder f\u00f6r att arbeta med filer. N\u00e5gra vanliga saker att g\u00f6ra med den \u00e4r:</p>"},{"location":"material/cs/standardbibliotek/file/#lasa-och-skriva-text-frantill-filer","title":"L\u00e4sa och skriva text fr\u00e5n/till filer","text":"<pre><code>string filePath = \"exempel.txt\";\n\nFile.WriteAllText(filePath, \"Detta \u00e4r en exempeltext.\");\n\nstring content = File.ReadAllText(filePath);\nConsole.WriteLine(content);\n</code></pre> <p>I detta exempel skapar vi en fil som heter <code>exempel.txt</code> (den skapas automatiskt om vi f\u00f6rs\u00f6ker skriva till den och den inte finns, annars skrivs den \u00f6ver med ny text om den redan finns), skriver text till den och l\u00e4ser sedan tillbaka texten och skriver ut den i konsolen.</p> <p>Det g\u00e5r ocks\u00e5 att l\u00e4sa och skriva alla rader i en fil som en array av str\u00e4ngar:</p> <pre><code>string[] lines = [\"F\u00f6rsta raden\", \"Andra raden\", \"Tredje raden\"];\nFile.WriteAllLines(filePath, lines);\n\nstring[] readLines = File.ReadAllLines(filePath);\nforeach (string line in readLines)\n{\n    Console.WriteLine(line);\n}\n</code></pre> <p>Det kan vara anv\u00e4ndbart om du vill arbeta med varje rad separat.</p>"},{"location":"material/cs/standardbibliotek/file/#vanliga-filoperationer","title":"Vanliga filoperationer","text":"<p>File-klassen har ocks\u00e5 metoder f\u00f6r att kopiera, flytta, ta bort och kolla om en fil finns:  </p> <pre><code>string sourcePath = \"exempel.txt\";\nstring destinationPath = \"exempel_kopia.txt\";\n\nFile.Copy(sourcePath, destinationPath); // Kopiera filen\n\nbool fileExists = File.Exists(destinationPath); // Kolla om filen finns\nConsole.WriteLine($\"Filen finns: {fileExists}\");\n\nFile.Delete(destinationPath); // Ta bort filen\n</code></pre> <p>Det \u00e4r vanligt att anv\u00e4nda <code>File.Exists</code> f\u00f6r att kolla om en fil finns innan den ska l\u00e4sas in eller tas bort.</p> <pre><code>string sourcePath = \"exempel.txt\";\n\nif (File.Exists(sourcePath))\n{\n    string content = File.ReadAllText(sourcePath);\n    Console.WriteLine(content);\n}\nelse\n{\n    Console.WriteLine(\"Filen finns inte.\");\n}\n</code></pre> <p>File-klassen inneh\u00e5ller m\u00e5nga fler anv\u00e4ndbara metoder f\u00f6r att arbeta med filer. F\u00f6r en fullst\u00e4ndig lista och detaljerad dokumentation kan du bes\u00f6ka Microsofts officiella dokumentation: https://learn.microsoft.com/en-us/dotnet/api/system.io.file</p>"},{"location":"material/cs/standardbibliotek/list/","title":"List&lt;T&gt;","text":"<p>Arrayer \u00e4r ju bra och grunden till att kunna hantera flera v\u00e4rden i en och samma variabel. Men, de \u00e4r ganska otympliga att anv\u00e4nda i m\u00e5nga olika situationer. D\u00e4rf\u00f6r finns det en mer flexibel datastruktur som heter List i .NET:s standardbibliotek.</p> Exempel p\u00e5 List<pre><code>List&lt;int&gt; numbers = new List&lt;int&gt;(); //Skapar en tom lista av heltal\n\nnumbers.Add(10); //L\u00e4gger till 10 i listan\nnumbers.Add(20); //L\u00e4gger till 20 i listan\nConsole.WriteLine(numbers.Count); //Skriver ut antal element i listan (2)\nConsole.WriteLine(numbers[0]); //Skriver ut f\u00f6rsta elementet i listan (10)\n</code></pre> <p>List \u00e4r en generisk datastruktur, vilket betyder att du m\u00e5ste specificera vilken typ av v\u00e4rden listan ska inneh\u00e5lla inom vinkelparenteser <code>&lt; &gt;</code> n\u00e4r du skapar den. Du kan skapa listor av vilken datatyp som helst, inklusive egna klasser.</p> <p>Vanliga operationer med List:</p> Operation Exempel Skapa en tom lista av en viss typ <code>List&lt;string&gt; names = new List&lt;string&gt;();</code> L\u00e4gg till ett element i slutet av listan <code>names.Add(\"Alice\");</code> Ta bort det f\u00f6rsta f\u00f6rekomsten av ett element fr\u00e5n listan <code>names.Remove(\"Alice\");</code> H\u00e4mta elementet p\u00e5 en viss indexposition <code>string first = names[0];</code> Returnera antalet element i listan <code>int count = names.Count;</code> Ta bort alla element fr\u00e5n listan <code>names.Clear();</code> Kolla om ett element finns i listan <code>bool exists = names.Contains(\"Alice\");</code> Exempel p\u00e5 List<pre><code>List&lt;string&gt; people = [\"Kim\", \"Sam\", \"Bob\", \"Tom\"]; //Count = 3 (varierar)\nList&lt;int&gt; age = [23, 99, 2];\n\nfor (int i = 0; i &lt; people.Count; i++)\n{\n    Console.WriteLine($\"{people[i]} \u00e4r {age[i]} gammal.\");\n}\n</code></pre>"},{"location":"material/cs/standardbibliotek/math/","title":"Math","text":"<p>Matte \u00e4r ofta viktigt p\u00e5 olika s\u00e4tt inom progammering. C# har d\u00e4rf\u00f6r en inbyggd klass som heter <code>Math</code> som inneh\u00e5ller m\u00e5nga anv\u00e4ndbara matematiska funktioner och konstanter. H\u00e4r \u00e4r de vanligaste:</p> Funktion/Konstant Beskrivning Exempel <code>Math.Abs(x)</code> Returnerar det absoluta v\u00e4rdet av <code>x</code> (dvs. tar bort eventuellt negativt tecken). <code>Math.Abs(-5)</code> ger <code>5</code> <code>Math.Pow(x, y)</code> Returnerar <code>x</code> upph\u00f6jt till <code>y</code>. <code>Math.Pow(2, 3)</code> ger <code>8</code> (2^3) <code>Math.Sqrt(x)</code> Returnerar kvadratroten av <code>x</code>. <code>Math.Sqrt(16)</code> ger <code>4</code> <code>Math.Round(x)</code> Returnerar <code>x</code> avrundat till n\u00e4rmsta heltal. <code>Math.Round(4.6)</code> ger <code>5</code> <code>Math.Ceiling(x)</code> Returnerar det minsta heltalet som \u00e4r st\u00f6rre \u00e4n eller lika med <code>x</code>. <code>Math.Ceiling(4.2)</code> ger <code>5</code> <code>Math.Floor(x)</code> Returnerar det st\u00f6rsta heltalet som \u00e4r mindre \u00e4n eller lika med <code>x</code>. <code>Math.Floor(4.6)</code> ger <code>4</code> <code>Math.Min(x, y)</code> Returnerar det minsta av <code>x</code> och <code>y</code>. <code>Math.Min(3, 5)</code> ger <code>3</code> <code>Math.Max(x, y)</code> Returnerar det st\u00f6rsta av <code>x</code> och <code>y</code>. <code>Math.Max(3, 5)</code> ger <code>5</code> <code>Math.PI</code> Konstanten \u03c0 (cirka 3.14159). <code>Math.PI</code> ger <code>3.14159...</code> <code>Math.Sin(x)</code> Returnerar sinus av <code>x</code> (i radianer). <code>Math.Sin(Math.PI / 2)</code> ger <code>1</code> <code>Math.Cos(x)</code> Returnerar cosinus av <code>x</code> (i radianer). <code>Math.Cos(0)</code> ger <code>1</code> <code>Math.Tan(x)</code> Returnerar tangens av <code>x</code> (i radianer). <code>Math.Tan(Math.PI / 4)</code> ger <code>1</code> <code>Math.Log(x)</code> Returnerar den naturliga logaritmen (bas e) av <code>x</code>. <code>Math.Log(Math.E)</code> ger <code>1</code> <p>Exempel:</p> <pre><code>double radius = 5;\ndouble area = Math.PI * Math.Pow(radius, 2); // Area av en cirkel\nConsole.WriteLine($\"Area: {area}\");\n\ndouble hypotenusa = Math.Sqrt(Math.Pow(3, 2) + Math.Pow(4, 2)); // Pythagoras sats\nConsole.WriteLine($\"Hypotenusa: {hypotenusa}\");\n</code></pre> <p>Om du vill rita ut en v\u00e5g med * p\u00e5 sk\u00e4rmen kan du anv\u00e4nda <code>Math.Sin</code> f\u00f6r att ber\u00e4kna y-v\u00e4rdena:</p> <pre><code>for (int y = 0; y &lt; 20; y++)\n{\n    for (int x = 0; x &lt; 120; x++)\n    {\n        double waveY = Math.Sin(x * 0.1) * 10 + 10; // Skala och f\u00f6rskjut y-v\u00e4rdet\n        int waveYInt = (int)Math.Round(waveY); // Avrunda till n\u00e4rmsta heltal\n\n        if (waveYInt == y)\n        {\n            Console.Write(\"*\"); // Skriv ut stj\u00e4rnan p\u00e5 r\u00e4tt position\n        }\n        else\n        {\n            Console.Write(\" \"); // Skriv ut mellanslag\n        }\n    }\n    Console.WriteLine(); // Ny rad efter varje y-niv\u00e5\n}\n</code></pre> <p>Hur skulle du g\u00f6ra f\u00f6r att skriva ett program som l\u00e5ter anv\u00e4ndaren anv\u00e4nda piltangenterna f\u00f6r att justera v\u00e5gens frekvens och amplitud?</p>"},{"location":"material/cs/standardbibliotek/math/#vad-mer-kan-du-hitta-pa-med-denna-matteklass","title":"Vad mer kan du hitta p\u00e5 med denna matteklass?","text":""},{"location":"material/cs/standardbibliotek/misc/","title":"Sm\u00e5funktioner","text":""},{"location":"material/cs/standardbibliotek/misc/#environmentexit","title":"Environment.Exit()","text":"<p>Med Environment.Exit() kan du f\u00e5 ditt program att avslutas direkt, oavsett var i koden den k\u00f6rs.</p>"},{"location":"material/cs/standardbibliotek/misc/#threadsleep","title":"Thread.Sleep()","text":"<p>Med Thread.Sleep() kan du f\u00e5r ditt program att pausa i x antal millisekunder. Exempelvis: <pre><code>Console.WriteLine(\"V\u00e4nta 2 sekunder...\");\nThread.Sleep(2000); // Pausa i 2000 millisekunder (2 sekunder)\nConsole.WriteLine(\"F\u00e4rdig!\");\n</code></pre></p>"},{"location":"material/cs/standardbibliotek/parse/","title":"Parse","text":"<p>F\u00f6r att kunna anv\u00e4nda en str\u00e4ng som ett tal, t.ex. f\u00f6r att g\u00f6ra matematiska ber\u00e4kningar, m\u00e5ste den f\u00f6rst parsas (omvandlas) till en numerisk datatyp som <code>int</code> eller <code>double</code>. Detta kan g\u00f6ras med hj\u00e4lp av metoder i .NET:s standardbibliotek.</p> Exempel p\u00e5 parsing<pre><code>string input = \"123\";\nint number = int.Parse(input); // number blir 123\n\n//Nu kan vi anv\u00e4nda number i matematiska operationer:\nint result = number + 10; // result blir 133\n</code></pre> <p>De andra numeriska datatyperna har liknande metoder f\u00f6r parsing, t.ex. <code>double.Parse()</code>, <code>float.Parse()</code>, <code>decimal.Parse()</code> osv.  </p> <p>Det finns ocks\u00e5 en klass som heter <code>Convert</code> som har metoder f\u00f6r att konvertera mellan olika datatyper, inklusive str\u00e4ngar till tal:</p> Exempel p\u00e5 Convert<pre><code>string input = \"456\";\nint number = Convert.ToInt32(input); // number blir 456\n</code></pre> <p>Skillnaden \u00e4r att <code>Convert.ToInt32()</code> kan hantera <code>null</code> utan att kasta ett undantag, medan <code>int.Parse()</code> kommer att kasta ett undantag om str\u00e4ngen \u00e4r <code>null</code>.</p>"},{"location":"material/cs/standardbibliotek/parse/#tryparse","title":"TryParse","text":"<p>Det finns ocks\u00e5 en variant av Parse-metoderna som heter <code>TryParse()</code>. Denna metod f\u00f6rs\u00f6ker parsa str\u00e4ngen och returnerar en <code>bool</code> med v\u00e4rde <code>true</code> om parsningen lyckades, annars <code>false</code>, ist\u00e4llet f\u00f6r att kasta ett undantag vid misslyckande. Detta \u00e4r anv\u00e4ndbart f\u00f6r att undvika programkrascher vid felaktig inmatning.</p> Exempel p\u00e5 TryParse<pre><code>string input = \"789\";\nif (int.TryParse(input, out int number))\n{\n    // Parsningen lyckades, number inneh\u00e5ller det parsade v\u00e4rdet\n    Console.WriteLine($\"Parsed number: {number}\");\n}\nelse\n{\n    // Parsningen misslyckades\n    Console.WriteLine(\"Invalid input, could not parse to an integer.\");\n}\n</code></pre> <p>Den metoden anv\u00e4nder en <code>out</code>-parameter f\u00f6r att returnera det parsade v\u00e4rdet om det lyckas. L\u00e4s mer om out-parametrar h\u00e4r.</p>"},{"location":"material/cs/standardbibliotek/random/","title":"Random","text":"<p>Klassen <code>Random</code> i .NET-biblioteket anv\u00e4nds f\u00f6r att generera slumptal. Den kan vara anv\u00e4ndbar i olika scenarier, s\u00e5som spelutveckling, simuleringar, generera l\u00f6senord eller n\u00e4r du beh\u00f6ver slumpm\u00e4ssiga data f\u00f6r testning. </p>"},{"location":"material/cs/standardbibliotek/random/#slumpa-fram-ett-tal","title":"Slumpa fram ett tal","text":"<p>Enklaste s\u00e4ttet att bara f\u00e5 fram en slumpvis siffra \u00e4r detta:</p> <pre><code>int randomNumber = Random.Shared.Next();\nConsole.WriteLine(randomNumber);\n</code></pre> <p>Detta ger dig ett heltal mellan <code>0</code> och <code>Int32.MaxValue</code> (2,147,483,647).</p> <p>Next() \u00e4r en metod som returnerar ett icke-negativt slumpm\u00e4ssigt heltal. Om vi vill begr\u00e4nsa intervallet kan vi skicka in tv\u00e5 argument, ett minimum och ett maximum:</p> <pre><code>int randomNumberUnderHundred = Random.Shared.Next(100); // Slumpa fram ett tal mellan 0 och 99\nConsole.WriteLine(randomNumberUnderHundred);\n</code></pre> <p>H\u00e4r ser vi en liten egenhet med Next(): Det h\u00f6gsta v\u00e4rdet (101 i detta fall) \u00e4r exkluderat, s\u00e5 det st\u00f6rsta talet vi kan f\u00e5 \u00e4r 100.</p> <p>Det g\u00e5r ocks\u00e5 att ange b\u00e5de ett minimum och ett maximum:</p> <pre><code>int randomNumberInCustomRange = Random.Shared.Next(50, 101); // Slumpa fram ett tal mellan 50 och 100\nConsole.WriteLine(randomNumberInCustomRange);\n</code></pre> <p>S\u00e5 l\u00e4tt \u00e4r det att slumpa fram heltal! Nu \u00e4r fr\u00e5gan, vad ska du ha det till?</p> N\u00e5gra random id\u00e9er vad du kan prova att g\u00f6ra med Random <ul> <li>Skapa en aliennamsgenerator som skapar namn med hj\u00e4lp av listor med str\u00e4ngar.</li> <li>Skapa en slumpm\u00e4ssig mening med hj\u00e4lp av olika str\u00e4ngmetoder och listor med ord</li> <li>Skapa en l\u00f6senordsgenerator som skapar l\u00f6senord utifr\u00e5n olika krav:<ul> <li>Slumpad str\u00e4ng med ett visst antal tecken</li> <li>Random x antal ord med mellanslag</li> </ul> </li> <li>G\u00f6r en roulettsimulator som slumpm\u00e4ssigt v\u00e4ljer ett nummer mellan 0 och 36 samt f\u00e4rg</li> </ul>"},{"location":"material/cs/standardbibliotek/string/","title":"String","text":"<p><code>String</code>-klassen i .NET \u00e4r en maffig klass med massor av inbyggda funktioner f\u00f6r att hantera text. H\u00e4r \u00e4r n\u00e5gra vanliga metoder och egenskaper som kan vara bra att k\u00e4nna till:</p> <pre><code>string greeting = \"Hej, v\u00e4rlden!\";\n\n// L\u00e4ngden p\u00e5 str\u00e4ngen\nint lengthOFString = greeting.Length; // 15\n\n// Konvertera till stora eller sm\u00e5 bokst\u00e4ver\nstring upperCase = greeting.ToUpper(); // \"HEJ, V\u00c4RLDEN!\"\nstring lowerCase = greeting.ToLower(); // \"hej, v\u00e4rlden!\" \n\n// Kontrollera om str\u00e4ngen inneh\u00e5ller ett visst ord\nif (greeting.Contains(\"v\u00e4rlden\"))\n{\n    Console.WriteLine(\"Str\u00e4ngen inneh\u00e5ller ordet v\u00e4rlden!\");\n}\n\n// Kontrollera om str\u00e4ngen \u00e4r tom, null eller bara mellanslag\nif (string.IsNullOrWhiteSpace(greeting)) // (1)\n{\n    Console.WriteLine(\"Str\u00e4ngen inneh\u00e5ller ingen h\u00e4lsning!\");\n}\n\n// Ers\u00e4tta text\nstring ersatt = greeting.Replace(\"v\u00e4rlden\", \"C#\"); // \"Hej, C#!\"\n\n// Dela upp str\u00e4ngen i bitar utifr\u00e5n ett tecken, f\u00e5r tillbaka en array av str\u00e4ngar\nstring[] parts = greeting.Split(','); // [\"Hej\", \" C#!\"]\n\n// Trimma bort mellanslag i b\u00f6rjan och slutet\nstring stringWithSpaces = \"   Hej!   \";\nstring trimmedString = stringWithSpaces.Trim(); // \"Hej!\"\n\n// H\u00e4mta en del av str\u00e4ngen (substring)\nstring substring = greeting.Substring(5, 7); // \" v\u00e4rlden\"\n\n// Hitta positionen av ett tecken eller ord\nint index = greeting.IndexOf(\"v\u00e4rlden\"); // 5\n</code></pre> <ol> <li>Uppm\u00e4rksamma h\u00e4r att vi anv\u00e4nder en metod p\u00e5 <code>string</code>-klassen och inte en metod p\u00e5 en specifik str\u00e4ng!</li> </ol>"},{"location":"material/cs/standardbibliotek/string/#stranginterpolering","title":"Str\u00e4nginterpolering","text":"<p>Str\u00e4nginterpolering \u00e4r ett smidigt s\u00e4tt att skapa str\u00e4ngar som inneh\u00e5ller variabler eller uttryck. Det g\u00f6rs genom att anv\u00e4nda <code>$</code> f\u00f6re str\u00e4ngen och sedan omsluta variabler eller uttryck inom <code>{}</code>.</p> <pre><code>string name = \"Anna\";\nint age = 30;\nstring message = $\"Hej, jag heter {name} och jag \u00e4r {age} \u00e5r gammal.\";\nConsole.WriteLine(message); // \"Hej, jag heter Anna och jag \u00e4r 30 \u00e5r gammal.\"\n</code></pre>"},{"location":"material/cs/standardbibliotek/string/#tostring-metoden","title":"ToString()-metoden","text":"<p>M\u00e5nga datatyper i .NET har en inbyggd <code>ToString()</code>-metod som konverterar v\u00e4rdet till en str\u00e4ng. Detta \u00e4r anv\u00e4ndbart n\u00e4r du vill visa v\u00e4rden i textform.</p> <pre><code>float number = 3.14159f; // (1)\nstring numberAsString = number.ToString(\"F2\"); // \"3.14\", F2 betyder 2 decimaler\n\ndouble bigNumber = 1234567890.12345;\nstring bigNumberAsString = bigNumber.ToString(\"N\"); // \"1,234,567,890.12\" N betyder nummer med tusentalsavgr\u00e4nsare\n\nDateTime now = DateTime.Now;\nstring dateAsString = now.ToString(\"yyyy-MM-dd\"); // \"2024-06-15\" (beroende p\u00e5 dagens datum)\n</code></pre> <ol> <li><code>f</code> efter talet anger att det \u00e4r just en <code>float</code>.</li> </ol> <p>Det d\u00e4r innuti <code>ToString()</code>-metoden kallas f\u00f6r en <code>formatstr\u00e4ng</code> och det finns massor av olika format att anv\u00e4nda beroende p\u00e5 vilken typ av data du har. L\u00e4s mer h\u00e4r:</p> <ul> <li>Nummer: https://learn.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings</li> <li>Datum: https://learn.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings</li> </ul>"},{"location":"material/cs/standardbibliotek/string/#las-annu-mer","title":"L\u00e4s \u00e4nnu mer","text":"<p>Det finns s\u00e5 otroligt mycket en kan kr\u00e5ngla med n\u00e4r det kommer till str\u00e4ngar i .NET! L\u00e4s mer h\u00e4r:</p> <ul> <li>https://learn.microsoft.com/en-us/dotnet/fundamentals/runtime-libraries/system-string</li> <li>https://learn.microsoft.com/en-us/dotnet/api/system.string</li> <li>Vad \u00e4r egentligen text?! https://en.wikipedia.org/wiki/Text_file</li> </ul>"},{"location":"material/cs/syntax/","title":"Syntax","text":"<p>Lite grundl\u00e4ggande saker om C# som kan vara bra att veta.</p>","tags":["OOP1"]},{"location":"material/cs/syntax/#sprakets-uppbyggnad","title":"Spr\u00e5kets uppbyggnad","text":"<p>C#-kod best\u00e5r till stor del av f\u00f6ljande byggstenar:</p> <ul> <li>Operatorer (Operators)</li> <li>Uttryck (Expressions)</li> <li>Satser (Statements)</li> <li>Deklarationer (Variabler, metoder, klasser, klassmedlemmar, gr\u00e4nssnitt, namespaces etc)</li> </ul> <p>L\u00e4s mer om dem i deras respektive kapitel.</p>","tags":["OOP1"]},{"location":"material/cs/syntax/#stor-och-liten-bokstav","title":"Stor och liten bokstav","text":"<p>C# \u00e4r \"case-sensitive\", vilket betyder att det skiljer p\u00e5 stora och sm\u00e5 bokst\u00e4ver. Till exempel \u00e4r <code>myVariable</code> och <code>MyVariable</code> tv\u00e5 olika saker. Du m\u00e5ste ocks\u00e5 t.ex. skriva exakt <code>Console.WriteLine()</code>, med stort C, stort W och stort L, annars fungerar det inte.</p>","tags":["OOP1"]},{"location":"material/cs/syntax/#kodblock","title":"Kodblock","text":"<p>Kod grupperas ihop med hj\u00e4lp av klammerparenteser: <code>{ }</code>. Ett kodblock \u00e4r en samling av en eller flera rader kod som behandlas som en enhet. Kodblock anv\u00e4nds f\u00f6r att gruppera relaterade instruktioner tillsammans, till exempel inom metoder, loopar och if-satser. L\u00e4s mer om kodblock h\u00e4r.</p>","tags":["OOP1"]},{"location":"material/cs/syntax/#semikolon","title":"Semikolon","text":"<p>I C# avslutas de flesta rader (instruktioner) med ett semikolon (<code>;</code>). Detta markerar slutet p\u00e5 en instruktion och g\u00f6r det m\u00f6jligt f\u00f6r datorn att f\u00f6rst\u00e5 var en instruktion slutar och n\u00e4sta b\u00f6rjar.</p>","tags":["OOP1"]},{"location":"material/cs/syntax/#kommentarer","title":"Kommentarer","text":"<p>Kommentarer \u00e4r text i koden som inte k\u00f6rs. De anv\u00e4nds f\u00f6r att f\u00f6rklara vad koden g\u00f6r eller f\u00f6r att l\u00e4mna anteckningar till andra utvecklare (eller till dig sj\u00e4lv). I C# finns det tv\u00e5 typer av kommentarer: - Enradskommentarer: B\u00f6rjar med <code>//</code> och forts\u00e4tter till slutet av raden. - Fleradskommentarer: B\u00f6rjar med <code>/*</code> och slutar med <code>*/</code>. De kan str\u00e4cka sig \u00f6ver flera rader.</p> <pre><code>// Detta \u00e4r en enradskommentar\n\n/*\n Detta \u00e4r en fleradskommentar\n som str\u00e4cker sig \u00f6ver flera rader.\n*/\n</code></pre>","tags":["OOP1"]},{"location":"material/cs/syntax/#nyckelord","title":"Nyckelord","text":"<p>Nyckelord \u00e4r reserverade ord i C# som har en speciell betydelse och funktion. Exempel p\u00e5 nyckelord inkluderar <code>if</code>, <code>else</code>, <code>for</code>, <code>while</code>, <code>class</code>, <code>public</code>, <code>private</code>, <code>void</code>, <code>int</code>, <code>string</code>, och m\u00e5nga fler. Dessa ord kan inte anv\u00e4ndas som namn p\u00e5 variabler och metoder osv.</p> <p>H\u00e4r \u00e4r ett g\u00e4ng nyckelord (inte alla):</p> A\u2013C C\u2013E F\u2013I I\u2013O O\u2013S T\u2013W abstract class false interface override this as const finally internal private throw base continue float is protected true bool decimal for long public try break default foreach namespace ref typeof byte do goto new return virtual case double if null static void catch else in object string* while char enum int out switch","tags":["OOP1"]},{"location":"material/cs/syntax/codeblocks/","title":"Kodblock","text":"<p>Ett kodblock \u00e4r en samling av en eller flera rader kod som behandlas som en enhet. </p> <p>I C# avgr\u00e4nsas kodblock med klammerparenteser: <code>{ }</code>. Kodblock anv\u00e4nds f\u00f6r att gruppera relaterade instruktioner tillsammans, till exempel inom funktioner, loopar och villkorssatser.</p> <pre><code>if (true)\n{ // H\u00e4r b\u00f6rjar kodblocket\n\n    Console.WriteLine(\"Detta \u00e4r inom kodblocket.\");\n} // H\u00e4r slutar kodblocket\n</code></pre> <p>Det g\u00e5r att skriva kodblock helt frist\u00e5ende om man vill: <pre><code>{ // H\u00e4r b\u00f6rjar kodblocket\n\n    Console.WriteLine(\"Detta \u00e4r inom kodblocket.\");\n} // H\u00e4r slutar kodblocket\n</code></pre> Det vanliga \u00e4r dock att de h\u00f6r till en metod, loop, if-sats, klass eller liknande.</p>","tags":["OOP1"]},{"location":"material/cs/syntax/codeblocks/#nastlade-kodblock","title":"N\u00e4stlade kodblock","text":"<p>Det g\u00e5r att \"n\u00e4stla\" kodblock, allts\u00e5 ha kodblock inuti andra kodblock: <pre><code>if (price &gt; 100)\n{ // H\u00e4r b\u00f6rjar det sk. yttre kodblocket\n\n    Console.WriteLine(\"Detta \u00e4r inom det yttre kodblocket.\");\n\n    if (isMember)\n    { // H\u00e4r b\u00f6rjar det inre kodblocket\n\n        Console.WriteLine(\"Detta \u00e4r inom det inre kodblocket.\");\n    } // H\u00e4r slutar det inre kodblocket\n\n} // H\u00e4r slutar det yttre kodblocket\n</code></pre></p>","tags":["OOP1"]},{"location":"material/cs/syntax/codeblocks/#scope","title":"Scope","text":"<p>Ett kodblocks \"scope\" (omf\u00e5ng) definierar var variabler och andra element som deklareras inom blocket \u00e4r tillg\u00e4ngliga. Variabler som deklareras inom ett kodblock \u00e4r endast tillg\u00e4ngliga inom det blocket och eventuella inre block.</p> <pre><code>{\n    { // H\u00e4r b\u00f6rjar ett inre kodblock\n\n        int x = 10; // 'x' \u00e4r tillg\u00e4nglig inom detta inre kodblock\n\n        Console.WriteLine(x); // Detta fungerar\n\n        {\n            Console.WriteLine(x); // Detta fungerar ocks\u00e5, 'x' \u00e4r tillg\u00e4nglig h\u00e4r\n        }\n\n    } // H\u00e4r slutar kodblocket\n\nConsole.WriteLine(x); // Detta fungerar inte, 'x' \u00e4r inte tillg\u00e4nglig h\u00e4r\n}\n</code></pre> <p>I detta exempel visas endast rena kodblock, men det fungerar p\u00e5 samma s\u00e4tt inom metoder, loopar, if-satser och andra strukturer som anv\u00e4nder sig av kodblock.</p>","tags":["OOP1"]},{"location":"material/cs/syntax/expressions/","title":"Uttryck","text":"<p>\u00c4ven kallat Expressions p\u00e5 engelska. Kort: N\u00e5got som kan ber\u00e4knas till ett v\u00e4rde. Det spelar inte n\u00e5n roll hur v\u00e4rdet tas fram. Det kan vara en sekvens av operatorer och operander som tillsammans bildar ett v\u00e4rde. Det kan vara ett metodanrop. Resultatet av ett uttryck \u00e4r alltid ett v\u00e4rde. V\u00e4rden har alltid en typ (t.ex. int, string, bool etc).</p> <p>Uttryck kan vara s\u00e5 enkla som en enda variabel eller ett konstant v\u00e4rde, eller s\u00e5 komplexa som en kombination av flera variabler och operatorer.</p> <pre><code>int x = 5; // Ett enkelt uttryck som bara \u00e4r en konstant\nint y = x + 10; // Ett mer komplext uttryck som involverar en variabel och en operator\n</code></pre> <p>Uttryck anv\u00e4nds ofta i tilldelningssatser, villkorssatser och loopar f\u00f6r att best\u00e4mma v\u00e4rden och kontrollera fl\u00f6det i programmet.</p> <pre><code>if (x &gt; 10) // Uttrycket 'x &gt; 10' utv\u00e4rderas till true eller false\n{\n    Console.WriteLine(\"x \u00e4r st\u00f6rre \u00e4n 10\");\n}\n</code></pre> <p>Uttryck kan ocks\u00e5 inneh\u00e5lla funktionsanrop, vilket g\u00f6r dem \u00e4nnu mer kraftfulla och flexibla.</p> <pre><code>int result = Math.Max(x, y); // Anropar funktionen Math.Max och anv\u00e4nder dess returv\u00e4rde i ett uttryck\n</code></pre> <p>Fler exempel:</p> <pre><code>int a = 10;\nint b = 20;\nint sum = a + b; // Uttrycket 'a + b' ber\u00e4knas till 30  \n\nbool isAdult = age &gt;= 18; // Uttrycket 'age &gt;= 18' utv\u00e4rderas till true eller false  \n\nstring message = \"Hello, \" + name; // Uttrycket '\"Hello, \" + name' skapar en ny str\u00e4ng  \n\ndouble area = Math.PI * radius * radius; // Uttrycket ber\u00e4knar arean av en cirkel\n</code></pre>","tags":["OOP1"]},{"location":"material/cs/syntax/expressions/#las-mer","title":"L\u00e4s mer","text":"<p>H\u00e4r \u00e4r en v\u00e4ldigt l\u00e5ng och detaljerad artikel om expressions i C#: https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/expressions</p>","tags":["OOP1"]},{"location":"material/cs/syntax/operators/","title":"Operatorer","text":"<p>Operatorer anv\u00e4nds f\u00f6r att utf\u00f6ra operationer p\u00e5 variabler och v\u00e4rden. H\u00e4r \u00e4r n\u00e5gra vanliga typer av operatorer i C#:</p>","tags":["OOP1"]},{"location":"material/cs/syntax/operators/#aritmetiska-operatorer","title":"Aritmetiska operatorer","text":"Operator Beskrivning Exempel <code>+</code> Addition <code>x + y</code> <code>-</code> Subtraktion <code>x - y</code> <code>*</code> Multiplikation <code>x * y</code> <code>/</code> Division <code>x / y</code> <code>%</code> Modulus (rest vid division) <code>x % y</code> <code>++</code> Inkrement (\u00f6kar med 1) <code>x++</code> <code>--</code> Dekrement (minskar med 1) <code>x--</code>","tags":["OOP1"]},{"location":"material/cs/syntax/operators/#tilldelningsoperatorer","title":"Tilldelningsoperatorer","text":"<p>Tilldelningsoperatorer anv\u00e4nds f\u00f6r att ge variabler v\u00e4rden.  </p> Operator Beskrivning Exempel <code>=</code> Tilldelar ett v\u00e4rde <code>x = 5;</code> <code>+=</code> L\u00e4gger till och tilldelar <code>x += 3;</code> (x = x + 3) <code>-=</code> Subtraherar och tilldelar <code>x -= 2;</code> (x = x - 2) <code>*=</code> Multiplicerar och tilldelar <code>x *= 4;</code> (x = x * 4) <code>/=</code> Dividerar och tilldelar <code>x /= 2;</code> (x = x / 2) <p>Det finns fler. L\u00e4s mer h\u00e4r: Assignment operators - C# reference</p>","tags":["OOP1"]},{"location":"material/cs/syntax/operators/#jamforelseoperatorer","title":"J\u00e4mf\u00f6relseoperatorer","text":"<p>J\u00e4mf\u00f6relseoperatorer anv\u00e4nds f\u00f6r att j\u00e4mf\u00f6ra tv\u00e5 v\u00e4rden och returnerar en bool (true eller false). Resultatet av en j\u00e4mf\u00f6relse \u00e4r allts\u00e5 ALLTID en bool:</p> <pre><code>bool isEqual = x &gt; y; // true om x \u00e4r st\u00f6rre \u00e4n y, annars false\n</code></pre> Operator Beskrivning Exempel <code>==</code> Lika med <code>x == y</code> <code>!=</code> Inte lika med <code>x != y</code> <code>&gt;</code> St\u00f6rre \u00e4n <code>x &gt; y</code> <code>&lt;</code> Mindre \u00e4n <code>x &lt; y</code> <code>&gt;=</code> St\u00f6rre \u00e4n eller lika med <code>x &gt;= y</code> <code>&lt;=</code> Mindre \u00e4n eller lika med <code>x &lt;= y</code>","tags":["OOP1"]},{"location":"material/cs/syntax/operators/#logiska-operatorer","title":"Logiska operatorer","text":"<p>Logiska operatorer anv\u00e4nds f\u00f6r att kombinera eller modifiera booleska uttryck. Exempelvis i if-satser: <pre><code>if (age &gt; 18 &amp;&amp; isMember)\n{\n    Console.WriteLine(\"Du \u00e4r \u00f6ver 18 och medlem.\");\n}\n</code></pre></p> Operator Beskrivning Exempel <code>&amp;&amp;</code> Logiskt OCH <code>x &gt; 5 &amp;&amp; y &lt; 10</code> <code>||</code> Logiskt ELLER <code>x &lt; 5 || y &gt; 10</code> <code>!</code> Logiskt INTE <code>!(x == y)</code>","tags":["OOP1"]},{"location":"material/cs/syntax/operators/#bitvisa-operatorer","title":"Bitvisa operatorer","text":"<p>Bitvisa operatorer anv\u00e4nds f\u00f6r att manipulera individuella bitar i heltal. \u00d6verkurs och inte s\u00e5 vanligt f\u00f6rekommande i vardaglig programmering,</p> Operator Beskrivning Exempel <code>&amp;</code> Bitvis OCH <code>x &amp; y</code> <code>\\|</code> Bitvis ELLER <code>x \\| y</code> <code>^</code> Bitvis XOR <code>x ^ y</code> <code>~</code> Bitvis NOT <code>~x</code> <code>&lt;&lt;</code> V\u00e4nsterskift <code>x &lt;&lt; 2</code> <code>&gt;&gt;</code> H\u00f6gerskift <code>x &gt;&gt; 2</code>","tags":["OOP1"]},{"location":"material/cs/syntax/operators/#ovriga-operatorer","title":"\u00d6vriga operatorer","text":"<p>Dessa \u00e4r lite \u00f6verkurs men st\u00e5r h\u00e4r f\u00f6r att du ska veta att de finns.</p> Operator Beskrivning Exempel <code>?:</code> Ternary operator (villkor) <code>x &gt; y ? x : y</code> <code>??</code> Null-coalescing operator <code>x ?? y</code> <code>is</code> Typkontroll <code>x is int</code> <code>as</code> Typkonvertering <code>x as string</code> <code>typeof</code> Typobjekt f\u00f6r en typ <code>typeof(int)</code> <code>await</code> V\u00e4ntar p\u00e5 en asynkron operation <code>await Task.Delay(1000)</code> <code>new</code> Skapar en ny instans av en typ <code>new MyClass()</code> <code>checked</code> Kontrollerar f\u00f6r \u00f6verfl\u00f6d <code>checked { int x = int.MaxValue + 1; }</code> <code>unchecked</code> Ignorerar \u00f6verfl\u00f6dskontroll <code>unchecked { int x = int.MaxValue + 1; }</code> <code>ref</code> Passerar en variabel som referens <code>void MyMethod(ref int x)</code> <code>out</code> Passerar en variabel som utparameter <code>void MyMethod (out int x)</code> <code>params</code> Anger en parameter som en parameterlista <code>void MyMethod(params int[] numbers)</code> <code>sizeof</code> Returnerar storleken i byte av en typ <code>int size = sizeof(int);</code> <code>nameof</code> Returnerar namnet p\u00e5 en variabel, typ eller medlem som en str\u00e4ng <code>string name = nameof(MyClass);</code> <code>delegate</code> Deklarerar en delegerad typ <code>public delegate void MyDelegate(string message);</code> <code>lock</code> S\u00e4kerst\u00e4ller att en kodsektion k\u00f6rs av endast en tr\u00e5d i taget <code>lock(myLock) { /* kod */ }</code> <code>yield</code> Anv\u00e4nds f\u00f6r att returnera element i en iterator <code>yield return item;</code>","tags":["OOP1"]},{"location":"material/cs/syntax/statements/","title":"Statements","text":"<p>Allt ett program utf\u00f6r uttrycks i sk. statements (satser). Exempelvis att deklarera en variabel, tilldela ett v\u00e4rde till en variabel, anropa en metod eller skriva ut n\u00e5got p\u00e5 sk\u00e4rmen. Ordningen olika statements utf\u00f6rs kallas f\u00f6r programmets fl\u00f6de. Fl\u00f6det styrs med hj\u00e4lp av olika kontorllstrukturer.</p> <p>Ett statement kan vara en rad med kod som avslutas med ett semikolon, eller ett block av kod inom klammerparenteser <code>{ }</code> som inneh\u00e5ller flera statements.</p> <p>Det finns m\u00e5nga olika typer av statements:</p> Typ Beskrivning Deklaration/Declaration Skapar en variabel eller konstant. Exempel: <code>int age;</code> Uttryck/Expression En kombination av variabler, operatorer och v\u00e4rden som ber\u00e4knas till ett v\u00e4rde. Exempel: <code>age + 5;</code> Villkor/Selection Utf\u00f6r olika sektioner av kod baserat p\u00e5 ett villkor. Exempel: <code>if</code>, <code>switch</code> Iteration Loopar som upprepar en sektion av kod flera g\u00e5nger. Exempel: <code>for</code>, <code>while</code> Jump Hoppar till en annan del av koden. Exempel: <code>break</code>, <code>continue</code>, <code>return</code> Exception Handling Hanterar fel och undantag i koden. Exempel: <code>try</code>, <code>catch</code>, <code>finally</code> <p>Det finns fler! L\u00e4s mer h\u00e4r.</p>","tags":["OOP1"]},{"location":"material/cs/syntax/structure/","title":"Struktur","text":"<p>Det finns n\u00e5gra v\u00e4ldigt grundl\u00e4ggande regler i C# som m\u00e5ste f\u00f6ljas:</p> <ul> <li>All kod som skrivs i C# m\u00e5ste ligga inuti en klass.  </li> <li>All kod som ska k\u00f6ras m\u00e5ste ligga inuti en metod.</li> </ul> <p>S\u00e5 h\u00e4r ser den strukturen ut i ett minimalt C#-program:</p> <pre><code>class Program\n{\n    static void Main()\n    {\n\n    }\n}\n</code></pre> <p><code>Main</code>-metoden \u00e4r lite speciellt p\u00e5 s\u00e5 s\u00e4tt att det \u00e4r den metod som k\u00f6rs f\u00f6rst n\u00e4r programmet startar. Det \u00e4r allts\u00e5 h\u00e4rifr\u00e5n som programmet alltid b\u00f6rjar k\u00f6ra. Klassen d\u00e4remot kan heta vad som helst.</p> <p>N\u00e4r du sen skriver egna klasser s\u00e5 kommer de att f\u00f6lja denna struktur. H\u00e4r \u00e4r ett exempel p\u00e5 en klass som inneh\u00e5ller en metod som skriver ut \"Hello World!\" till konsolen:</p> <pre><code>class World\n{\n    public static void SayHello()\n    {\n        Console.WriteLine(\"Hello World!\");\n    }\n}\n</code></pre> <p>Om du vill anropa denna metod fr\u00e5n <code>Main</code>-metoden s\u00e5 g\u00f6r du det s\u00e5 h\u00e4r:</p> <pre><code>class Program\n{\n    static void Main()\n    {\n        World.SayHello();\n    }\n}\n</code></pre>","tags":["OOP1"]},{"location":"material/cs/syntax/structure/#top-level-statements","title":"Top Level Statements","text":"<p>Fr\u00e5n och med C# 9.0 finns det n\u00e5got som kallas f\u00f6r Top Level Statements. Det inneb\u00e4r att du kan skriva kod direkt i filen utan att beh\u00f6va skapa en klass eller en <code>Main</code>-metod. Detta \u00e4r t\u00e4nkt att g\u00f6ra det enklare att skriva sm\u00e5 program och exempel. S\u00e5 n\u00e4r du skapar ett nytt console-projekt s\u00e5 f\u00e5r du i stort sett en tom <code>Program.cs</code> fil d\u00e4r du kan b\u00f6rja skriva kod direkt:</p> <pre><code>Console.WriteLine(\"Hello, World!\");\n</code></pre> <p>MEN!</p> <p>Det \u00e4r fortfarande s\u00e5 att den koden ligger innuti en klass och en <code>Main</code>-metod! Det \u00e4r bara det att det inte syns.</p> <p>Innan C# 9 s\u00e5g det ut s\u00e5 h\u00e4r (och det \u00e4r allts\u00e5 s\u00e5 det fortfarande ser ut, bakom kulisserna)</p> <pre><code>class Program\n{\n    static void Main()\n    {\n        Console.WriteLine(\"Hello, World!\");\n    }\n}\n</code></pre> <p>Viktigt!</p> <p>Top Level Statements \u00e4r t\u00e4nkt f\u00f6r sm\u00e5 program och exempel. N\u00e4r du b\u00f6rjar skriva st\u00f6rre program s\u00e5 \u00e4r det b\u00e4st att g\u00e5 tillbaka till den vanliga strukturen med klasser och metoder. Det \u00e4r ocks\u00e5 s\u00e5 att Top Level Statements bara g\u00e5r att anv\u00e4nda i en enda fil, och det \u00e4r den som kommer att bli startpunkten f\u00f6r programmet.</p>","tags":["OOP1"]},{"location":"material/cs/testing/","title":"Testning","text":"<p>Kortfattat \u00e4r testning processen att verifiera att din kod fungerar som f\u00f6rv\u00e4ntat. Det finns olika typer av tester som du kan genomf\u00f6ra f\u00f6r att s\u00e4kerst\u00e4lla att din kod \u00e4r robust och fri fr\u00e5n fel. N\u00e5gra vanliga typer av tester inkluderar:</p> <ul> <li>Enhetstester (Unit Tests): Testar enskilda komponenter eller funktioner i din kod f\u00f6r att s\u00e4kerst\u00e4lla att de fungerar korrekt var f\u00f6r sig.</li> <li>Integrationstester (Integration Tests): Testar hur olika komponenter i din applikation fungerar tillsammans.</li> <li>Systemtester (System Tests): Testar hela applikationen som en helhet f\u00f6r att s\u00e4kerst\u00e4lla att alla delar fungerar tillsammans som f\u00f6rv\u00e4ntat.</li> </ul> <p>L\u00e4s mer om de olika testtyperna under respektive kapitel. </p>"},{"location":"material/cs/testing/unittests/","title":"Enhetstester","text":"<p>Bra att ha l\u00e4st innan du l\u00e4ser detta avsnitt: L\u00e4gga till paket. L\u00e4s ocks\u00e5 avsnittet om Flera delprojekt i en l\u00f6sning.</p> <p>Enhetstester \u00e4r sm\u00e5, isolerade tester som fokuserar p\u00e5 att verifiera att enskilda komponenter eller funktioner i din kod fungerar som f\u00f6rv\u00e4ntat. Dessa tester \u00e4r vanligtvis snabba att k\u00f6ra och hj\u00e4lper till att identifiera problem tidigt i utvecklingsprocessen. Efter att du skrivit ett g\u00e4ng tester kan du k\u00f6ra igenom dem med kommandot <code>dotnet test</code>. D\u00e5 f\u00e5r du se vilka tester som passerat eller inte. N\u00e5gra exempel p\u00e5 tester kan vara:</p> <ul> <li>Kontrollera att en metod returnerar r\u00e4tt v\u00e4rde f\u00f6r given indata.</li> <li>Verifiera att en klass instansieras med korrekta startv\u00e4rden.</li> <li>S\u00e4kerst\u00e4lla att en funktion uppdaterar ett objekt p\u00e5 r\u00e4tt s\u00e4tt.</li> </ul>"},{"location":"material/cs/testing/unittests/#skapa-enhetstester-med-xunit","title":"Skapa enhetstester med xUnit","text":"<p>xUnit \u00e4r ett popul\u00e4rt testningsramverk f\u00f6r .NET som g\u00f6r det enkelt att skriva och k\u00f6ra enhetstester. F\u00f6r att komma ig\u00e5ng med xUnit, f\u00f6lj dessa steg:</p> <ol> <li>Dina tester m\u00e5ste ligga i ett eget separat projekt. S\u00e5 det \u00e4r viktigt att du har en projektstuktur som exempelvis denna:</li> </ol> <pre><code>/MySolution\n  MySolution.sln\n  /src\n    /MyProject\n      MyProject.csproj\n  /tests\n    /MyProject.Tests\n      MyProject.Tests.csproj\n</code></pre> <p>FORTS\u00c4TTNING F\u00d6LJER...</p>"},{"location":"material/general/commonproblems/","title":"Vanliga problem och felmeddelanden","text":"<p>Det finns en uppsj\u00f6 olika typer av fel som kan uppst\u00e5 n\u00e4r program skapas. Olika kategorier \u00e4r: - Kompilatorfel (compile-time errors) - K\u00f6rningsfel (run-time errors) - Logiska fel (logical errors)</p>"},{"location":"material/general/commonproblems/#dotnet-cli","title":"dotnet cli","text":"<p><code>&gt; dotnet run</code></p> <p>'donet' is not recognized as an internal or external command, operable program or batch file.</p> <ul> <li>Problem: Det finns inget program som heter <code>dotnet</code> installerat p\u00e5 din dator.</li> <li>L\u00f6sning: Installera .NET SDK fr\u00e5n https://dotnet.microsoft.com/en-us/download</li> </ul> <p><code>&gt; dotnet run</code></p> <p>Couldn't find a project to run. Ensure a project exists in S\u00d6KV\u00c4G, or pass the path to the project using --project.</p> <ul> <li>Problem: Dotnet hittar inte din projektfil (.csproj).</li> <li>L\u00f6sning: Du m\u00e5ste vara i mappen d\u00e4r din <code>.csproj</code>-fil ligger. Anv\u00e4nd <code>cd &lt;mappnamn&gt;</code> f\u00f6r att byta mapp i terminalen.</li> </ul>"},{"location":"material/general/datorkunskap/begrepp/","title":"Begrepp","text":"<p>Det kommer dyka upp m\u00e5nga olika begrepp n\u00e4r du l\u00e4r dig programmera. H\u00e4r \u00e4r en lista p\u00e5 n\u00e5gra av de vanligaste. Kommer du p\u00e5 n\u00e5got som saknas h\u00e4r, s\u00e4g till s\u00e5 l\u00e4gger vi till det!</p>"},{"location":"material/general/datorkunskap/begrepp/#koraexekvera","title":"K\u00f6ra/exekvera","text":"<p>Att k\u00f6ra eller exekvera betyder att starta ett program s\u00e5 att det b\u00f6rjar g\u00f6ra det som det \u00e4r t\u00e4nkt att g\u00f6ra. N\u00e4r du k\u00f6r ett program s\u00e5 laddas koden in i datorns minne och processorn b\u00f6rjar utf\u00f6ra instruktionerna i koden.</p>"},{"location":"material/general/datorkunskap/begrepp/#deklarera","title":"Deklarera","text":"<p>Att deklarera betyder att skapa en variabel, funktion, klass eller liknande. N\u00e4r du deklarerar n\u00e5got s\u00e5 ber\u00e4ttar du f\u00f6r kompilatorn att det finns en sak med ett visst namn och typ.</p>"},{"location":"material/general/datorkunskap/begrepp/#typ","title":"Typ","text":"<p>Typ \u00e4r en egenskap hos data som best\u00e4mmer vilken sorts v\u00e4rde det \u00e4r och vilka operationer som kan utf\u00f6ras p\u00e5 det. Exempel p\u00e5 vanliga datatyper i C# \u00e4r <code>int</code> (heltal), <code>string</code> (text), <code>bool</code> (sant/falskt) och <code>double</code> (decimaltal). Att f\u00f6rst\u00e5 datatyper \u00e4r viktigt f\u00f6r att kunna hantera och manipulera data korrekt i programmet.</p>"},{"location":"material/general/datorkunskap/begrepp/#kodkvalitet","title":"Kodkvalitet","text":"<p>Vad betyder egentligen kodkvalitet? Kodkvalitet handlar om hur bra koden \u00e4r skriven och hur l\u00e4tt den \u00e4r att f\u00f6rst\u00e5, underh\u00e5lla och vidareutveckla. H\u00f6g kodkvalitet inneb\u00e4r att koden \u00e4r ren, v\u00e4lstrukturerad och f\u00f6ljer b\u00e4sta praxis. Det g\u00f6r det enklare f\u00f6r andra (och dig sj\u00e4lv) att arbeta med koden i framtiden. Detta \u00e4r dock inget objektivt begrepp, utan olika utvecklare kan ha olika \u00e5sikter om vad som \u00e4r kod av h\u00f6g kvalitet.</p>"},{"location":"material/general/datorkunskap/begrepp/#kodstandard","title":"Kodstandard","text":"<p>Kodstandard \u00e4r en upps\u00e4ttning regler och riktlinjer som hj\u00e4lper utvecklare att skriva konsekvent och l\u00e4ttl\u00e4st kod. Att f\u00f6lja en kodstandard g\u00f6r det enklare f\u00f6r andra (och dig sj\u00e4lv) att f\u00f6rst\u00e5 och underh\u00e5lla koden i framtiden. Exempel p\u00e5 kodstandarder inkluderar namngivningskonventioner, indentering och kommentarer. L\u00e4s mer h\u00e4r..</p>"},{"location":"material/general/datorkunskap/begrepp/#kompilera","title":"Kompilera","text":"<p>Att kompilera betyder att \u00f6vers\u00e4tta koden fr\u00e5n ett spr\u00e5k till ett annat. I C# s\u00e5 kompilieras koden till s\u00e5 kallad IL-kod (Intermediate Language) som sedan k\u00f6rs av .NET:s Common Language Runtime (CLR) n\u00e4r programmet startas.</p>"},{"location":"material/general/datorkunskap/begrepp/#kallkod-bytekod-maskinkod","title":"K\u00e4llkod / Bytekod / Maskinkod","text":"<p>K\u00e4llkod \u00e4r den ursprungliga koden som du skriver i ett programmeringsspr\u00e5k, som C#. Denna kod \u00e4r l\u00e4sbar f\u00f6r m\u00e4nniskor. N\u00e4r koden kompileras, \u00f6vers\u00e4tts den till bytekod (i C# kallas det IL-kod), som \u00e4r en mellanform som inte \u00e4r direkt l\u00e4sbar f\u00f6r m\u00e4nniskor. Det \u00e4r inte alla programmeringsspr\u00e5k som anv\u00e4nder bytekod, vissa kompileras direkt till maskinkod. Maskinkod \u00e4r den slutliga formen av koden som datorns processor kan f\u00f6rst\u00e5 och k\u00f6ra direkt.</p>"},{"location":"material/general/datorkunskap/begrepp/#terminalkonsol","title":"Terminal/Konsol","text":"<p>Terminalen, eller konsolen som det ocks\u00e5 kallas, \u00e4r ett textbaserat gr\u00e4nssnitt som l\u00e5ter anv\u00e4ndaren interagera med datorn genom att skriva kommandon. Terminalen anv\u00e4nds ocks\u00e5 ofta f\u00f6r att administrera system \u00f6ver internet. Program som inte beh\u00f6ve n\u00e5got grafiskt gr\u00e4nssnitt k\u00f6rs ofta i terminalen, d\u00e5 de \u00e4r l\u00e4ttare och snabbare att utveckla.  L\u00e4s mer h\u00e4r..</p>"},{"location":"material/general/datorkunskap/begrepp/#net","title":".NET","text":"<p>.NET \u00e4r en plattform f\u00f6r att bygga och k\u00f6ra applikationer. Den inkluderar ett stort bibliotek av f\u00f6rbyggda funktioner och verktyg som g\u00f6r det enklare att utveckla programvara. .NET utvecklas av Microsoft och \u00e4r \u00f6ppen k\u00e4llkod.</p>"},{"location":"material/general/datorkunskap/begrepp/#sdk","title":"SDK","text":"<p>SDK st\u00e5r f\u00f6r Software Development Kit och \u00e4r en samling verktyg och bibliotek som beh\u00f6vs f\u00f6r att utveckla applikationer i ett specifikt programmeringsspr\u00e5k eller f\u00f6r en specifik plattform.</p>"},{"location":"material/general/datorkunskap/begrepp/#miljo-environment","title":"Milj\u00f6 (Environment)","text":"<p>En milj\u00f6 kan beskriva lite olika saker beroende p\u00e5 sammanhanget. Det kan vara den fysiska datorn d\u00e4r programmet k\u00f6rs, operativsystemet, eller den upps\u00e4ttning av verktyg och bibliotek som anv\u00e4nds f\u00f6r att utveckla programmet. Det kan ocks\u00e5 referera till olika stadier i utvecklingsprocessen, som utvecklingsmilj\u00f6n, testmilj\u00f6n och produktionsmilj\u00f6n.</p>"},{"location":"material/general/datorkunskap/begrepp/#ramverk-framework","title":"Ramverk / Framework","text":"<p>Ett ramverk \u00e4r en upps\u00e4ttning f\u00f6rbyggda komponenter och verktyg som underl\u00e4ttar utvecklingen av programvara. Ramverk ger en struktur och riktlinjer f\u00f6r hur koden ska organiseras och kan inneh\u00e5lla funktioner f\u00f6r vanliga uppgifter som databas\u00e5tkomst, anv\u00e4ndarhantering och n\u00e4tverkskommunikation. Exempel p\u00e5 ramverk \u00e4r ASP.NET f\u00f6r webbutveckling och Xamarin f\u00f6r mobilapputveckling.</p>"},{"location":"material/general/datorkunskap/binary/","title":"Det bin\u00e4ra talsystemet","text":"<p>Det bin\u00e4ra talsystemet, ettor och nollor, \u00e4r inte s\u00e5 sv\u00e5rt som det verkar! Det \u00e4r ocks\u00e5 bra att f\u00f6rst\u00e5 sig p\u00e5 det, d\u00e5 m\u00e5nga programmeringskoncept bygger p\u00e5 detta.</p> <p>Vi \u00e4r v\u00e4ldigt vana vid det decimala talsystemet, som \u00e4r baserat p\u00e5 tio siffror: 0, 1, 2, 3, 4, 5, 6, 7, 8 och 9. N\u00e4r vi r\u00e4knar vidare efter 9 s\u00e5 har vi inte l\u00e4ngre n\u00e5gra siffror kvar (inget enskilt tecket som representerar siffran tio), s\u00e5 vi b\u00f6rjar om p\u00e5 0 igen och l\u00e4gger till en etta framf\u00f6r: 10, 11, 12, och s\u00e5 vidare.</p> <p>Det funkar p\u00e5 samma s\u00e4tt i det bin\u00e4ra talsystemet!</p> <p>Fast d\u00e4r har vi ju bara tv\u00e5 siffror! 0 och 1. N\u00e4r vi r\u00e4knar vidare efter 1 s\u00e5 har vi inte l\u00e4ngre n\u00e5gra siffror kvar (inget enskilt tecket som representerar sifrran tv\u00e5), s\u00e5 vi b\u00f6rjar om p\u00e5 0 igen och l\u00e4gger till en etta framf\u00f6r: 10, 11, 100, 101, och s\u00e5 vidare.</p> <p>S\u00e5 h\u00e4r ser det ut om vi r\u00e4knar till 11 i b\u00e5de det decimala och det bin\u00e4ra talsystemet:</p> Decimal Bin\u00e4rt 0 0 1 1 2 10 3 11 4 100 5 101 6 110 7 111 8 1000 9 1001 10 1010 11 1011 <p>I det decimala talsystemet har varje position i ett tal representerar en potens av tio. Till exempel, i talet 345:  - 3 \u00e4r i hundratalspositionen (10^2) - 4 \u00e4r i tiotalspositionen (10^1) - 5 \u00e4r i entalspositionen (10^0) S\u00e5, 345 kan brytas ner som: 3 * 100 + 4 * 10 + 5 = 300 + 40 + 5 = 345</p> <p>I det bin\u00e4ra talsystemet anv\u00e4nds bara tv\u00e5 siffror: 0 och 1. Varje position i ett bin\u00e4rt tal representerar en potens av tv\u00e5. Till exempel, i det bin\u00e4ra talet 1011: - Den f\u00f6rsta 1 \u00e4r i \u00e5ttondelspositionen (2^3) - 0 \u00e4r i fyrtalspositionen (2^2) - Den andra 1 \u00e4r i tv\u00e5talspositionen (2^1) - Den sista 1 \u00e4r i entalspositionen (2^0)</p> <p>S\u00e5, 1011 kan brytas ner som: 1 * 8 + 0 * 4 + 1 * 2 + 1 * 1 = 8 + 0 + 2 + 1 = 11</p>"},{"location":"material/general/datorkunskap/characters/","title":"Teckennamn","text":"<p>Vad heter egentligen alla olika tecken vi anv\u00e4nder inom programmering? H\u00e4r \u00e4r en lista p\u00e5 de vanligaste:</p> Tecken Namn (svenska) Namn (engelska) Namn (smeknamn) ( ) parenteser parentheses [ ] hakparenteser square brackets fyrkantsparenteser { } klammerparenteser curly braces m\u00e5svingar &lt; &gt; vinkelparenteser angle brackets krokodilmun, st\u00f6rre \u00e4n/mindre \u00e4n ~ tilde tilde v\u00e5g ^ cirkumflex circumflex / caret tak , komma comma . punkt period / dot ; semikolon semicolon : kolon colon ! utropstecken exclamation mark ? fr\u00e5getecken question mark ' apostrof apostrophe rakt citattecken \" citattecken quotation marks ` backtick backtick \\ bak\u00e5tsnedstreck backslash snedsteck \u00e5t det andra h\u00e5llet / snedstreck forward slash &amp; och-tecken ampersand % procenttecken percent sign $ dollartecken dollar sign # nummertecken hash / pound sign @ snabel-a at sign kanelbulle, kringla, alfakrull * asterisk asterisk stj\u00e4rna\" + plustecken plus sign - minustecken minus sign = likhetstecken equals sign _ understreck underscore | lodr\u00e4tt streck vertical bar"},{"location":"material/general/datorkunskap/console/","title":"Terminalen","text":"<p>\u00c4ven kallad konsolen eller kommandotolken P\u00e5 engelska: console, terminal</p> <p>Konsolen \u00e4r ett textbaserat gr\u00e4nssnitt som l\u00e5ter anv\u00e4ndaren interagera med datorn genom att skriva kommandon. Konsolen anv\u00e4nds ocks\u00e5 ofta f\u00f6r att administrera system \u00f6ver internet. Program som inte beh\u00f6ve n\u00e5got grafiskt gr\u00e4nssnitt k\u00f6rs ofta i konsolen, d\u00e5 de \u00e4r l\u00e4ttare och snabbare att utveckla.</p>"},{"location":"material/general/datorkunskap/console/#starta-terminalen","title":"Starta terminalen","text":"<p>Olika s\u00e4tt i Windows: </p> <ul> <li>Tryck p\u00e5 Win+R, skriv <code>cmd</code> och tryck Enter.</li> <li>Tryck p\u00e5 Win och skriv direkt <code>cmd</code>, tryck Enter eller klicka p\u00e5 programmet som dyker upp.</li> <li>Tryck p\u00e5 Win och skriv <code>term</code>, tryck Enter eller klicka p\u00e5 programmet som dyker upp.</li> <li>N\u00e4r du har navigerat till en katalog i utforskaren, skriv <code>cmd</code> i adressf\u00e4ltet och tryck Enter. D\u00e5 \u00f6ppnas terminalen med den katalogen som arbetskatalog.</li> </ul> <p>Olika s\u00e4tt i MacOS:</p> <ul> <li>Tryck p\u00e5 Cmd+Space f\u00f6r att \u00f6ppna Spotlight, skriv <code>terminal</code> och tryck Enter.</li> <li>\u00d6ppna Finder, g\u00e5 till Program &gt; Verktyg och dubbelklicka p\u00e5 Terminal.</li> <li>Om du har terminalen i din docka, dra en katalog fr\u00e5n Finder och sl\u00e4pp den p\u00e5 terminalens ikon i dockan. D\u00e5 \u00f6ppnas terminalen med den katalogen som arbetskatalog.</li> </ul> <p>Olika s\u00e4tt i Linux:</p> <ul> <li>Tryck p\u00e5 Ctrl+Alt+T.</li> </ul>"},{"location":"material/general/datorkunskap/console/#grundlaggande-inbyggda-kommandon","title":"Grundl\u00e4ggande inbyggda kommandon","text":"VAD WINDOWS (CMD) LINUX (Bash) / MacOS (Terminal) G\u00e5 till mapp <code>cd path\\to\\folder</code> <code>cd path/to/folder</code> G\u00e5 bak\u00e5t <code>cd ..</code> <code>cd ..</code> Lista filer och mappar <code>dir</code> <code>ls</code> Lista \u00e4ven dolda filer <code>dir /a</code> <code>ls -a</code> Lista filer av viss typ <code>dir *.png</code> <code>ls *.png</code> Rensa sk\u00e4rmen <code>cls</code> <code>clear</code> Skapa ny mapp <code>mkdir minkatalog</code> <code>mkdir minkatalog</code> Ta bort mapp (tom) <code>rmdir minkatalog</code> <code>rmdir minkatalog</code> Ta bort mapp (med inneh\u00e5ll) <code>rmdir /S minkatalog</code> <code>rm -r minkatalog</code> Visa PATH-variabler <code>path</code> <code>echo $PATH</code> Skapa fil <code>echo text &gt; file.txt</code> <code>echo \"text\" &gt; file.txt</code> / <code>touch file.txt</code> L\u00e4gg till i fil <code>echo mertext &gt;&gt; file.txt</code> <code>echo \"mertext\" &gt;&gt; file.txt</code> Ta bort fil <code>del file.txt</code> <code>rm file.txt</code> Visa inneh\u00e5ll i fil <code>type file.txt</code> <code>cat file.txt</code> Kopiera fil <code>copy a.txt b.txt</code> <code>cp a.txt b.txt</code> Flytta/Byt namn p\u00e5 fil <code>move a.txt b.txt</code> <code>mv a.txt b.txt</code> <p>Tip</p> <p>Du kan anv\u00e4nda Tab f\u00f6r att autocompleta fil- och mappnamn i terminalen. Skriv b\u00f6rjan av namnet och tryck Tab. Om det finns flera alternativ, tryck Tab igen f\u00f6r att se en lista p\u00e5 m\u00f6jliga alternativ.</p>"},{"location":"material/general/datorkunskap/filesystem/","title":"Filsystemet","text":"<p>Det \u00e4r ett m\u00e5ste att ha koll p\u00e5 filer och mappar(kataloger) som utvecklare och avancerad datoranv\u00e4ndare. H\u00e4r \u00e4r en snabb genomg\u00e5ng av de viktigaste begreppen.</p>"},{"location":"material/general/datorkunskap/filesystem/#filer","title":"Filer","text":"<p>Filer \u00e4r enheter som anv\u00e4nds f\u00f6r att lagra data p\u00e5 en dator. De kan inneh\u00e5lla olika typer av information, s\u00e5som text, bilder, ljud eller programkod. Filer organiseras i ett hierarkiskt system av mappar (kataloger) f\u00f6r att underl\u00e4tta \u00e5tkomst och hantering.</p> <p>Filer inneh\u00e5ller faktiskt bara ettor och nollor (bin\u00e4r data). Det \u00e4r fil\u00e4ndelsen som avg\u00f6r hur datorn ska tolka inneh\u00e5llet. Exempelvis s\u00e5 \u00e4r <code>.txt</code> en textfil, <code>.jpg</code> \u00e4r en bildfil och <code>.exe</code> \u00e4r en k\u00f6rbar fil (program). Att filer har olika ikoner och att olika program startas n\u00e4r vi dubbelklickar p\u00e5 dem, har enbart med fil\u00e4ndelsen att g\u00f6ra.</p>"},{"location":"material/general/datorkunskap/filesystem/#mapparkataloger","title":"Mappar/Kataloger","text":"<p>Mappar, eller kataloger som de ocks\u00e5 kallas, \u00e4r beh\u00e5llare som anv\u00e4nds f\u00f6r att organisera och lagra filer p\u00e5 en dator. De kan inneh\u00e5lla b\u00e5de filer och andra mappar, vilket skapar en hierarkisk struktur som g\u00f6r det l\u00e4ttare att hitta och hantera data.</p>"},{"location":"material/general/datorkunskap/filesystem/#sokvag","title":"S\u00f6kv\u00e4g","text":"<p>En s\u00f6kv\u00e4g \u00e4r en str\u00e4ng som anger platsen f\u00f6r en fil eller mapp i ett filsystem. Det finns tv\u00e5 typer av s\u00f6kv\u00e4gar: absoluta och relativa.</p> <ul> <li>Absoluta s\u00f6kv\u00e4gar b\u00f6rjar fr\u00e5n rotkatalogen och anger hela v\u00e4gen till filen eller mappen, t.ex. <code>C:\\Anv\u00e4ndare\\DittNamn\\Dokument\\fil.txt</code>.</li> <li>Relativa s\u00f6kv\u00e4gar anger platsen i f\u00f6rh\u00e5llande till den aktuella katalogen, t.ex. <code>Dokument\\fil.txt</code> om du befinner dig i <code>C:\\Anv\u00e4ndare\\DittNamn</code>.</li> </ul>"},{"location":"material/general/datorkunskap/filesystem/#rotkatalog","title":"Rotkatalog","text":"<p>Rotkatalogen \u00e4r den \u00f6versta niv\u00e5n i ett filsystem. P\u00e5 Windows-system \u00e4r rotkatalogen vanligtvis representerad av en enhetsbokstav f\u00f6ljt av ett kolon och ett snedstreck, t.ex. <code>C:\\</code>. P\u00e5 Unix-baserade system, som Linux och macOS, \u00e4r rotkatalogen representerad av ett snedstreck <code>/</code>. Enhetsbokstaven representerar en specifik lagringsenhet, som en h\u00e5rddisk eller en USB-enhet. Varje enhet har sin egen enhetsbokstav och rotkatalog.</p>"},{"location":"material/general/datorkunskap/filesystem/#projektkalatalog","title":"Projektkalatalog","text":"<p>En projektkatalog \u00e4r en specifik mapp som inneh\u00e5ller alla filer och underkataloger relaterade till ett specifikt projekt. Denna katalog fungerar som en central plats f\u00f6r att organisera och hantera projektets resurser, s\u00e5som k\u00e4llkod, dokumentation, konfigurationsfiler och andra n\u00f6dv\u00e4ndiga komponenter.</p>"},{"location":"material/general/dotnet/","title":".NET","text":"<p>.NET \u00e4r en plattform f\u00f6r att bygga och k\u00f6ra applikationer. Den inkluderar ett stort bibliotek av f\u00f6rbyggda funktioner och verktyg som g\u00f6r det enklare att utveckla programvara. .NET utvecklas av Microsoft och \u00e4r \u00f6ppen k\u00e4llkod. Hemsidan f\u00f6r .NET \u00e4r dotnet.microsoft.com.</p>"},{"location":"material/general/dotnet/#det-finns-nagra-saker-som-gor-net-speciellt","title":"Det finns n\u00e5gra saker som g\u00f6r .NET speciellt:","text":"<ul> <li>St\u00f6d f\u00f6r flera spr\u00e5k: .NET st\u00f6djer flera programmeringsspr\u00e5k, inklusive C#, F# och Visual Basic. Detta g\u00f6r det m\u00f6jligt f\u00f6r utvecklare att v\u00e4lja det spr\u00e5k som passar dem b\u00e4st.</li> <li>Plattformoberoende: Med .NET kan du bygga applikationer som k\u00f6rs p\u00e5 Windows, Linux och macOS.</li> <li>Stort bibliotek: .NET inkluderar ett omfattande bibliotek av f\u00f6rbyggda funktioner och verktyg som g\u00f6r det enklare att utveckla applikationer. Detta inkluderar allt fr\u00e5n databas\u00e5tkomst till n\u00e4tverkskommunikation och grafiska anv\u00e4ndargr\u00e4nssnitt.</li> <li>Prestanda: Nya .NET \u00e4r k\u00e4nt f\u00f6r sin h\u00f6ga prestanda och effektivitet, vilket g\u00f6r det l\u00e4mpligt f\u00f6r att bygga b\u00e5de sm\u00e5 och stora applikationer.</li> <li>St\u00f6d f\u00f6r molntj\u00e4nster: .NET har inbyggt st\u00f6d f\u00f6r att bygga och distribuera applikationer i molnet, vilket g\u00f6r det enkelt att skapa skalbara och tillg\u00e4ngliga tj\u00e4nster.</li> <li>Aktivt community: .NET har ett stort och aktivt community av utvecklare som bidrar med verktyg, bibliotek och support.</li> </ul>"},{"location":"material/general/dotnet/compilation/","title":"Kompilering","text":"<p>Syftet med kompilering \u00e4r att \u00f6vers\u00e4tta k\u00e4llkod, som \u00e4r skriven i ett h\u00f6gniv\u00e5spr\u00e5k (t.ex. C#), till maskinkod som datorn kan f\u00f6rst\u00e5 och k\u00f6ra. I .NET anv\u00e4nds en tv\u00e5stegsprocess f\u00f6r detta: f\u00f6rst kompileras k\u00e4llkoden till en mellanliggande kod (Intermediate Language, IL), och sedan \u00f6vers\u00e4tts denna IL-kod till maskinkod av Just-In-Time (JIT) kompilatorn vid k\u00f6rning.</p> <pre><code>graph LR\n    A[K\u00e4llkod] -- Kompileras --&gt; B[Bytekod]\n    B -- JIT-kompilering --&gt; C[Maskinkod]\n    C --&gt; D[Datorn k\u00f6r programmet]</code></pre>"},{"location":"material/general/dotnet/compilation/#kallkod-source-code","title":"K\u00e4llkod (source code)","text":"<p>K\u00e4llkod \u00e4r den kod som programmeraren skriver i en textfil med hj\u00e4lp av en texteditor eller ett IDE (Integrated Development Environment). K\u00e4llkoden \u00e4r skriven i ett h\u00f6gniv\u00e5spr\u00e5k som C#, Java, Python, etc. och \u00e4r l\u00e4sbar f\u00f6r m\u00e4nniskor. Syftet med k\u00e4llkoden \u00e4r just att vara l\u00e4sbar och f\u00f6rst\u00e5elig f\u00f6r m\u00e4nniskor, inte f\u00f6r datorer.</p> <p>Exempel: <pre><code>public class Program\n{\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(\"Hello, World!\");\n    }\n}\n</code></pre></p>"},{"location":"material/general/dotnet/compilation/#bytekod-bytecode","title":"Bytekod (bytecode)","text":"<p>Bytekod \u00e4r en mellanliggande representation av k\u00e4llkoden som inte \u00e4r direkt k\u00f6rbar av datorn. I .NET kallas denna bytekod f\u00f6r Common Intermediate Language (CIL) eller Microsoft Intermediate Language (MSIL). Bytekoden \u00e4r plattformsoberoende, vilket inneb\u00e4r att den kan k\u00f6ras p\u00e5 olika operativsystem och h\u00e5rdvaruarkitekturer med hj\u00e4lp av en l\u00e4mplig runtime-milj\u00f6, som .NET Common Language Runtime (CLR).</p> <p>Exempel p\u00e5 bytekod (CIL): <pre><code>.assembly Hello {}\n.assembly extern mscorlib {}\n.method static void Main()\n{\n    .entrypoint\n    .maxstack 1\n    ldstr \"Hello, world!\"\n    call void [mscorlib]System.Console::WriteLine(string)\n    ret\n}\n</code></pre></p>"},{"location":"material/general/dotnet/compilation/#maskinkod-machine-code","title":"Maskinkod (machine code)","text":"<p>Maskinkod \u00e4r den l\u00e5gniv\u00e5kod som datorn kan f\u00f6rst\u00e5 och k\u00f6ra direkt. Den best\u00e5r av bin\u00e4ra instruktioner som \u00e4r specifika f\u00f6r en viss processorarkitektur (t.ex. x86, ARM). Maskinkoden genereras fr\u00e5n bytekoden av Just-In-Time (JIT) kompilatorn vid k\u00f6rning. JIT-kompilering inneb\u00e4r att bytekoden \u00f6vers\u00e4tts till maskinkod precis innan den ska k\u00f6ras, vilket m\u00f6jligg\u00f6r optimeringar baserade p\u00e5 den aktuella milj\u00f6n.</p> <p>Exempel p\u00e5 bin\u00e4r maskinkod (Hello World f\u00f6r x86):</p> <pre><code>0000000 7f45 4c46 0201 0100 0000 0000 0000 0000\n0000020 0200 3e00 0100 0000 0010 4000 0000 0000\n0000040 4000 0000 0000 0000 5021 0000 0000 0000\n0000060 0000 0000 4000 3800 0300 4000 0600 0500\n0000100 0100 0000 0400 0000 0000 0000 0000 0000\n0000120 0000 4000 0000 0000 0000 4000 0000 0000\n0000140 e800 0000 0000 0000 e800 0000 0000 0000\n0000160 0010 0000 0000 0000 0100 0000 0500 0000\n0000200 0010 0000 0000 0000 0010 4000 0000 0000\n0000220 0010 4000 0000 0000 2200 0000 0000 0000\n0000240 2200 0000 0000 0000 0010 0000 0000 0000\n0000260 0100 0000 0600 0000 0020 0000 0000 0000\n0000300 0020 4000 0000 0000 0020 4000 0000 0000\n0000320 0e00 0000 0000 0000 0e00 0000 0000 0000\n0000340 0010 0000 0000 0000 0000 0000 0000 0000\n0000360 0000 0000 0000 0000 0000 0000 0000 0000\n</code></pre>"},{"location":"material/general/dotnet/compilation/#deep-dive","title":"Deep dive","text":"<p>L\u00e4s mer om detta om du vill!</p> <ul> <li>Common Intermediate Language</li> <li>Bytecode</li> <li>The Smallest Hello World Program</li> <li>Hello World, Byte for Byte</li> </ul>"},{"location":"material/general/dotnet/dotnetcli/","title":".NET CLI","text":"<p>Bra att ha l\u00e4st innan du l\u00e4ser detta avsnitt: Terminalen.</p> <p>.NET CLI (Command Line Interface) \u00e4r .NET's kommandoradsverktyg som l\u00e5ter dig skapa, bygga, k\u00f6ra och publicera .NET-applikationer direkt fr\u00e5n terminalen.  </p> <p>Med kommandot <code>dotnet</code> kan du utf\u00f6ra en m\u00e4ngd olika uppgifter, fr\u00e5n att skapa nya projekt till att hantera beroenden och paket. H\u00e4r \u00e4r n\u00e5gra av de vanligaste kommandona du kan anv\u00e4nda med .NET CLI:</p> Kommando Beskrivning Exempel <code>dotnet new</code> Skapa ett nytt .NET-projekt eller fil. <code>dotnet new console -n MyApp</code> skapar en ny konsolapplikation med namnet \"MyApp\". <code>dotnet run</code> Bygger och k\u00f6r en .NET-applikation. <code>dotnet run</code> k\u00f6r applikationen i den aktuella katalogen. <code>dotnet add package</code> L\u00e4gger till ett NuGet-paket till ett projekt. <code>dotnet add package Newtonsoft.Json</code> l\u00e4gger till paketet Newtonsoft.Json till projektet. <code>dotnet list</code> Visar en lista \u00f6ver projektets beroenden, paket eller referenser. <code>dotnet list package</code> visar alla NuGet-paket som \u00e4r installerade i projektet. <code>dotnet help</code> Visar hj\u00e4lp f\u00f6r .NET CLI och dess kommandon. <code>dotnet help</code> visar en \u00f6versikt \u00f6ver tillg\u00e4ngliga kommandon. <code>dotnet test</code> K\u00f6r enhetstester f\u00f6r en .NET-applikation. <code>dotnet test</code> k\u00f6r alla tester i projektet."},{"location":"material/general/dotnet/dotnetcli/#lankar","title":"L\u00e4nkar","text":"<p>L\u00e4nk till officiell dokumentation: https://learn.microsoft.com/en-us/dotnet/core/tools/</p>"},{"location":"material/general/dotnet/packages/","title":"Paket","text":"<p>Paket \u00e4r paketerade samlingar av kod som kan \u00e5teranv\u00e4ndas i olika projekt. I .NET hanteras paket med hj\u00e4lp av NuGet, som \u00e4r den officiella pakethanteraren f\u00f6r .NET.</p> <p>F\u00f6r att l\u00e4gga till ett paket till ditt projekt anv\u00e4nder du kommandot <code>dotnet add package &lt;paket-namn&gt;</code>. Detta kommando laddar ner paketet fr\u00e5n NuGet-siten och l\u00e4gger till en referens i din projektfil (<code>.csproj</code>).</p>"},{"location":"material/general/dotnet/packages/#exempel-pa-att-lagga-till-ett-paket","title":"Exempel p\u00e5 att l\u00e4gga till ett paket","text":"<p>Om du vill l\u00e4gga till paketet <code>Bogus</code> till ditt projekt, k\u00f6r f\u00f6ljande kommando i terminalen:</p> <pre><code>dotnet add package Bogus --version 35.6.3\n</code></pre> <p>Detta kommer att ladda ner version 35.6.3 av <code>Bogus</code>-paketet och uppdatera din <code>.csproj</code>-fil med en referens till detta paket. Du kan nu anv\u00e4nda <code>Bogus</code>-biblioteket i din kod f\u00f6r att generera p\u00e5hittad data, vilket \u00e4r s\u00e4rskilt anv\u00e4ndbart f\u00f6r testning och utveckling. L\u00e4s mer om Bogus h\u00e4r: Bogus p\u00e5 GitHub.</p>"},{"location":"material/general/dotnet/packages/#hantera-paket","title":"Hantera paket","text":"<p>F\u00f6r att se vilka paket som \u00e4r installerade i ditt projekt, kan du anv\u00e4nda kommandot:</p> <pre><code>dotnet list package\n</code></pre> <p>Detta kommando visar en lista \u00f6ver alla paket som \u00e4r installerade i ditt projekt, tillsammans med deras versioner.</p>"},{"location":"material/general/dotnet/packages/#massor-av-paket","title":"Massor av paket!","text":"<p>Det finns massor av paket att uppt\u00e4cka. Ett paket f\u00f6r grafik \u00e4r </p>"},{"location":"material/general/dotnet/projects/","title":"Projektstruktur","text":"<p>Det enklaste s\u00e4ttet att ha ett .NET-projekt \u00e4r att ha en enda <code>.csproj</code>-fil i roten av ditt projekt. Det \u00e4r dock vanligt att dela upp koden i flera delprojekt, s\u00e4rskilt n\u00e4r projektet v\u00e4xer i storlek och komplexitet, eller om du vill ha ett testprojekt f\u00f6r enhetstester</p>"},{"location":"material/general/dotnet/projects/#solution-sln","title":"Solution (.sln)","text":"<p>En l\u00f6sning (solution) i .NET \u00e4r en samling av relaterade projekt som hanteras tillsammans. Du kan skapa en l\u00f6sning med hj\u00e4lp av kommandot <code>dotnet new sln</code> och sedan l\u00e4gga till delprojekt med <code>dotnet sln add &lt;s\u00f6kv\u00e4g-till-projekt&gt;</code>. Med C# devkit brukar en l\u00f6sning skapas automatiskt n\u00e4r du skapar ett nytt projekt med <code>dotnet new</code>.</p>"},{"location":"material/general/dotnet/projects/#satta-upp-ett-projekt-med-flera-delprojekt","title":"S\u00e4tta upp ett projekt med flera delprojekt","text":"<ol> <li> <p>B\u00f6rja med att skapa en solution-fil f\u00f6r ditt nya projekt:     <pre><code>dotnet new sln -n MittProjekt\ncd MittProjekt\n</code></pre></p> </li> <li> <p>Skapa delprojekt: <pre><code>dotnet new classlib -n MittBibliotek  \ndotnet new console -n MittProgram  \ndotnet new xunit -n MittTestProjekt  \n</code></pre></p> </li> <li> <p>L\u00e4gg till delprojekten i l\u00f6sningen:     <pre><code>dotnet sln add MittBibliotek/MittBibliotek.csproj\ndotnet sln add MittProgram/MittProgram.csproj\ndotnet sln add MittTestProjekt/MittTestProjekt.csproj\n</code></pre></p> </li> <li> <p>L\u00e4gg till referenser mellan delprojekten:     <pre><code>dotnet add MittProgram/MittProgram.csproj reference MittBibliotek/MittBibliotek.csproj\ndotnet add MittTestProjekt/MittTestProjekt.csproj reference MittBibliotek/MittBibliotek.csproj\n</code></pre></p> </li> </ol> <p>Du har nu en l\u00f6sning med tre delprojekt: ett klassbibliotek (<code>MittBibliotek</code>), ett konsolprogram (<code>MittProgram</code>) som refererar till klassbiblioteket, och ett testprojekt (<code>MittTestProjekt</code>) som ocks\u00e5 refererar till klassbiblioteket f\u00f6r att kunna testa dess funktionalitet.</p> <p>Ett diagram som visar hur det h\u00e4nger ihop:</p> <pre><code>    flowchart TD\n        A([\"MittProjekt.sln\"]) -.-&gt; B[\"MittBibliotek.csproj\"] &amp; C[\"MittProgram.csproj\"] &amp; D[\"MittTestProjekt.csproj\"]\n        C ==&gt; B\n        D ==&gt; B\n\n        style A fill:#616161,stroke-width:2px,stroke-dasharray: 0,color:#000000,stroke:#000000</code></pre>"},{"location":"material/general/dotnet/structure/","title":"Struktur","text":"<p>Det finns m\u00e5nga s\u00e4tt att strukturera ett .NET-projekt. H\u00e4r \u00e4r n\u00e5gra exempel:</p> <p>Enklaste projektet<pre><code>MyApp/\n \u251c\u2500 Program.cs\n \u251c\u2500 Contacts.cs\n \u251c\u2500 ContactService.cs\n \u251c\u2500 Helpers.cs\n \u2514\u2500 MyApp.csproj\n</code></pre> I exemplet ovan ligger alla k\u00e4llkodsfiler i projektets rotmapp. Detta fungerar bra f\u00f6r sm\u00e5 projekt. Vill du dela upp koden i olika mappar kan du g\u00f6ra s\u00e5 h\u00e4r:</p> Fortfarande enkelt projekt<pre><code>MyApp/\n \u251c\u2500 Program.cs\n \u251c\u2500 MyApp.csproj\n \u251c\u2500 Models/     # dataklasser, ofta flera klasser i denna katalog\n \u2502   \u2514\u2500 Contact.cs\n \u2502   \u2514\u2500 TodoItem.cs\n \u251c\u2500 Services/\n \u2502   \u2514\u2500 ContactService.cs\n \u251c\u2500 Utils/\n \u2502   \u2514\u2500 Helpers.cs\n \u2514\u2500 bin/           # kompilerade filer (skapas automatiskt)\n \u2514\u2500 obj/           # byggartefakter (skapas automatiskt)\n</code></pre> <ul> <li>Program.cs \u2013 startpunkten.</li> <li>Models/ \u2013 klasser som bara h\u00e5ller data.</li> <li>Services/ \u2013 klasser med logik/funktionalitet.</li> <li>Utils/ \u2013 sm\u00e5 hj\u00e4lpfunktioner.</li> <li>bin/ och obj/ \u2013 genereras automatiskt (ska inte commitas till Git)</li> </ul> Lite st\u00f6rre projekt<pre><code>MyApp/\n \u251c\u2500 MyApp.sln      # L\u00f6sningsfil\n \u251c\u2500 MyApp.Core/    # K\u00e4rnlogik\n \u2502   \u251c\u2500 MyApp.Core.csproj # Projektfil f\u00f6r Core\n \u2502   \u251c\u2500 Models/\n \u2502   \u2502   \u2514\u2500 Contact.cs\n \u2502   \u251c\u2500 Services/\n \u2502   \u2502   \u2514\u2500 ContactService.cs\n \u2502   \u2514\u2500 Utils/\n \u2502       \u2514\u2500 Helpers.cs\n \u251c\u2500 MyApp.Console/ # Konsolapp (Anv\u00e4ndargr\u00e4nssnittet)\n \u2502   \u251c\u2500 MyApp.Console.csproj # Projektfil f\u00f6r Console-appen\n \u2502   \u2514\u2500 Program.cs\n \u251c\u2500 MyApp.Tests/   # Enhetstester\n \u2502   \u251c\u2500 MyApp.Tests.csproj\n \u2502   \u2514\u2500 ContactServiceTests.cs\n \u2514\u2500 README.md\n</code></pre> <ul> <li>MyApp.sln \u2013 l\u00f6sningsfil som binder ihop flera projekt.</li> <li>MyApp.Core/ \u2013 k\u00e4rnlogik som kan \u00e5teranv\u00e4ndas i olika applikationer.</li> <li>MyApp.Console/ \u2013 konsolapplikationen som anv\u00e4ndaren k\u00f6r.</li> <li>MyApp.Tests/ \u2013 enhetstester f\u00f6r att testa k\u00e4rnlogiken.</li> <li>README.md \u2013 information om projektet. Visas p\u00e5 GitHub.</li> </ul> St\u00f6rre projekt src-katalog<pre><code>MyApp/\n \u251c\u2500 MyApp.sln\n \u251c\u2500 src/           # K\u00e4llkod\n \u2502   \u251c\u2500 MyApp.Core/\n \u2502   \u2502   \u251c\u2500 MyApp.Core.csproj\n \u2502   \u2502   \u251c\u2500 Models/\n \u2502   \u2502   \u2502   \u2514\u2500 Contact.cs\n \u2502   \u2502   \u251c\u2500 Services/\n \u2502   \u2502   \u2502   \u2514\u2500 ContactService.cs\n \u2502   \u2502   \u2514\u2500 Utils/\n \u2502   \u2502       \u2514\u2500 Helpers.cs\n \u2502   \u251c\u2500 MyApp.Console/ # Konsolapp (om det finns en)\n \u2502   \u2502   \u251c\u2500 MyApp.Console.csproj\n \u2502   \u2502   \u2514\u2500 Program.cs\n \u2502   \u2514\u2500 MyApp.Web/  # Webbapplikation (om det finns en)\n \u2502       \u251c\u2500 MyApp.Web.csproj\n \u2502       \u2514\u2500 Program.cs\n \u251c\u2500 tests/         # Enhetstester\n \u2502   \u251c\u2500 MyApp.Tests/\n \u2502   \u2502   \u251c\u2500 MyApp.Tests.csproj\n \u2502   \u2502   \u2514\u2500 ContactServiceTests.cs\n \u251c\u2500 docs/          # Dokumentationskatalog\n \u2502  \u2514\u2500 ...\n \u2514\u2500 README.md\n</code></pre>"},{"location":"material/general/methodology/","title":"Metodik","text":"<p>Metodik</p>"},{"location":"material/general/methodology/codeconventions/","title":"Kodstandard","text":"<p>Det \u00e4r bra att inom samma projekt eller team f\u00f6lja en gemensam kodstandard f\u00f6r att g\u00f6ra koden s\u00e5 l\u00e4ttl\u00e4st som m\u00f6jligt f\u00f6r alla.</p> <p>J\u00e4mf\u00f6r detta med v\u00e5rt vanliga skrivna spr\u00e5k; omallahittadep\u00e5egna REGLERF\u00d6R HURtextSKA.S.K.r.i;v..a(s)s\u00e5;blir-det-sv\u00e5rt_foer_andra att_leesa_okk-forstavadsommenasellerhur?</p>"},{"location":"material/general/methodology/codeconventions/#vanliga-regler-inom-c-varlden-ar","title":"Vanliga regler inom C#-v\u00e4rlden \u00e4r:","text":"<ul> <li>Anv\u00e4nd sk. PascalCase f\u00f6r klassnamn och metodnamn (t.ex. <code>MinKlass</code>, <code>MinMetod</code>).</li> <li>Anv\u00e4nd sk. camelCase f\u00f6r variabler och f\u00e4lt (t.ex. <code>minVariabel</code>, <code>mittFalt</code>).</li> <li>Anv\u00e4nd tydliga och beskrivande namn f\u00f6r variabler, metoder och klasser:'<ul> <li>Undvik f\u00f6rkortningar och kryptiska namn: <code>int x</code> \u00e4r s\u00e4mre \u00e4n <code>int age</code>.</li> <li>Anv\u00e4nd engelska: <code>int age</code> \u00e4r b\u00e4ttre \u00e4n <code>int \u00e5lder</code>.</li> </ul> </li> <li>Anv\u00e4nd indrag (ofta 4 mellanslag) f\u00f6r att visa block av kod:' <pre><code>if (true)\n{\n    Console.WriteLine(\"Indrag med 4 mellanslag\");\n}\n</code></pre></li> <li>Placera \u00f6ppnande klammerparentes <code>{</code> p\u00e5 raden under deklarationen (t.ex. <code>if</code>, <code>for</code>, <code>while</code>, <code>class</code>, <code>method</code>): <pre><code>if (true)\n{\n    Console.WriteLine(\"F\u00f6rsta m\u00e5svingen kommer p\u00e5 raden under if\");\n}\n</code></pre></li> <li>Anv\u00e4nd tomma rader f\u00f6r \"styckesindelning\" av koden f\u00f6r att g\u00f6ra den mer l\u00e4ttl\u00e4st: <pre><code>double priceExVat = 25;\ndouble vat = priceExVat * 0.25;\ndouble priceIncVat = priceExVat + vat;\n\nConsole.WriteLine($\"Pris inkl. moms: {priceIncVat}\");\nConsole.WriteLine($\"Moms: {vat}\");\n</code></pre></li> <li>Kommentera bara kod d\u00e4r det verkligen beh\u00f6vs. Tydligt skriven kod med bra namngivning beh\u00f6ver inte m\u00e5nga kommentarer: <pre><code>// S\u00e4tt d till 25:\ndouble d = 25; //d st\u00e5r f\u00f6r diameter\n// Ber\u00e4kna arean av en cirkel:\ndouble x = Math.PI * (d / 2) * (d / 2); // Anv\u00e4nd formeln \u03c0r\u00b2\n//Skriv ut arean\nConsole.WriteLine($\"Arean \u00e4r {x}\");\n</code></pre> vs: <pre><code>double diameter = 25;\ndouble radius = diameter / 2;\ndouble area = Math.PI * radius * radius;\nConsole.WriteLine($\"Arean \u00e4r {area}\");\n</code></pre></li> <li>H\u00e5ll raderna korta. Traditionellt har 80 tecken per rad ansetts vara en bra l\u00e4ngd, men 100-120 tecken \u00e4r ocks\u00e5 vanligt idag. Om en rad blir f\u00f6r l\u00e5ng, \u00f6verv\u00e4g att bryta upp den i flera rader: <pre><code>Console.WriteLine(\"Detta \u00e4r en v\u00e4ldigt l\u00e5ng rad som kanske borde brytas upp i flera rader f\u00f6r att bli mer l\u00e4sbar.\");\n</code></pre> Tex s\u00e5 h\u00e4r: <pre><code>Console.WriteLine(\"Detta \u00e4r en v\u00e4ldigt l\u00e5ng rad som kanske borde \" +\n                  \"brytas upp i flera rader f\u00f6r att bli mer l\u00e4sbar.\");\n</code></pre></li> </ul>"},{"location":"material/general/methodology/codeconventions/#las-mer","title":"L\u00e4s mer","text":"<ul> <li>https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/coding-style/identifier-names</li> <li>https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/coding-style/coding-conventions</li> <li>https://www.geeksforgeeks.org/c-sharp/c-sharp-coding-standards/</li> </ul>"},{"location":"material/general/methodology/debugging/","title":"Debugging","text":"<p>Debugging \u00e4r processen att identifiera, analysera och \u00e5tg\u00e4rda fel eller buggar i programvara eller system. Det \u00e4r en viktig del av mjukvaruutveckling och kan inneb\u00e4ra olika tekniker och verktyg beroende p\u00e5 typen av fel och milj\u00f6n d\u00e4r programvaran k\u00f6rs.</p> <p>I VS Code finns det en sk. \"Debugger\". Det \u00e4r ett verktyg som g\u00f6r det m\u00f6jligt att k\u00f6ra kod steg f\u00f6r steg, inspektera variabler och uttryck, samt s\u00e4tta brytpunkter f\u00f6r att pausa k\u00f6rningen vid specifika punkter i koden.</p> <p>I VS Code startar du debuggern genom att klicka p\u00e5 den lilla gr\u00f6na \"play\"-knappen i v\u00e4nstra menyn, eller genom att trycka p\u00e5 <code>F5</code>. Du kan ocks\u00e5 v\u00e4lja \"Run and Debug\" fr\u00e5n menyn \"Run\" h\u00f6gst upp.</p> <p>N\u00e4r debuggern startar kommer koden att stanna d\u00e4r du har satt en brytpunkt (en r\u00f6d prick i marginalen bredvid koden). Du kan sedan anv\u00e4nda verktygsf\u00e4ltet som dyker upp h\u00f6gst upp f\u00f6r att stega igenom koden, forts\u00e4tta k\u00f6rningen, eller stoppa debuggern.</p> <p>I sidof\u00e4ltet till v\u00e4nster kan du se variabler, kallelstacken och eventuella \"watch\"-uttryck du har lagt till f\u00f6r att \u00f6vervaka specifika v\u00e4rden under k\u00f6rningen.</p>"},{"location":"material/general/methodology/flowcharts/","title":"Flowcharts","text":"<p>Flowcharts anv\u00e4nds f\u00f6r att visuellt representera fl\u00f6det av en process eller ett system. De best\u00e5r av olika symboler som representerar olika typer av h\u00e4ndelser i fl\u00f6det, och pilar som visar \u00e5t vilket h\u00e5ll fl\u00f6det g\u00e5r. De vanligaste symbolerna \u00e4r:</p> <ul> <li>Start/Stop - Oval, anv\u00e4nds f\u00f6r att markera b\u00f6rjan och slutet av fl\u00f6det.</li> <li>Process - Rektangel, anv\u00e4nds f\u00f6r att representera en \u00e5tg\u00e4rd eller operation.</li> <li>Val - Diamant, anv\u00e4nds f\u00f6r att representera ett beslut som leder till olika v\u00e4gar i fl\u00f6det.</li> <li>Input/Output - Parallellogram, anv\u00e4nds f\u00f6r att representera inmatning eller utmatning av data.</li> </ul>"},{"location":"material/general/methodology/flowcharts/#exempel","title":"Exempel","text":"<p>H\u00e4r \u00e4r ett enkelt exempel p\u00e5 ett fl\u00f6desschema som visar en beslutsprocess (detta visar egentligen hur if/else fungerar):</p> <pre><code>flowchart TD\n    A@{shape: stadium, label: \"B\u00f6rja h\u00e4r\" } --&gt; B[N\u00e5got h\u00e4nder]\n    B --&gt; C{\u00c4r det sant?}\n    C -- Ja --&gt; D[N\u00e5got annat h\u00e4nder]\n    C -- Nej --&gt; E[N\u00e5got tredje h\u00e4nder]\n    D --&gt; F@{ shape: stadium, label: \"Slut\" }\n    E --&gt; F@{ shape: stadium}</code></pre>"},{"location":"material/general/methodology/flowcharts/#loop","title":"Loop","text":"<p>H\u00e4r \u00e4r ett exempel p\u00e5 en while-loop som upprepas ett antal g\u00e5nger innan fl\u00f6det avslutas.</p> <pre><code>flowchart TD\n    A@{shape: stadium, label: \"Start\" } --&gt; B[X = 0]\n    B --&gt; C{\u00e4r **X** mindre \u00e4n 5?}\n    C -- Ja --&gt; D[G\u00f6r n\u00e5got]\n    D --&gt; E[\u00d6ka X med 1]\n    E --&gt; C\n    C -- Nej --&gt; F[G\u00f6r n\u00e5got annat]\n    F --&gt; G@{ shape: stadium, label: \"Slut\" }</code></pre>"},{"location":"material/general/methodology/flowcharts/#inputoutput","title":"Input/Output","text":"<p>H\u00e4r \u00e4r ett exempel som visar inmatning och utmatning av data.</p> <pre><code>flowchart TD\n    A@{shape: stadium, label: \"Start\" } --&gt; B@{ shape: in-out, label: \"Ange ditt namn\" }\n    B --&gt; C[Skapa h\u00e4lsningsmeddelande]\n    C --&gt; D@{ shape: in-out, label: \"Visa h\u00e4lsning\" }\n    D --&gt; E@{ shape: stadium, label: \"Slut\" }</code></pre>"},{"location":"material/general/methodology/flowcharts/#mer-avancerat-exempel","title":"Mer avancerat exempel","text":"<p>H\u00e4r \u00e4r ett mer avancerat exempel som kombinerar flera element i ett fl\u00f6desschema.</p> <pre><code>flowchart TD\n    A@{shape: stadium, label: \"Start\" } --&gt; Y@{ shape: in-out, label: \"Visa v\u00e4lkomstmeddelande\" }\n    Y --&gt; B@{ shape: in-out, label: \"Ange \u00e5lder\" }\n    B --&gt; C{\u00c4r \u00e5ldern &gt;= 13?}\n    C -- Ja --&gt; D@{ shape: in-out, label: \"Visa inneh\u00e5ll\" }\n    C -- Nej --&gt; E@{ shape: in-out, label: \"Visa varning\" } --&gt; Y\n    D --&gt; F{Vill du registrera konto?}\n    F -- Ja --&gt; G@{ shape: in-out, label: \"H\u00e4mta in data\" }\n    F -- Nej --&gt; Y\n    G --&gt; H{\u00c4r data giltig?}\n    H -- Ja --&gt; I[Skapa konto] --&gt; K@{ shape: stadium, label: \"Slut\" }\n    H -- Nej --&gt; J@{ shape: in-out, label: \"Visa felmeddelande\" } --&gt; G</code></pre> <p>Det finns m\u00e5nga fler olika fomer som anv\u00e4nds i flowcharts. Vill du l\u00e4sa mer kan du titta h\u00e4r, och scrolla ner en bit: https://mermaid.js.org/syntax/flowchart.html</p>"},{"location":"material/general/methodology/pairprogramming/","title":"Parprogrammering","text":"<p>Parprogrammering \u00e4r en arbetsmetodik d\u00e4r tv\u00e5 programmerare arbetar tillsammans vid samma dator f\u00f6r att skriva kod. F\u00f6rdelarna med detta \u00e4r m\u00e5nga:</p> <ul> <li>Det fr\u00e4mjar samarbete och kunskapsdelning mellan utvecklare.</li> <li>Det kan leda till f\u00e4rre fel och h\u00f6gre kodkvalitet eftersom koden granskas medan den skrivs.</li> <li>Det kan \u00f6ka produktiviteten genom att tv\u00e5 personer kan l\u00f6sa problem snabbare \u00e4n en ensam.</li> <li>Det minskar risken f\u00f6r \"ensamarbete\" d\u00e4r en utvecklare fastnar i ett problem utan att f\u00e5 hj\u00e4lp.</li> <li>Det minskar drastiskt risken f\u00f6r att bli distraherad av sociala medier eller annnat knasigt p\u00e5 internet.</li> </ul> <p>Den ena programmeraren, kallad \"f\u00f6raren\", skriver koden medan den andra, kallad \"navigat\u00f6ren\", granskar koden som skrivs och ger feedback i realtid. </p> <p>Vanligt \u00e4r att turas om att vara f\u00f6rare och navigat\u00f6r med j\u00e4mna mellanrum, till exempel var 30:e minut eller varje timme. Detta hj\u00e4lper till att h\u00e5lla b\u00e5da programmerarna engagerade och fokuserade.</p>"},{"location":"material/general/methodology/problemsolving/","title":"Probleml\u00f6sning","text":"<p>Det vi egentligen g\u00f6r n\u00e4r vi programmerar \u00e4r att l\u00f6sa problem. Om och om igen, i olika skalor. Ofta g\u00e5r det till n\u00e5got i denna stil, ibland i enklare varianter och problemen \u00e4r sm\u00e5 och lokala (kanske bara du \u00e4r inblandad), ibland mer komplicerade varianter d\u00e4r m\u00e5nga \u00e4r inblandade och problemen \u00e4r st\u00f6rre, vilket kr\u00e4ver m\u00f6ten, dokumentation och s\u00e5 vidare.</p>"},{"location":"material/general/methodology/problemsolving/#steg-for-steg","title":"Steg f\u00f6r steg","text":"<ol> <li> <p>Definiera problemet</p> <ul> <li>Formulera problemet tydligt.</li> <li>Samla in relevant information.</li> </ul> </li> <li> <p>Bryt ner problemet i mindre delar</p> <ul> <li>Identifiera delproblem.</li> <li>Hantera varje delproblem separat. &lt;-- Viktigt!</li> </ul> </li> <li> <p>Fundera ut l\u00f6sningar</p> <ul> <li>Kom p\u00e5 flera altenativ.</li> <li>F\u00f6r- och nackdelar med varje l\u00f6sning.</li> <li>\u00c4r problemet litet kan detta steg ibland hoppas \u00f6ver.</li> <li>K\u00e4nns det f\u00f6r komplext? G\u00e5 tillbaka till steg 2 och bryt ner det \u00e4nnu mer.</li> </ul> </li> <li> <p>V\u00e4lj en l\u00f6sning</p> <ul> <li>V\u00e4lj den b\u00e4sta l\u00f6sningen baserat p\u00e5 dina kriterier.</li> <li>Motivera ditt val.</li> </ul> </li> <li> <p>Implementera l\u00f6sningen</p> <ul> <li>G\u00f6r en plan.</li> <li>Dela ut uppgifter om ni \u00e4r flera.</li> </ul> </li> <li> <p>Testa</p> <ul> <li>Fungerar l\u00f6sningen som t\u00e4nkt?</li> <li>Fungerar den i alla t\u00e4nkbara scenarion?</li> <li>Om inte, g\u00e5 tillbaka till steg 3 eller 2.</li> </ul> </li> </ol>"},{"location":"material/general/methodology/problemsolving/#tips","title":"Tips","text":"<ul> <li>Diskutera ditt problem med andra!</li> <li>Anv\u00e4nd papper och penna ibland f\u00f6r att skissa upp id\u00e9er.</li> <li>Ta en promenad f\u00f6r att rensa tankarna.</li> <li>Se hur l\u00e5ngt du kan g\u00e5 i att bryta upp ett problem i mindre delar.</li> </ul>"},{"location":"material/general/methodology/pseudocode/","title":"Pseudokod","text":"<p>Pseudokod \u00e4r ett s\u00e4tt att beskriva algoritmer och programlogik p\u00e5 ett enkelt och l\u00e4ttf\u00f6rst\u00e5eligt s\u00e4tt, utan att anv\u00e4nda ett specifikt programmeringsspr\u00e5k. </p> <p>Det kan hj\u00e4lpa dig att planera och strukturera kod innan du b\u00f6rjar skriva den i ett faktiskt spr\u00e5k som C#.</p> <p>Det finns m\u00e5nga s\u00e4tt att skriva pseudokod, och inget \u00e4r r\u00e4tt eller fel. Det viktiga \u00e4r att det \u00e4r tydligt och l\u00e4tt att f\u00f6rst\u00e5. Vad som \u00e4r l\u00e4tt att f\u00f6rst\u00e5 beror p\u00e5 vem som ska l\u00e4sa det och hur det \u00e4r skrivet.</p> <p>Ibland kan pseudokod likna ett riktigt programmeringsspr\u00e5k:</p> <pre><code>IF antal &lt; 10 THEN\n    PRINT \"Antalet \u00e4r mindre \u00e4n 10\"\nELSE\n    PRINT \"Antalet \u00e4r 10 eller mer\"\nEND IF\n</code></pre> <p>Ibland kan det vara ett naturligt spr\u00e5k skrivet som kommentarer i koden, f\u00f6r att strukturera vad koden ska g\u00f6ra innan den skrivs p\u00e5 riktigt:</p> <pre><code>// Kolla om antalet \u00e4r mindre \u00e4n 10\n\n// Om det \u00e4r det, skriv ut att antalet \u00e4r mindre \u00e4n 10\n\n// Annars, skriv ut att antalet \u00e4r 10 eller mer\n</code></pre> <p>En mall att utg\u00e5 fr\u00e5n kan vara: <pre><code>L\u00e4s in X\nInitiera variabler\nOm/Vilka fall ...\n  G\u00f6r ...\nAnnars ...\n  G\u00f6r ...\nLoop fr\u00e5n \u2026 till \u2026\nSkriv ut resultat\n</code></pre></p> <p>Exempel som anv\u00e4nder mallen: <pre><code>L\u00e4s in antal\nInitiera summa till 0\nOm antal &lt; 10\n    Skriv ut \"Antalet \u00e4r mindre \u00e4n 10\"\nAnnars\n    Skriv ut \"Antalet \u00e4r 10 eller mer\"\nLoop fr\u00e5n 1 till antal\n    L\u00e4gg till i summa\nSkriv ut summa\n</code></pre></p>"},{"location":"material/general/methodology/uml/","title":"UML","text":"<p>UML \u00e4r ett s\u00e4tt att visualisera objektorienterade system. Det kan vara ett bra s\u00e4tt att planera och diskutera hur olika delar av ett system h\u00e4nger ihop.</p> <p>Exempel p\u00e5 klassdiagram kan se ut s\u00e5 h\u00e4r (Det ni ritar kan vara mycket enklare \u00e4n detta):</p> <pre><code>classDiagram\n    class Car {\n        +String color\n        +String model\n        +int speed\n        +void accelerate()\n        +void brake()\n    }\n    class Driver {\n        +String name\n        +int age\n        +void drive(Car car)\n    }\n    class Engine {\n        +int horsepower\n        +String type\n        +void start()\n        +void stop()\n    }\n    Car \"1\" --&gt; \"1\" Engine : has\n    Driver \"1\" --&gt; \"0..1\" Car : drives</code></pre> <p>Detta s\u00e4tt att skriva klassdiagram p\u00e5 kallas f\u00f6r UML (Unified Modeling Language) och \u00e4r ett vanligt s\u00e4tt att visualisera objektorienterade system. I UML s\u00e4tts +-tecknet framf\u00f6r attribut och metoder f\u00f6r att visa att de \u00e4r publika (allts\u00e5 \u00e5tkomliga fr\u00e5n andra objekt).</p> <p>Relationerna kan markeras p\u00e5 olika s\u00e4tt. I exemplet ovan anv\u00e4nds \"1\" och \"0..1\" f\u00f6r att visa kardinalitet, allts\u00e5 hur m\u00e5nga av varje objekt som kan finnas i relationen. En bil har exakt en motor, en motor tillh\u00f6r exakt en bil. En f\u00f6rare kan k\u00f6ra noll eller en bil. Ettan p\u00e5 drivers sida betyder att varje f\u00f6rare \u00e4r en unik person. Om en f\u00f6rare p\u00e5 n\u00e5got s\u00e4tt skulle kunna k\u00f6ra flera bilar samtidigt skulle det st\u00e5 \"0..*\" p\u00e5 cars sida ist\u00e4llet.</p>"},{"location":"material/misc/categories/","title":"Kategorier","text":"<p>Inneh\u00e5llet p\u00e5 denna site kan delas in i f\u00f6ljande kategorier, utifr\u00e5n kurser och \u00e4mnen:</p>"},{"location":"material/misc/categories/#tag:oop1","title":"OOP1","text":"<ul> <li>            Array          </li> <li>            Enums          </li> <li>            Exceptions          </li> <li>            Felhantering          </li> <li>            Iteration          </li> <li>            Kodblock          </li> <li>            Metoder          </li> <li>            Operatorer          </li> <li>            Selektion          </li> <li>            Statements          </li> <li>            Struktur          </li> <li>            Syntax          </li> <li>            Uttryck          </li> <li>            Variabler          </li> </ul>"},{"location":"material/misc/categories/#tag:oop1-l\u00e4xa","title":"OOP1-L\u00e4xa","text":"<ul> <li>            L\u00e4xa 14 Objektorienterad design          </li> </ul>"},{"location":"material/misc/categories/#tag:oop1-quiz","title":"OOP1-quiz","text":"<ul> <li>            Quiz Arv          </li> <li>            Quiz Exceptions          </li> <li>            Quiz GIT          </li> <li>            Quiz Inkapsling          </li> <li>            Quiz Konstruktorer          </li> <li>            Quiz OOP Design          </li> <li>            Quiz Properties          </li> <li>            Quiz klasser          </li> </ul>"},{"location":"material/misc/categories/#tag:oop1-\u00f6vning","title":"OOP1-\u00d6vning","text":"<ul> <li>            Extra \u00f6vningar          </li> <li>            \u00d6vning 02 Grunder          </li> <li>            \u00d6vning 03 File          </li> <li>            \u00d6vning 03 Pseudokod          </li> <li>            \u00d6vning 03 Random          </li> <li>            \u00d6vning 03 String          </li> <li>            \u00d6vning 04 Metoder          </li> <li>            \u00d6vning 05 Metoder          </li> <li>            \u00d6vning 07 Adressboken          </li> <li>            \u00d6vning 07 F\u00f6rbered          </li> <li>            \u00d6vning 08 Inkapsling          </li> <li>            \u00d6vning 08 OOP Design          </li> <li>            \u00d6vning 09 Git          </li> <li>            \u00d6vning 10 Konstruktor          </li> <li>            \u00d6vning 10 Properties          </li> <li>            \u00d6vning 11 Arv          </li> <li>            \u00d6vning 12 Exceptions          </li> <li>            \u00d6vning 14 Enums          </li> <li>            \u00d6vning 14 Refaktorering          </li> <li>            \u00d6vning 15 Abstrakta klasser          </li> <li>            \u00d6vning 15 SOLID          </li> <li>            \u00d6vning 16 - Interfaces          </li> </ul>"},{"location":"material/misc/categories/#tag:oop1-\u00f6vning-sv\u00e5r","title":"OOP1-\u00d6vning (sv\u00e5r)","text":"<ul> <li>            \u00d6vning 02 Todo CLI          </li> </ul>"},{"location":"material/misc/links/","title":"L\u00e4nkar","text":""},{"location":"material/misc/links/#ovningsmaterial","title":"\u00d6vningsmaterial","text":"<ul> <li>Exercism - C# - Massor av \u00f6vningar i C#</li> <li>C# p\u00e5 W3Schools - F\u00f6rklaringar och \u00f6vningar</li> <li>C#-skolan - En svensk sida med f\u00f6rklaringar och \u00f6vningar</li> </ul>"},{"location":"material/misc/links/#microsoft","title":"Microsoft","text":"<ul> <li>Microsoft Learn - L\u00e4r dig C# och .NET med Microsofts egna kurser.</li> <li>Microsoft Docs - Dokumentation f\u00f6r C# och .NET.</li> <li>Microsoft Visual Studio Code - Microsofts editor f\u00f6r C# och .NET.</li> </ul>"},{"location":"material/misc/links/#ovrigt","title":"\u00d6vrigt","text":"<ul> <li>Cognitive load</li> </ul>"},{"location":"material/misc/raylib/","title":"Raylib","text":"<p>Kom ig\u00e5ng med lite grafikprogrammering med hj\u00e4lp av RayLib. Raylib \u00e4r ett enkelt och l\u00e4ttanv\u00e4nt bibliotek f\u00f6r att skapa f\u00f6nster, rita former, hantera input med mera.</p> <p>F\u00f6r att komma ig\u00e5ng snabbt, g\u00f6r s\u00e5 h\u00e4r:</p> <ol> <li>Skapa ett nytt konsolprojekt.</li> <li>I terminalen, skriv f\u00f6ljande kommando f\u00f6r att installera Raylib via NuGet: (Obs, du m\u00e5ste st\u00e5 i projektmappen i terminalen n\u00e4r du k\u00f6r detta kommando)</li> </ol> <pre><code>dotnet add package Raylib-CSharp --version 5.0.0\n</code></pre> <p>Sedan, i din <code>Program.cs</code>, ers\u00e4tt all kod med f\u00f6ljande exempel:</p> Enkelt exedmpel med en cirkel som g\u00e5r att styra med piltangenterna<pre><code>using Raylib_CSharp.Colors;\nusing Raylib_CSharp.Rendering;\nusing Raylib_CSharp.Windowing;\nusing Raylib_CSharp.Interact;\n\nWindow.Init(1280, 720, \"Basic Window\");\nRaylib_CSharp.Time.SetTargetFPS(60);\n\n//Startposition f\u00f6r cirkeln:\nint x = 600;\nint y = 400;\n\nwhile (!Window.ShouldClose())\n{\n    Graphics.BeginDrawing();\n    Graphics.ClearBackground(Color.Black);\n\n    Graphics.DrawText(\"Basic Window!\", 10, 10, 20, Color.White);\n\n    if (Input.IsKeyDown(KeyboardKey.Left)) x -= 1;\n    if (Input.IsKeyDown(KeyboardKey.Right)) x += 1;\n    if (Input.IsKeyDown(KeyboardKey.Up)) y -= 1;\n    if (Input.IsKeyDown(KeyboardKey.Down)) y += 1;\n\n    //F\u00f6r att cirkeln inte ska f\u00f6rsvinna utanf\u00f6r sk\u00e4rmen:\n    if (x &lt; 0) x = 0;\n    if (x &gt; 1280) x = 1280;\n    if (y &lt; 0) y = 0;\n    if (y &gt; 720) y = 720;\n\n\n    Graphics.DrawCircle(x, y, 25, Color.Maroon);\n\n    Graphics.EndDrawing();\n}\n</code></pre> <p>K\u00f6r programmet med <code>dotnet run</code> i terminalen. Du b\u00f6r nu se ett f\u00f6nster med en cirkel som du kan styra med piltangenterna.</p> <p>Detta \u00e4r bara b\u00f6rjan! L\u00e4s mer om alla funktioner h\u00e4r</p>"},{"location":"material/misc/raylib/#enklare-saker-att-testa-pa-egen-hand","title":"Enklare saker att testa p\u00e5 egen hand:","text":"<ul> <li>Skapa en rektangel som kan styras med tangenterna W, A, S, och D.</li> <li>Skapa en for-loop som ritar 10 cirklar p\u00e5 rad med olika f\u00e4rger.</li> <li>Skapa ett program d\u00e4r anv\u00e4ndaren kan klicka med musen f\u00f6r att placera ut cirklar p\u00e5 sk\u00e4rmen.</li> <li>Skapa ett enkelt spel d\u00e4r en cirkel ska undvika att bli tr\u00e4ffad av fallande rektanglar.</li> </ul>"},{"location":"material/misc/git/","title":"GIT","text":"<p>Du m\u00e5ste installera Git p\u00e5 din dator f\u00f6r att kunna anv\u00e4nda det. F\u00f6lj instruktionerna h\u00e4r: Installera Git</p> <p>Git \u00e4r ett versionshanteringssystem som hj\u00e4lper dig att h\u00e5lla reda p\u00e5 \u00e4ndringar i filer och samarbeta med andra.</p> <p>Git fungerar lite grann som en spara-funktion i spel, d\u00e4r du kan spara ditt projekt, och sedan g\u00e5 tillbaka till den versionen senare om du beh\u00f6ver. Det \u00e4r s\u00e4rskilt anv\u00e4ndbart n\u00e4r du arbetar med kod, eftersom det l\u00e5ter dig experimentera utan att riskera att f\u00f6rlora tidigare arbete. Det m\u00f6jligg\u00f6r ocks\u00e5 samarbete med andra genom att h\u00e5lla reda p\u00e5 vem som gjort vilka \u00e4ndringar och n\u00e4r.  </p> <p>En stor f\u00f6rdel med Git \u00e4r att det ocks\u00e5 g\u00e5r att \"f\u00f6rgrena\" arbetet, vilket inneb\u00e4r att du kan skapa en separat version av ditt projekt f\u00f6r att testa nya id\u00e9er utan att p\u00e5verka huvudversionen. Om du blir n\u00f6jd med dina \u00e4ndringar kan du \"sl\u00e5 ihop\" dem med huvudprojektet igen.</p> <p>Beh\u00f6ver jag l\u00e4ra mig det h\u00e4r? Jag trodde vi skulle programmera!</p> <p>Git \u00e4r idag en sj\u00e4lvklar och integrerad del av majoriteten av utvecklares och it-f\u00f6retags arbetsfl\u00f6den, och det \u00e4r en mycket viktig f\u00e4rdighet att kunna f\u00f6r alla som arbetar med kod.</p>"},{"location":"material/misc/git/#lankar","title":"L\u00e4nkar","text":"<ul> <li>Git-avsnittet i Material</li> <li>Sammanfattning p\u00e5 en sida</li> <li>Atlassian Git Tutorials</li> <li>Gits officiella dokumentation</li> <li>Git Branching</li> </ul>"},{"location":"material/misc/git/commands/","title":"Kommandon","text":""},{"location":"material/misc/git/commands/#init","title":"init","text":"<p>Skapar de filer som beh\u00f6vs f\u00f6r att git ska kunna anv\u00e4ndas i denna mapp/projekt. </p> <p><pre><code>git init\n</code></pre> Resultat: Initialized empty Git repository in /.git/"},{"location":"material/misc/git/commands/#status","title":"status","text":"<p>Om du inte k\u00f6rt <code>git init</code> i din mapp kommer det att st\u00e5 s\u00e5 h\u00e4r: <pre><code>fatal: not a git repository (or any of the parent directories): .git\n</code></pre></p> <p>Annars st\u00e5r det n\u00e5got i stil med detta om du precis k\u00f6rt <code>git init</code>: <pre><code>On branch main\n\nNo commits yet\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        readme.md\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n</code></pre></p>"},{"location":"material/misc/git/commands/#add","title":"add","text":"<p>L\u00e4gger till \u00e4ndringar till staging area. Du kan l\u00e4gga till alla \u00e4ndringar med <code>git add .</code> eller en specifik fil med <code>git add filnamn.txt</code>.</p> <pre><code>git add .\n</code></pre> <p>Testa att k\u00f6ra <code>git status</code> igen efter att du k\u00f6rt <code>git add .</code>. Du b\u00f6r nu se att det st\u00e5r \"Changes to be committed:\" och filerna du lagt till.</p>"},{"location":"material/misc/git/commands/#commit","title":"commit","text":"<p>Skapar en commit med dina \u00e4ndringar, dvs sparar en \"\u00f6gonblicksbild\" av ditt projekt. Du m\u00e5ste alltid inkludera ett meddelande som beskriver vad du har gjort med <code>-m \"ditt meddelande\"</code>.</p> <pre><code>git commit -m \"Ditt meddelande h\u00e4r\"\n</code></pre> <p>K\u00f6r du <code>git status</code> igen nu b\u00f6r du se att det st\u00e5r \"On branch main nothing to commit, working tree clean\"</p>"},{"location":"material/misc/git/commands/#log","title":"log","text":"<p>Visar historiken av commits i ditt repository, med information som commit ID, f\u00f6rfattare, datum och meddelande.</p> <pre><code>git log\n</code></pre> <p>Med <code>git log --oneline</code> f\u00e5r du en mer kompakt vy av commit-historiken.</p>"},{"location":"material/misc/git/commands/#diff","title":"diff","text":"<p>Visar skillnader mellan olika commits, eller mellan din arbetskatalog och den senaste committen. Om du bara k\u00f6r <code>git diff</code> utan n\u00e5gra argument, visar det skillnader mellan din arbetskatalog och den senaste committen.</p> <pre><code>git diff\n</code></pre> <p>Om du vill se skillnader mellan tv\u00e5 specifika commits, kan du anv\u00e4nda deras commit ID:n:</p> <pre><code>git diff commitID1 commitID2\n</code></pre>"},{"location":"material/misc/git/commands/#show","title":"show","text":"<p>Visar detaljerad information om en specifik commit, inklusive \u00e4ndrade filer och skillnader. Du m\u00e5ste ange commit ID:n f\u00f6r den commit du vill visa.</p> <pre><code>git show commitID\n</code></pre> <p>Om du vill se hur en viss fil s\u00e5g ut i en specifik commit, kan du anv\u00e4nda:</p> <pre><code>git show commitID:filnamn.txt\n</code></pre>"},{"location":"material/misc/git/commands/#branch","title":"branch","text":"<p>Visar vilka branches som finns i ditt repository. Den branch du befinner dig p\u00e5 markeras med en asterisk (*).</p> <pre><code>git branch\n</code></pre>"},{"location":"material/misc/git/commands/#branch-namnet-pa-din-nya-branch","title":"branch namnet-p\u00e5-din-nya-branch","text":"<p>Skapar en ny branch med det namn du anger.</p> <pre><code>git branch namnet-p\u00e5-din-nya-branch\n</code></pre>"},{"location":"material/misc/git/commands/#switch-namnet-pa-din-nya-branch","title":"switch namnet-p\u00e5-din-nya-branch","text":"<p>Byter till den branch du anger.</p> <pre><code>git switch namnet-p\u00e5-din-nya-branch\n</code></pre> <p>Prova att k\u00f6ra <code>git branch</code> igen s\u00e5 ser du att du nu \u00e4r p\u00e5 den nya branchen.</p>"},{"location":"material/misc/git/commands/#switch-c-namnet-pa-din-nya-branch","title":"switch -c namnet-p\u00e5-din-nya-branch","text":"<p>Skapar en ny branch och byter till den direkt.</p> <pre><code>git switch -c namnet-p\u00e5-din-nya-branch\n</code></pre>"},{"location":"material/misc/git/commands/#merge-namnet-pa-din-branch","title":"merge namnet-p\u00e5-din-branch","text":"<p>Sl\u00e5r ihop den branch du anger med den branch du befinner dig p\u00e5.</p> <pre><code>git merge namnet-p\u00e5-din-branch\n</code></pre> <p>F\u00f6rst byter du till den branch du vill sl\u00e5 ihop \u00e4ndringarna till, t.ex. <code>git switch main</code>, och sedan k\u00f6r du <code>git merge namnet-p\u00e5-din-branch</code> f\u00f6r att sl\u00e5 ihop \u00e4ndringarna fr\u00e5n den andra branchen.</p> <p>Om den branch du mergar in till inte har n\u00e5gra nya commits sedan du skapade din nya branch, kommer git att g\u00f6ra en \"fast-forward merge\", vilket inneb\u00e4r att den bara flyttar huvudmark\u00f6ren (HEAD) fram\u00e5t till den senaste commit i den andra branchen.</p> <p>Om du d\u00e4remot har nya commits i den branch du mergar till, kommer git att skapa en ny commit som sammanfogar \u00e4ndringarna fr\u00e5n b\u00e5da brancherna. Detta heter en \"three-way merge\".</p>"},{"location":"material/misc/git/commands/#kommandon-for-fjarrrepositories-github-gitlab-osv","title":"Kommandon f\u00f6r fj\u00e4rrrepositories (GitHub, GitLab, osv)","text":""},{"location":"material/misc/git/commands/#remote-add-origin-url-till-ditt-repo","title":"remote add origin URL-till-ditt-repo","text":"<p>L\u00e4gger till en fj\u00e4rranslutning (remote) med namnet \"origin\" som pekar p\u00e5 URL:en du anger. Detta \u00e4r vanligtvis den URL som anv\u00e4nds f\u00f6r att pusha och h\u00e4mta \u00e4ndringar fr\u00e5n ett fj\u00e4rrrepository.</p> <pre><code>git remote add origin URL-till-ditt-repo\n</code></pre>"},{"location":"material/misc/git/commands/#push","title":"push","text":"<p>Pushar dina commits till den remote som heter \"origin\" och den branch som heter \"main\". </p> <pre><code>git push -u origin main\n</code></pre> <p>Flaggan <code>-u</code> s\u00e4tter upp en tracking-branch, vilket inneb\u00e4r att framtida <code>git push</code> och <code>git pull</code> kommandon kommer att veta vilken remote och branch de ska interagera med utan att du beh\u00f6ver specificera det varje g\u00e5ng.</p>"},{"location":"material/misc/git/commands/#pull","title":"pull","text":"<p>H\u00e4mtar och integrerar \u00e4ndringar fr\u00e5n den remote som heter \"origin\" och den branch som heter \"main\" till din nuvarande branch.</p> <pre><code>git pull origin main\n</code></pre>"},{"location":"material/misc/git/commands/#fetch","title":"fetch","text":"<p>H\u00e4mtar \u00e4ndringar fr\u00e5n den remote som heter \"origin\" utan att integrera dem i din nuvarande branch. Detta \u00e4r anv\u00e4ndbart om du vill se vilka \u00e4ndringar som finns p\u00e5 fj\u00e4rrrepositoryt utan att p\u00e5verka ditt lokala arbete.</p> <pre><code>git fetch origin\n</code></pre>"},{"location":"material/misc/git/commands/#clone-url-till-ditt-repo","title":"clone URL-till-ditt-repo","text":"<p>Klonar ett fj\u00e4rrrepository fr\u00e5n den angivna URL:en till din lokala dator. Detta skapar en ny mapp med samma namn som repositoryt och laddar ner alla filer och historik.</p> <pre><code>git clone URL-till-ditt-repo\n</code></pre>"},{"location":"material/misc/git/getstarted/","title":"Kom ig\u00e5ng","text":"<ol> <li>Se till att du har installerat Git.</li> <li>G\u00e5 till ett projekt som du vill anv\u00e4nda Git med, eller skapa ett nytt.</li> <li>I terminalen, initera ett nytt Git-repository med kommandot:    <pre><code>git init\n</code></pre>    Detta skapar en ny <code>.git</code>-mapp i ditt projekt, d\u00e4r Git kommer att lagra all information om versioner och \u00e4ndringar. Om du tar bort den mappen s\u00e5 tas all din githistorik bort f\u00f6r det projektet, s\u00e5 var f\u00f6rsiktig med den!</li> <li>Innan du kan g\u00f6ra din f\u00f6rsta commit m\u00e5ste du se till s\u00e5 att Git vet vilka filer den ska h\u00e5lla koll p\u00e5. Det g\u00f6r du med kommandot:    <pre><code>git add .\n</code></pre>    Detta l\u00e4gger till alla filer som \u00e4r i ditt projekt just nu till Git.</li> <li>Nu \u00e4r du redo att g\u00f6ra din f\u00f6rsta commit! Det g\u00f6r du med kommandot:    <code>bash     git commit -m \"First commit\"</code>     Detta sparar en \"\u00f6gonblicksbild\" av ditt projekt med ett meddelande som beskriver vad du har gjort. Du kan ers\u00e4tta texten inom citattecknen med vad du vill.</li> </ol> <p>Obs!</p> <p>Om du bara skriver <code>git commit</code> utan <code>-m</code> s\u00e5 \u00f6ppnas en textredigerare d\u00e4r du kan skriva ett l\u00e4ngre meddelande. Spara och st\u00e4ng redigeraren n\u00e4r du \u00e4r klar f\u00f6r att slutf\u00f6ra committen.</p> <ol> <li>Nu har du gjort din f\u00f6rsta commit! P\u00e5 detta s\u00e4ttet kan du forts\u00e4tta g\u00f6ra \u00e4ndringar i ditt projekt, l\u00e4gga till dem med <code>git add</code>, och spara dem med <code>git commit</code> n\u00e4r du \u00e4r n\u00f6jd. Gl\u00f6m inte att skriva meningsfulla meddelanden f\u00f6r varje commit s\u00e5 att du l\u00e4tt kan f\u00f6rst\u00e5 vad som har \u00e4ndrats senare (Detta \u00e4r l\u00e4ttare sagt \u00e4n gjort i b\u00f6rjan!).</li> </ol> <p>Varje commit f\u00e5r ett unikt ID (en hash). Om vi visualiserar tre commits p\u00e5 main-branch kan det se ut s\u00e5 h\u00e4r:</p> <pre><code>gitGraph\n    commit\n    commit\n    commit</code></pre> <p>Senare om du har skapat en branch f\u00f6r att testa en ny funktion, kan det se ut s\u00e5 h\u00e4r:</p> <pre><code>gitGraph\n    commit\n    commit\n    branch feature\n    checkout feature\n    commit\n    commit\n    checkout main\n    commit</code></pre> <p>Om du senare vill sl\u00e5 ihop din feature-branch med main-branch kan det se ut s\u00e5 h\u00e4r:</p> <pre><code>gitGraph\n    commit\n    commit\n    branch feature\n    checkout feature\n    commit\n    commit\n    checkout main\n    merge feature\n    commit</code></pre>"},{"location":"material/misc/git/github/","title":"GitHUB","text":"<p>GitHub \u00e4r en plattform f\u00f6r att lagra och samarbeta kring Git-repositories online. Det \u00e4r som ett socialt n\u00e4tverk f\u00f6r programmerare, d\u00e4r folk kan delar sina projekt, granskar varandras kod och arbetar tillsammans.</p> <p>GitHub anv\u00e4nder sig av Git f\u00f6r versionshantering, men l\u00e4gger till en rad extra funktioner som g\u00f6r det enklare att samarbeta, s\u00e5som pull requests, issues och wikis.</p> <p>F\u00f6r att koppla samman ett lokalt repository med ett repository p\u00e5 GitHub kan du g\u00e5 till v\u00e4ga p\u00e5 lite olika s\u00e4tt.</p>"},{"location":"material/misc/git/undo/","title":"\u00c5ngra sig i Git","text":"<p>Ibland blir det fel och det kan vara bra att veta hur det g\u00e5r till att \u00e5ngra sig i Git. H\u00e4r g\u00e5r vi igenom n\u00e5gra vanliga scenarion.</p>"},{"location":"material/misc/git/undo/#angra-icke-committade-andringar","title":"\u00c5ngra icke-committade \u00e4ndringar","text":"<p>Om du har gjort \u00e4ndringar i din arbetskatalog som inte \u00e4r commitade s\u00e5 kan du \u00e5ngra dem med:</p> <pre><code>git restore filnamn.txt\n</code></pre> <p>D\u00e5 kommer filen att \u00e5terst\u00e4llas till den senaste committens version. Bra utifall det inte g\u00e5r att k\u00f6ra ctrl+z i din texteditor eller det blivit n\u00e5got annat tok.</p>"},{"location":"material/misc/git/undo/#amend-andra-senaste-commit","title":"Amend - \u00e4ndra senaste commit","text":"<p>Om du precis har gjort en commit och gl\u00f6mt att l\u00e4gga till en fil eller vill \u00e4ndra commit-meddelandet s\u00e5 kan du anv\u00e4nda <code>--amend</code>:</p> <pre><code>git commit --amend\n</code></pre> <p>Detta \u00f6ppnar upp din texteditor med det gamla commit-meddelandet, s\u00e5 att du kan \u00e4ndra det.  </p> <p>Om du bara vill l\u00e4gga till en fil som du gl\u00f6mt, s\u00e5 l\u00e4gger du f\u00f6rst till den med <code>git add filnamn.txt</code> och k\u00f6r sedan <code>git commit --amend</code> utan att \u00e4ndra meddelandet.</p> <p>Varning varning!</p> <p>Anv\u00e4nd <code>--amend</code> med f\u00f6rsiktighet, speciellt om du redan har pushat din commit till en remote. Det \u00e4ndrar n\u00e4mligen commit-historiken, vilket kan st\u00e4lla till problem f\u00f6r andra som jobbar p\u00e5 samma repo! Anv\u00e4nd bara <code>--amend</code> f\u00f6r sm\u00e5justeringar.</p>"},{"location":"material/misc/git/vocabulary/","title":"Begrepp","text":""},{"location":"material/misc/git/vocabulary/#main-branch","title":"Main branch","text":"<p>Main branch (huvudgren) \u00e4r den prim\u00e4ra linjen av utveckling i ett Git-repository. Det \u00e4r d\u00e4r den stabila och f\u00e4rdiga koden vanligtvis finns, och det \u00e4r ofta den version som distribueras eller anv\u00e4nds i produktion. Tidigare kallades denna branch ofta \"master\". </p>"},{"location":"material/misc/git/vocabulary/#head","title":"Head","text":"<p>Head syftar till den senaste commit som \u00e4r aktiv i din nuvarande branch. Det \u00e4r som en mark\u00f6r som visar var du befinner dig i projektets historik.</p>"},{"location":"material/misc/git/vocabulary/#staging-area","title":"Staging area","text":"<p>Staging area \u00e4r som en f\u00f6rberedelsezon d\u00e4r du samlar alla \u00e4ndringar du vill inkludera i din n\u00e4sta commit. T\u00e4nk p\u00e5 det som en \"att g\u00f6ra\"-lista f\u00f6r dina \u00e4ndringar innan du sparar dem permanent i projektets historik.</p>"},{"location":"material/misc/git/vocabulary/#repository","title":"Repository","text":"<p>Ett repository (eller repo) \u00e4r som en digital mapp d\u00e4r alla filer och historiken f\u00f6r ditt projekt lagras. Det \u00e4r h\u00e4r Git h\u00e5ller reda p\u00e5 alla versioner av dina filer och \u00e4ndringar \u00f6ver tid.</p>"},{"location":"material/misc/git/vocabulary/#branch","title":"Branch","text":"<p>En branch (gren) \u00e4r en separat linje av utveckling i ditt projekt. Det l\u00e5ter dig arbeta p\u00e5 nya funktioner eller \u00e4ndringar utan att p\u00e5verka huvudversionen av ditt projekt. N\u00e4r du \u00e4r n\u00f6jd med dina \u00e4ndringar kan du sl\u00e5 ihop (merge) din branch med huvudbranchen (ofta kallad \"main\" eller \"master\").</p>"},{"location":"material/misc/git/vocabulary/#tag","title":"Tag","text":"<p>En tag \u00e4r en etikett som du kan f\u00e4sta vid en specifik commit f\u00f6r att markera viktiga punkter i projektets historik, som till exempel versioner eller releaser. Det \u00e4r som ett bokm\u00e4rke som g\u00f6r det l\u00e4ttare att hitta tillbaka till den punkten senare, eftersom commits annars identifieras med l\u00e5nga, komplexa hash-koder.</p>"},{"location":"material/misc/git/vocabulary/#conflict","title":"Conflict","text":"<p>En konflikt uppst\u00e5r n\u00e4r Git inte automatiskt kan sl\u00e5 ihop \u00e4ndringar fr\u00e5n olika branches eftersom de p\u00e5verkar samma del av en fil p\u00e5 olika s\u00e4tt. N\u00e4r detta h\u00e4nder m\u00e5ste du manuellt granska och l\u00f6sa konflikten genom att best\u00e4mma vilka \u00e4ndringar som ska beh\u00e5llas. Om detta h\u00e4nder i m\u00e5nga filer samtidigt kan det bli ganska tidskr\u00e4vande att l\u00f6sa, s\u00e5 f\u00f6rs\u00f6k undvika det!</p>"},{"location":"material/misc/git/vocabulary/#remote-fjarrrepository","title":"Remote (fj\u00e4rrrepository)","text":"<p>Remote \u00e4r en version av ditt repository som lagras p\u00e5 en annan plats, ofta p\u00e5 en server eller en plattform som GitHub. Det g\u00f6r det m\u00f6jligt att samarbeta med andra genom att dela \u00e4ndringar och uppdateringar. Det blir som en central version av ett projekt som m\u00e5nga kan interagera med.</p>"},{"location":"material/misc/guides/","title":"Guider","text":"<p>H\u00e4r finns lite olika guider samlade. Hur olika saker installeras, smidiga inst\u00e4llningar att ha osv.</p>"},{"location":"material/misc/guides/createproject/","title":"Skapa .NET-projekt","text":"<p>Det finns flera s\u00e4tt att skapa nya projekt i .NET och med VS Code! Hitta det som du gillar b\u00e4st. H\u00e4r kommer ett s\u00e4tt:</p>"},{"location":"material/misc/guides/createproject/#skapa-en-mapp","title":"Skapa en mapp","text":"<ol> <li>Starta VS Code</li> <li>Under <code>File</code> i menyn, v\u00e4lj <code>Open Folder...</code> </li> <li>G\u00e5 till en mapp d\u00e4r du vill skapa ditt projekt och skapa en ny mapp d\u00e4r. D\u00f6p den till projektets namn.</li> <li>Se till att mappen \u00e4r markerad eller dubbelklicka p\u00e5 den.</li> <li>Klicka p\u00e5 knappen <code>V\u00e4lj mapp</code> / <code>Select Folder</code> nere till h\u00f6ger.</li> <li>\u00d6ppna en terminal i VS Code genom att klicka p\u00e5 <code>Terminal</code> i</li> <li>Klicka p\u00e5 Yes, I trust the authors i rutan som ploppar upp.</li> <li>N\u00e4r du \u00e4r tillbaka i VS Code, bekr\u00e4fta att samma namn som du just gav den nya mappen st\u00e5r h\u00f6gst upp till v\u00e4nster. Detta \u00e4r mycket viktigt! Om inte s\u00e5 \u00e4r det troligen f\u00f6r att mappen inte var markerad n\u00e4r du tryckte p\u00e5 V\u00e4lj mapp i f\u00f6reg\u00e5ende steg.</li> </ol> <p>Note</p> <p>Det enda vi gjort hittills \u00e4r att skapa en ny mapp och \u00f6ppna den i VS Code. Du kan skapa en s\u00e5n mapp p\u00e5 andra s\u00e4tt ocks\u00e5, och \u00f6ppna den i VS Code.</p>"},{"location":"material/misc/guides/createproject/#skapa-nytt-projekt","title":"Skapa nytt projekt","text":"<ol> <li>Nu ska vi skapa ett konsolprojekt i .Net med hj\u00e4lp av den inbyggda terminalen i VS Code. Klicka p\u00e5 <code>Terminal</code> och sedan <code>New Terminal</code>.</li> <li>Terminalen ploppar upp l\u00e4ngst ner. Den kan se lite olika ut i olika system, och olika terminaler kan anv\u00e4ndas. Men oavsett, se till s\u00e5 att samma namn som du gav projektet och som syns h\u00f6gst upp i v\u00e4nstra h\u00f6rnet ocks\u00e5 st\u00e5r i terminalen. Skriv sedan <code>dotnet new console</code> och tryck p\u00e5 Enter.</li> <li>Lite text dyker upp och tre filer skapas. Du ser filerna i listan h\u00f6gst upp till v\u00e4nster. Klicka p\u00e5 Program.cs</li> <li>Nu kan du k\u00f6ra detta program i konsolen! Skriv <code>dotnet run</code>, v\u00e4nta lite, och om allt g\u00e5tt bra kommer det st\u00e5 <code>Hello, World!</code> d\u00e4r!</li> </ol>"},{"location":"material/misc/guides/createproject/#sa-vad-gjorde-vi-just","title":"S\u00e5 vad gjorde vi just?","text":"<ul> <li>Skapade en katalog</li> <li>\u00d6ppnade denna katalog i VS Code</li> <li>Skapade ett nytt c#-projekt med ett dotnet-kommando som skapar lite start-filet s\u00e5 att vi slipper g\u00f6ra det sj\u00e4lva.</li> </ul> <p>Detta kan man g\u00f6ra p\u00e5 en massa olika s\u00e4tt! </p>"},{"location":"material/misc/guides/createproject/#andra-satt","title":"Andra s\u00e4tt:","text":""},{"location":"material/misc/guides/createproject/#bara-genom-terminalen","title":"Bara genom terminalen","text":"<ol> <li>\u00d6ppna ett terminalf\u00f6nster</li> <li>Navigera till den plats d\u00e4r du vill skapa ditt projekt</li> <li>Skriv <code>dotnet new console -o MittProjekt</code> och tryck Enter.</li> <li>Naviger in i den nya katalogen med <code>cd MittProjekt</code></li> <li>\u00d6ppna VS Code i denna katalog med <code>code .</code></li> <li>K\u00f6r programmet med <code>dotnet run</code></li> <li>Klart!</li> </ol>"},{"location":"material/misc/guides/createproject/#inifran-vs-code-och-terminalen","title":"Inifr\u00e5n VS Code och terminalen","text":"<ol> <li>\u00d6ppna en terminal i VS Code</li> <li>G\u00e5 till den katalog d\u00e4r du vill skapa ditt projekt. Kanske <code>cd ..</code></li> <li>Skriv <code>dotnet new console -o MittProjekt</code> och tryck Enter.</li> <li>G\u00e5 in i den nya katalogen med <code>cd MittProjekt</code></li> <li>\u00d6ppna denna katalog i VS Code med <code>code .</code></li> </ol>"},{"location":"material/misc/guides/installgit/","title":"Installera GIT","text":"<ol> <li>Ladda ner GIT</li> <li>K\u00f6r programmet och f\u00f6lj instruktionerna.</li> <li>Under installationen, \u00e4ndra inte p\u00e5 n\u00e5gra svar om du inte vet vad du g\u00f6r, f\u00f6rutom p\u00e5 dessa fr\u00e5gor:<ul> <li>V\u00e4lj \"Use Visual Studio Code as Git's default editor\"</li> <li>V\u00e4lj \"Override the default branch name for new repositories\" och skriv <code>main</code></li> </ul> </li> <li>N\u00e4r installationen \u00e4r klar, \u00f6ppna terminalen och skriv:  <pre><code>git --version\n</code></pre></li> <li>Om du ser versionsnumret funkade installationen!</li> <li>N\u00e4sta steg \u00e4r att st\u00e4lla in ditt namn och epostadress som ska kopplas till dina commits: <pre><code>git config --global user.name \"Ditt Namn\"\ngit config --global user.email \"din@epostadress.se\"\n</code></pre></li> <li>Nu \u00e4r du klar att b\u00f6rja anv\u00e4nda GIT!</li> <li>Passa p\u00e5 att skaffa ett konto p\u00e5 GitHub om du inte redan gjort det.</li> </ol>"},{"location":"material/misc/guides/installgit/#lankar","title":"L\u00e4nkar","text":""},{"location":"material/misc/guides/installgit/#hjalp-for-mac","title":"Hj\u00e4lp f\u00f6r Mac:","text":"<ul> <li>Youtube: Installing Git for a Mac</li> <li>Atlassian Git Tutorial</li> </ul>"},{"location":"material/misc/guides/installgit/#hjalp-for-windows","title":"Hj\u00e4lp f\u00f6r Windows:","text":"<ul> <li>Youtube: How to install Git on Windows</li> <li>Atlassian Git Tutorial</li> </ul>"},{"location":"material/misc/guides/quickstart/","title":"Installera .NET","text":"<p>Det f\u00f6rsta du beh\u00f6ver g\u00f6ra f\u00f6r att komma ig\u00e5ng med att programmera i C# \u00e4r att ladda ner VS Code och .Net SDK.  Det absolut l\u00e4ttaste s\u00e4ttet att g\u00f6r det \u00e4r att:</p>"},{"location":"material/misc/guides/quickstart/#windows","title":"Windows:","text":"<ol> <li>G\u00e5 hit: https://dotnet.microsoft.com/en-us/learn/dotnet/hello-world-tutorial/intro</li> <li>V\u00e4lj operativsystem bland flikarna</li> <li>Tryck p\u00e5 \"Let's get started\" och f\u00f6lj instruktionerna.</li> </ol> <p>Detta kommer att installera b\u00e5de .NET SDK, VS Code och C# DevKit-till\u00e4gget i VS Code. Vad detta \u00e4r f\u00f6rklaras h\u00e4r lite kort:</p>"},{"location":"material/misc/guides/quickstart/#vscode","title":"VSCode","text":"<p>Visual Studio Code \u00e4r en editor f\u00f6r att skriva kod. Det \u00e4r ett program som g\u00f6r det l\u00e4ttare att skriva och redigera kod. Det finns m\u00e5nga till\u00e4gg som g\u00f6r det \u00e4nnu b\u00e4ttre. Det \u00e4r ok att anv\u00e4nda andra editorer ocks\u00e5, men d\u00e5 f\u00e5r du klara dig p\u00e5 egen hand, d\u00e5 det \u00e4r VS Code som anv\u00e4nds f\u00f6r alla demonstrationer.</p>"},{"location":"material/misc/guides/quickstart/#tillagget-c-devkit","title":"Till\u00e4gget C# DevKit","text":"<p>Till\u00e4gget C# DevKit \u00e4r ett till\u00e4gg f\u00f6r Visual Studio Code som g\u00f6r det l\u00e4ttare att skriva C#-kod. Det ger dig syntaxmarkering, autocompletion och mycket mer.</p>"},{"location":"material/misc/guides/quickstart/#net-sdk","title":".NET SDK","text":"<p>.NET SDK \u00e4r en samling verktyg som g\u00f6r det m\u00f6jligt att bygga och k\u00f6ra .NET-applikationer. Det inneh\u00e5ller kompilatorer, verktyg f\u00f6r att hantera paket och mycket mer.</p>"},{"location":"material/misc/guides/snippets/","title":"Snippets","text":"<p>Snippets i C# \u00e4r f\u00f6rdefinierade kodmallar som kan anv\u00e4ndas f\u00f6r att snabbt infoga vanliga kodstrukturer i din kod. De hj\u00e4lper till att \u00f6ka produktiviteten och minska m\u00e4ngden repetitivt skrivande.</p> <p>En vanlig snippet att anv\u00e4nda \u00e4r <code>cw</code>, som st\u00e5r f\u00f6r <code>Console.WriteLine()</code>. N\u00e4r du skriver <code>cw</code> och trycker p\u00e5 tabbtangenten (Tab) i en C#-fil i Visual Studio Code, kommer det automatiskt att expandera till:</p> <pre><code>System.Console.WriteLine();\n</code></pre>"},{"location":"material/misc/guides/snippets/#jag-vill-inte-att-det-ska-sta-system-innan-consolewriteline","title":"Jag vill inte att det ska st\u00e5 <code>System.</code> innan <code>Console.WriteLine()</code>!","text":"<p>Du kan fixa det genom att l\u00e4gga till lite inst\u00e4llnignar i VS Code:</p> <ol> <li>Klicka p\u00e5 <code>View</code>i menyn och sedan <code>Command Palette...</code>.</li> <li>Skriv <code>snippets</code> och klicka p\u00e5 <code>Configure Snippets</code></li> <li>Skriv <code>csharp</code> och tryck p\u00e5 <code>csharp.json</code></li> <li>L\u00e4gg till f\u00f6ljande i filen: <pre><code>{\n    \"Console.WriteLine\": {\n        \"prefix\": \"cw\",\n        \"body\": [\n            \"Console.WriteLine();\"\n        ],\n        \"description\": \"Console.WriteLine\"\n    }\n}\n</code></pre></li> <li>Spara filen och st\u00e4ng den. Nu har du \u00e4ndrat hur det inbyggda <code>cw</code> fungerar.</li> <li>Prova genom att i en .cs-fil skriva <code>cw</code> och trycka p\u00e5 Enter eller Tab.</li> </ol> <p>Prova att l\u00e4gga till en egen snippet ocks\u00e5 f\u00f6r <code>cr</code>! Viktigt att veta att de separata snippetsarna m\u00e5ste vara inom <code>{}</code> och separerade med kommatecken. S\u00e5 i detta fall, efter den n\u00e4sta sista <code>}</code> m\u00e5ste du skriva <code>,</code> (kommatecken) och sedan klistra in din nya snippet.</p>"},{"location":"material/misc/guides/snippets/#inbyggda-snippets","title":"Inbyggda snippets","text":"<p>Visual Studio Code har ocks\u00e5 inbyggda snippets f\u00f6r C#. H\u00e4r \u00e4r n\u00e5gra exempel:</p> Snippet Beskrivning <code>while</code> Skapar en while-loop <code>for</code> Skapar en for-loop <code>foreach</code> Skapar en foreach-loop <code>if</code> Skapar en if-sats <code>try</code> Skapar en try-catch-sats <code>prop</code> Skapar en egenskap (property) <code>class</code> Skapar en klass <code>interface</code> Skapar ett interface <code>enum</code> Skapar en enum <code>switch</code> Skapar en switch-sats"},{"location":"material/misc/guides/vscode/","title":"VS Code-tips","text":""},{"location":"material/misc/guides/vscode/#auto-save","title":"Auto-save","text":"<p>En av de f\u00f6rsta sakerna du b\u00f6r g\u00f6ra n\u00e4r du b\u00f6rjar anv\u00e4nda VS Code \u00e4r att aktivera auto-save. Detta f\u00f6r att inte gl\u00f6mma att spara innan du k\u00f6r ditt program. G\u00f6r s\u00e5 h\u00e4r:</p> <ol> <li>Klicka p\u00e5 kugghjulet nere till v\u00e4nster i VS Code</li> <li>V\u00e4lj \"Settings\"</li> <li>S\u00f6k p\u00e5 \"Auto Save\" i s\u00f6krutan h\u00f6gst upp</li> <li>V\u00e4lj \"onFocusChange\" i dropdown-menyn f\u00f6r \"Auto Save\"</li> </ol> <p>Klart! Nu sparas dina filer automatiskt n\u00e4r du byter f\u00f6nster eller flik i VS Code.</p>"},{"location":"material/misc/guides/vscode/#dolja-mappar","title":"D\u00f6lja mappar","text":"<p>Det kan vara sk\u00f6nt att d\u00f6lja vissa mappar i filutforskaren i VS Code, till exempel <code>bin</code> och <code>obj</code> som skapas n\u00e4r du bygger ditt projekt. G\u00f6r s\u00e5 h\u00e4r:</p> <ol> <li>Tryck p\u00e5 kugghjulet nere till v\u00e4nster i VS Code.</li> <li>V\u00e4lj <code>Settings</code>.</li> <li>S\u00f6k p\u00e5 <code>exclude</code>.</li> <li>Under Files:Exclude tryck p\u00e5 knappen <code>Add Pattern</code>. </li> <li>Skriv in namnet p\u00e5 mappen du vill d\u00f6lja, t.ex. <code>**/bin</code> eller <code>**/obj</code>.</li> </ol> <p><code>**</code> betyder att oavsett var i projektet mappen finns s\u00e5 kommer den att d\u00f6ljas.</p>"},{"location":"material/misc/guides/vscode/#snippets","title":"Snippets","text":"<p>Snippets i C# \u00e4r f\u00f6rdefinierade kodmallar som kan anv\u00e4ndas f\u00f6r att snabbt infoga vanliga kodstrukturer i din kod. De kan snabba upp din kodning en aning, speciellt om du inte vill anv\u00e4nda Co-Pilot eller liknande verktyg.</p> <p>En vanlig snippet att anv\u00e4nda \u00e4r <code>cw</code>, som st\u00e5r f\u00f6r <code>Console.WriteLine()</code>. N\u00e4r du skriver <code>cw</code> och trycker p\u00e5 Enter i en C#-fil i Visual Studio Code, kommer det automatiskt att expandera till:</p> <pre><code>System.Console.WriteLine();\n</code></pre>"},{"location":"material/misc/guides/vscode/#jag-vill-inte-att-det-ska-sta-system-innan-consolewriteline","title":"Jag vill inte att det ska st\u00e5 <code>System.</code> innan <code>Console.WriteLine()</code>!","text":"<p>Du kan fixa det genom att l\u00e4gga till lite inst\u00e4llnignar i VS Code:</p> <ol> <li>Klicka p\u00e5 <code>View</code>i menyn och sedan <code>Command Palette...</code>.</li> <li>Skriv <code>snippets</code> och klicka p\u00e5 <code>Configure Snippets</code></li> <li>Skriv <code>csharp</code> och tryck p\u00e5 <code>csharp.json</code></li> <li>L\u00e4gg till f\u00f6ljande i filen: <pre><code>{\n    \"Console.WriteLine\": {\n        \"prefix\": \"cw\",\n        \"body\": [\n            \"Console.WriteLine();\"\n        ],\n        \"description\": \"Console.WriteLine\"\n    }\n}\n</code></pre></li> <li>Spara filen och st\u00e4ng den. Nu har du \u00e4ndrat hur det inbyggda <code>cw</code> fungerar.</li> <li>Prova genom att i en .cs-fil skriva <code>cw</code> och trycka p\u00e5 Enter eller Tab.</li> </ol> <p>Prova att l\u00e4gga till en egen snippet ocks\u00e5 f\u00f6r <code>cr</code>! Viktigt att veta att de separata snippetsarna m\u00e5ste vara inom <code>{}</code> och separerade med kommatecken. S\u00e5 i detta fall, efter den n\u00e4sta sista <code>}</code> m\u00e5ste du skriva <code>,</code> (kommatecken) och sedan klistra in din nya snippet.</p>"},{"location":"material/misc/guides/vscode/#inbyggda-snippets","title":"Inbyggda snippets","text":"<p>Visual Studio Code har ocks\u00e5 inbyggda snippets f\u00f6r C#. H\u00e4r \u00e4r n\u00e5gra exempel:</p> Snippet Beskrivning <code>while</code> Skapar en while-loop <code>for</code> Skapar en for-loop <code>foreach</code> Skapar en foreach-loop <code>if</code> Skapar en if-sats <code>try</code> Skapar en try-catch-sats <code>prop</code> Skapar en egenskap (property) <code>class</code> Skapar en klass <code>interface</code> Skapar ett interface <code>enum</code> Skapar en enum <code>switch</code> Skapar en switch-sats"},{"location":"material/sql/","title":"SQL","text":"<p>SQL (Structured Query Language) Med fr\u00e5gespr\u00e5ket SQL kan vi skapa databaser, tabeller och relationer, samt l\u00e4gga till, \u00e4ndra, ta bort och h\u00e4mta data.  </p> <p>Det h\u00e4r materialet \u00e4r en introduktion till SQL med fokus p\u00e5 praktiska exempel.</p> <p>All kod du ser i exemplen kan k\u00f6ras direkt mot en testdatabas, s\u00e5 att du sj\u00e4lv kan prova.  </p> <p>I samtliga exempel i denna dokumentation anv\u00e4nds en databas f\u00f6r en skola. Du kan se hur den ser ut h\u00e4r och g\u00f6ra en egen kopia</p>"},{"location":"material/sql/dapper/anonymous_objects/","title":"Anonyma objekt i C","text":"<p>I C# kan man skapa anonyma objekt \u201con-the-fly\u201d utan att f\u00f6rst definiera en klass. Detta \u00e4r praktiskt f\u00f6r tillf\u00e4lliga strukturer n\u00e4r man inte vill skriva en egen klass f\u00f6r sm\u00e5 saker.</p> <pre><code>var person = new { Id = 1, Name = \"Kalle\", Age = 30 };\n\nConsole.WriteLine($\"Id: {person.Id}, Name: {person.Name}, Age: {person.Age}\");\n</code></pre>"},{"location":"material/sql/dapper/anonymous_objects/#resultat-vid-utskrift","title":"Resultat vid utskrift","text":"<pre><code>Id: 1, Name: Kalle, Age: 30\n</code></pre>"},{"location":"material/sql/dapper/anonymous_objects/#anvanda-anonyma-objekt-med-dapper","title":"Anv\u00e4nda anonyma objekt med Dapper","text":"<p>N\u00e4r vi k\u00f6r <code>SELECT</code> och s\u00e4rskilt <code>JOIN</code>-fr\u00e5gor kan resultatet inneh\u00e5lla kolumner som inte direkt matchar v\u00e5ra befintliga klasser. I st\u00e4llet f\u00f6r att skapa en massa sm\u00e5 hj\u00e4lparklasser f\u00f6r varje specialfall kan vi mappa mot anonyma objekt.</p> <pre><code>var result = db.Query(\n    @\"SELECT s.Name AS StudentName,\n             c.Title AS CourseTitle,\n             e.Grade\n      FROM Student s\n      JOIN Enrollment e ON s.Id = e.StudentId\n      JOIN Course c ON e.CourseId = c.Id\");\n\nforeach (var row in result)\n{\n    Console.WriteLine($\"Namn: {row.StudentName}, Kurs: {row.CourseTitle}, Betyg: {row.Grade}\");\n}\n</code></pre>"},{"location":"material/sql/dapper/anonymous_objects/#mojlig-utskrift","title":"M\u00f6jlig utskrift","text":"<pre><code>Namn: Anna Andersson, Kurs: Databaser, Betyg: 1\nNamn: Kalle Karlsson, Kurs: OOP1, Betyg: 2\n</code></pre>"},{"location":"material/sql/dapper/anonymous_objects/#varfor-anvanda-detta","title":"Varf\u00f6r anv\u00e4nda detta?","text":"<ul> <li>Bra n\u00e4r resultatet inte direkt matchar en klass du har i koden.  </li> <li>Du slipper skapa en miljon klasser f\u00f6r alla m\u00f6jliga JOIN-querys.</li> <li>Perfekt f\u00f6r JOIN-querys d\u00e4r du bara vill l\u00e4sa ut resultatet.</li> </ul>"},{"location":"material/sql/dapper/dapper_intro/","title":"Dapper","text":"<p>Dapper \u00e4r en Micro ORM (Object-Relational Mapper) f\u00f6r .NET. Den g\u00f6r det enkelt och snabbt att k\u00f6ra SQL-fr\u00e5gor och mappa resultaten till C#-objekt.</p>"},{"location":"material/sql/dapper/dapper_intro/#installation","title":"Installation","text":"<p>Skapa nytt projekt och l\u00e4gg till paketen:</p> <pre><code>dotnet new console\ndotnet add package Dapper\ndotnet add package MySql.Data\n</code></pre> <p><code>MySql.Data</code> beh\u00f6vs f\u00f6r MariaDB/MySQL.</p>"},{"location":"material/sql/dapper/dapper_intro/#anslutning","title":"Anslutning","text":"<pre><code>using System.Data;\nusing MySql.Data.MySqlClient;\nusing Dapper;\n\nstring connectionString = \"Server=min.adress.skola.com;Database=schooldb;User Id=root;Password=yourpassword;\";\nusing IDbConnection db = new MySqlConnection(connectionString);\n</code></pre>"},{"location":"material/sql/dapper/dapper_intro/#vad-ar-idbconnection","title":"Vad \u00e4r IDbConnection?","text":"<p><code>IDbConnection</code> \u00e4r ett interface i .NET (inte en del av Dapper). Det definierar gemensamma metoder och properties f\u00f6r alla databasanslutningar, oavsett om det \u00e4r SQL Server, MariaDB/MySQL, SQLite eller n\u00e5got annat.</p> <p>Exempel p\u00e5 klasser som implementerar <code>IDbConnection</code>:</p> <ul> <li><code>SqlConnection</code> (SQL Server)</li> <li><code>MySqlConnection</code> (MariaDB/MySQL)</li> <li><code>SqliteConnection</code> (SQLite)</li> </ul> <p>Genom att anv\u00e4nda <code>IDbConnection</code> kan du skriva kod som \u00e4r oberoende av vilken databas du anv\u00e4nder.</p>"},{"location":"material/sql/dapper/dapper_intro/#hur-dapper-anvander-idbconnection","title":"Hur Dapper anv\u00e4nder IDbConnection","text":"<p>Dapper ut\u00f6kar <code>IDbConnection</code> genom att l\u00e4gga till sina metoder (<code>Query</code>, <code>Execute</code>, osv.) som extension methods. Det betyder att Dapper inte definierar ett nytt interface, utan i st\u00e4llet vidareutvecklar <code>IDbConnection</code> genom att l\u00e4gga till nya metoder.</p>"},{"location":"material/sql/dapper/dapper_methods/","title":"Vanliga Dapper-metoder","text":"<p>H\u00e4r \u00e4r en \u00f6versikt \u00f6ver de mest anv\u00e4nda metoderna i Dapper, med kort f\u00f6rklaring och exempel.</p>"},{"location":"material/sql/dapper/dapper_methods/#query","title":"Query() <p>Anv\u00e4ndning: H\u00e4mtar data fr\u00e5n databasen och mappar resultatet till en <code>List&lt;T&gt;</code> av objekt.</p> <pre><code>var people = db.Query&lt;Person&gt;(\"SELECT * FROM Person\").ToList();\n\nforeach (var p in people)\n{\n    Console.WriteLine($\"{p.Id}: {p.Name}\");\n}\n</code></pre>","text":""},{"location":"material/sql/dapper/dapper_methods/#execute","title":"Execute() <p>Anv\u00e4ndning: K\u00f6r <code>INSERT</code>, <code>UPDATE</code> eller <code>DELETE</code> och returnerar antalet ber\u00f6rda rader.  </p>","text":""},{"location":"material/sql/dapper/dapper_methods/#int-rowsaffected-dbexecute-update-person-set-name-name-where-id-id-new-name-kalle-id-1-consolewritelinerowsaffected-rader-uppdaterade","title":"<pre><code>int rowsAffected = db.Execute(\n    \"UPDATE Person SET Name = @Name WHERE Id = @Id\",\n    new { Name = \"Kalle\", Id = 1 }\n);\n\nConsole.WriteLine($\"{rowsAffected} rad(er) uppdaterade\");\n</code></pre>","text":""},{"location":"material/sql/dapper/dapper_methods/#queryfirst","title":"QueryFirst() <p>Anv\u00e4ndning: H\u00e4mtar den f\u00f6rsta raden i resultatet. Om inget hittas kastas ett undantag.  </p> <pre><code>var person = db.QueryFirst&lt;Person&gt;(\n    \"SELECT * FROM Person WHERE Id = @Id\",\n    new { Id = 1 }\n);\n\nConsole.WriteLine(person.Name);\n</code></pre>","text":""},{"location":"material/sql/dapper/dapper_methods/#querysingle","title":"QuerySingle() <p>Anv\u00e4ndning: H\u00e4mtar exakt en rad. Om fler eller f\u00e4rre rader hittas kastas ett undantag.  </p> <pre><code>var person = db.QuerySingle&lt;Person&gt;(\n    \"SELECT * FROM Person WHERE Email = @Email\",\n    new { Email = \"test@skola.se\" }\n);\n</code></pre>","text":""},{"location":"material/sql/dapper/dapper_methods/#executescalar","title":"ExecuteScalar() <p>Anv\u00e4ndning: H\u00e4mtar ett enda v\u00e4rde (t.ex. <code>COUNT</code>, <code>SUM</code> eller ett nytt ID).  </p> <pre><code>int count = db.ExecuteScalar&lt;int&gt;(\n    \"SELECT COUNT(*) FROM Person\"\n);\n\nConsole.WriteLine($\"Antal personer: {count}\");\n</code></pre>","text":""},{"location":"material/sql/dapper/dapper_methods/#med-select-last_insert_id","title":"Med SELECT LAST_INSERT_ID();","text":"<p>ExecuteScalar \u00e4r t.ex. fiffig att anv\u00e4nda med <code>SELECT LAST_INSERT_ID();</code> f\u00f6r att f\u00e5 ut id:t p\u00e5 den rad vi just INSERTade.</p> <pre><code>int newId = db.ExecuteScalar&lt;int&gt;(\n    \"INSERT INTO Person (Name) VALUES (@Name); SELECT LAST_INSERT_ID();\",\n    new { Name = \"Kalle\" } );\n\nConsole.WriteLine($\"Idt \u00e4r: {newId}\"); // skriver ut idt\n</code></pre>"},{"location":"material/sql/dapper/dapper_methods/#sammanfattning","title":"Sammanfattning","text":"Metod Anv\u00e4ndning Query() H\u00e4mtar m\u00e5nga rader som lista av objekt Execute() K\u00f6r <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code> QueryFirst() H\u00e4mtar f\u00f6rsta raden, annars exception QuerySingle() Kr\u00e4ver exakt en rad, annars exception ExecuteScalar() H\u00e4mtar ett enda v\u00e4rde (t.ex. COUNT)"},{"location":"material/sql/dapper/dapper_project/","title":"Exempelprojekt","text":"<p>Nedan f\u00f6ljer ett litet enkelt exempelprojekt</p>"},{"location":"material/sql/dapper/dapper_project/#modell","title":"Modell","text":"<p>En C#-klass motsvarar en tabell i databasen.</p> <pre><code>public class Student\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public string Email { get; set; }\n}\n</code></pre>"},{"location":"material/sql/dapper/dapper_project/#select","title":"SELECT","text":"<pre><code>var students = db.Query&lt;Student&gt;(\"SELECT Id, Name, Email FROM Student\").ToList();\n\nforeach (var student in students)\n{\n    Console.WriteLine($\"{student.Id}: {student.Name} - {student.Email}\");\n}\n</code></pre>"},{"location":"material/sql/dapper/dapper_project/#insert","title":"INSERT","text":"<p>H\u00e4r \u00e4r ett exempel p\u00e5 <code>INSERT</code> med en parameteriserad fr\u00e5ga. <pre><code>string name = \"Pelle\";\nstring email = \"pelle@skola.com\";\nstring dateOfBirth = \"1990-01-01\";\n\nstring sql = \"INSERT INTO Student (Name, Email, DateOfBirth) VALUES (@Name, @Email, @DateOfBirth)\";\ndb.Execute(sql, new { Name = \"Krister\", Email = \"krister@example.com\", DateOfBirth = new DateTime(1990, 1, 1) });\n</code></pre></p>"},{"location":"material/sql/dapper/dapper_project/#utan-parametrar","title":"Utan parametrar","text":"<p>H\u00e4r \u00e4r utan parametrar. Detta \u00e4r os\u00e4kert f\u00f6r SQL-injections men kan vara enklare att f\u00f6rst\u00e5. <pre><code>string sql = $\"INSERT INTO Student (Name, Email, DateOfBirth) VALUES ('{name}', '{email}', '{dateOfBirth}')\";\ndb.Execute(sql);\n</code></pre></p>"},{"location":"material/sql/dapper/dapper_project/#_1","title":"Dapper - Nytt projekt","text":""},{"location":"material/sql/dapper/dapper_project/#update","title":"UPDATE","text":"<pre><code>string sql = \"UPDATE Student SET Email = @Email WHERE Id = @Id\";\ndb.Execute(sql, new { Email = \"newmail@example.com\", Id = 1 });\n</code></pre>"},{"location":"material/sql/dapper/dapper_project/#delete","title":"DELETE","text":"<pre><code>string sql = \"DELETE FROM Student WHERE Id = @Id\";\ndb.Execute(sql, new { Id = 1 });\n</code></pre>"},{"location":"material/sql/dml/alias/","title":"Alias","text":"<p>I SQL kan du anv\u00e4nda alias f\u00f6r att ge tabeller eller kolumner ett alternativt namn i en fr\u00e5ga. Det g\u00f6r koden mer l\u00e4sbar och kan f\u00f6rkorta l\u00e5nga tabellnamn. Alias skrivs med nyckelordet <code>AS</code>, men <code>AS</code> kan ocks\u00e5 utel\u00e4mnas.  </p>"},{"location":"material/sql/dml/alias/#syntax","title":"Syntax","text":"<pre><code>SELECT kolumnnamn AS nytt_namn\nFROM tabellnamn AS alias;\n</code></pre>"},{"location":"material/sql/dml/alias/#exempel","title":"Exempel","text":"<pre><code>-- Ge en kolumn ett alias\nSELECT Name AS StudentName, DateOfBirth AS Birthday\nFROM Student;\n\n-- Ge en tabell ett alias och anv\u00e4nd det i WHERE, utan AS\nSELECT s.Name, s.Email\nFROM Student s\nWHERE s.DateOfBirth &gt; '1990-01-01';\n</code></pre>"},{"location":"material/sql/dml/alias/#alias-och-joins","title":"Alias och JOINs","text":"<p>Alias blir extra nyttigt n\u00e4r vi jobbar med joins. Ofta blir join-satserna annars v\u00e4ldigt l\u00e5nga, samt att vi ibland har kolumner som heter samma sak i de tv\u00e5 olika tabellerna.  Man kan g\u00f6ra alias p\u00e5 b\u00e5de tabeller och kolumner. Tydligast blir det ofta att anv\u00e4nda AS p\u00e5 kolumnernas namn men inte p\u00e5 tabellernas - men det \u00e4r ingen regel:</p> <pre><code>SELECT s.Name AS StudentName, c.Name AS CourseName, e.Grade\nFROM Student s\nINNER JOIN Enrollment e ON s.Id = e.StudentId\nINNER JOIN Course c ON e.CourseId = c.Id;\n</code></pre>"},{"location":"material/sql/dml/boolean/","title":"Boolska uttryck i SQL","text":"<p>I SQL anv\u00e4nds boolska uttryck (eng. boolean expressions) f\u00f6r att avg\u00f6ra om n\u00e5got \u00e4r sant eller falskt. Dessa uttryck anv\u00e4nds ofta i <code>WHERE</code>-satser, men kan ocks\u00e5 testas direkt med <code>SELECT</code>.</p> <p>Tips: K\u00f6r varje exempel med <code>SELECT</code> i din SQL-klient, t.ex. <pre><code>SELECT 5 &gt; 3\n</code></pre></p>"},{"location":"material/sql/dml/boolean/#1-vad-ar-sant-och-vad-ar-falskt-enkla-uttryck","title":"1. Vad \u00e4r sant och vad \u00e4r falskt (enkla uttryck)","text":"<p>Utan att anv\u00e4nda n\u00e5got hj\u00e4lpmedel, avg\u00f6r vad som \u00e4r sant och vad som \u00e4r falskt. Kontrollera sedan genom att k\u00f6ra uttrycken med <code>SELECT</code>. I MariaDB returneras 1 eller 0 om det \u00e4r sant eller  falskt. </p> <pre><code>5 &gt; 3\n10 = 5\n'Hej' = 'Hej'\n'Hej' = 'Nej'\n'Hej' &lt;&gt; 'Nej'\n7 &lt;= 8\n8 &lt;= 8\n9 &lt;&gt; 9\n4 &lt; 4\nTRUE\nFALSE\n2 + 2 = 4\n15 &gt; 20\n100 &lt;= 100\n3.14 = 3\n0 &lt;&gt; 0\n5 &gt;= 2\n</code></pre>"},{"location":"material/sql/dml/boolean/#2-vad-ar-sant-och-vad-ar-falskt-komplexare-uttryck","title":"2. Vad \u00e4r sant och vad \u00e4r falskt (komplexare uttryck)","text":"<p>Nu introduceras logiska operatorer: <code>AND</code>, <code>OR</code> och <code>NOT</code>. Avg\u00f6r f\u00f6rst resultatet i huvudet, verifiera sedan genom att k\u00f6ra dem i SQL.</p> <pre><code>5 &gt; 3 AND 10 = 10\n7 &lt;= 7 OR 8 &gt; 10\nNOT (5 = 5)\nTRUE AND FALSE\nFALSE OR TRUE\nNOT FALSE OR TRUE\nNOT FALSE AND TRUE\n5 + 3 &gt; 10 OR 2 * 2 = 4\n3 + 2 = 5 AND 4 * 2 = 8\n(10 &gt; 2 AND 3 &lt; 8) OR FALSE\n4 = 4 AND 6 &lt;&gt; 6\n100 &gt; 50 AND 50 + 50 = 100\n5 &gt; 3 OR 8 &lt; 7\n'Hej' &lt;&gt; 'hej' AND 10 &gt; 1 -- obs, case sensitive beror p\u00e5 inst\u00e4llningar. Testa!\n</code></pre>"},{"location":"material/sql/dml/boolean/#3-vad-ar-boolskt-och-vad-ar-inte-boolskt","title":"3. Vad \u00e4r boolskt och vad \u00e4r inte boolskt","text":"<p>Ett boolskt uttryck returnerar alltid antingen <code>TRUE</code> eller <code>FALSE</code>. Avg\u00f6r vilka av nedanst\u00e5ende som \u00e4r boolska och vilka som inte \u00e4r det.</p> <pre><code>TRUE\nFALSE\n3 + 9\n10 &gt; 5\n'Hej' = 'Hej'\n4 * 3\n'Hej'\n0\n'True'\nNOT TRUE\n15 &gt; 5 OR 10 &lt; 3\n8 = 8\n3 &gt; 1 AND 2 &lt; 5\n4 / 2 = 2\n5 * 5\n</code></pre> <p>Ett boolskt uttryck ger alltid <code>1</code> eller <code>0</code> eller <code>TRUE</code> eller <code>FALSE</code> beroende p\u00e5 databas. Ett icke-boolskt uttryck ger ett tal, text, <code>NULL</code> eller n\u00e5got annat v\u00e4rde.</p>"},{"location":"material/sql/dml/delete/","title":"DELETE","text":"<p>F\u00f6r att ta bort rader fr\u00e5n en tabell anv\u00e4nds kommandot <code>DELETE FROM</code>. Vanligtvis kombineras det med <code>WHERE</code> f\u00f6r att styra vilka rader som ska tas bort.  </p>"},{"location":"material/sql/dml/delete/#syntax","title":"Syntax","text":"<pre><code>DELETE FROM tabellnamn\nWHERE villkor;\n</code></pre>"},{"location":"material/sql/dml/delete/#exempel","title":"Exempel","text":"<pre><code>-- Ta bort en specifik student (med Id = 4)\nDELETE FROM Student\nWHERE Id = 4;\n\n-- Ta bort flera studenter utan e-postadress\nDELETE FROM Student\nWHERE Email IS NULL;\n\n-- Ta bort alla studenter i tabellen (var f\u00f6rsiktig!)\nDELETE FROM Student;\n</code></pre>"},{"location":"material/sql/dml/insert/","title":"INSERT","text":"<p>F\u00f6r att l\u00e4gga till nya rader i en tabell anv\u00e4nds kommandot <code>INSERT INTO</code>. Du kan antingen ange v\u00e4rden f\u00f6r alla kolumner, eller bara f\u00f6r vissa kolumner.  </p>"},{"location":"material/sql/dml/insert/#syntax","title":"Syntax","text":"<pre><code>INSERT INTO tabellnamn (kolumn1, kolumn2, kolumn3, ...)\nVALUES (v\u00e4rde1, v\u00e4rde2, v\u00e4rde3, ...);\n</code></pre>"},{"location":"material/sql/dml/insert/#exempel","title":"Exempel","text":"<pre><code>-- L\u00e4gg till en student (Id s\u00e4tts automatiskt med AUTO_INCREMENT)\nINSERT INTO Student (Name, Email, DateOfBirth)\nVALUES ('Anna Andersson', 'anna@suvnet.se', '1990-05-12');\n\n-- L\u00e4gg till en student utan att ange alla kolumner (Email blir NULL)\nINSERT INTO Student (Name, DateOfBirth)\nVALUES ('Bj\u00f6rn Berg', '1985-11-23');\n\n-- L\u00e4gg till flera studenter samtidigt\nINSERT INTO Student (Name, Email, DateOfBirth)\nVALUES\n    ('Carla Carlsson', 'carla@suvnet.se', '1992-03-15'),\n    ('David Dahl', 'david@suvnet.se', '1979-07-08');\n</code></pre>"},{"location":"material/sql/dml/join/","title":"JOIN","text":"<p>F\u00f6r att h\u00e4mta data fr\u00e5n flera tabeller samtidigt anv\u00e4nds <code>JOIN</code>. Vanligast \u00e4r <code>INNER JOIN</code>, men det finns ocks\u00e5 <code>LEFT JOIN</code>, <code>RIGHT JOIN</code> och <code>FULL JOIN</code>.  </p>"},{"location":"material/sql/dml/join/#syntax","title":"Syntax","text":"<pre><code>SELECT kolumn1, kolumn2, ...\nFROM tabell1\nJOIN tabell2 ON tabell1.kolumn = tabell2.kolumn;\n</code></pre>"},{"location":"material/sql/dml/join/#exempel","title":"Exempel","text":"<p>T\u00e4nk dig att vi har f\u00f6ljande tv\u00e5 tabeller:</p>"},{"location":"material/sql/dml/join/#teacher","title":"Teacher","text":"Id Name Email 1 Gustav gustav@by.com 2 Krister krister@by.com 3 David david@by.com 4 Lars lars@by.com 5 Henrik henrik@by.com"},{"location":"material/sql/dml/join/#course","title":"Course","text":"Id Name Credits TeacherId 1 Databaser 7.5 2 2 OOP1 15 1 3 OOP2 7.5 1 5 Apputveckling 10 3 8 Webbdesign 10 3 9 AI-utveckling 10 NULL 10 Historia 10 333"},{"location":"material/sql/dml/join/#inner-join","title":"INNER JOIN","text":"<p><pre><code>-- INNER JOIN: H\u00e4mta kurser och deras l\u00e4rare\nSELECT Course.Name AS CourseName, Teacher.Name AS TeacherName\nFROM Course\nINNER JOIN Teacher ON Course.TeacherId = Teacher.Id;\n</code></pre> Ger f\u00f6ljande resultat:</p> CourseName TeacherName Databaser Krister OOP1 Gustav OOP2 Gustav Apputveckling David Webbdesign David"},{"location":"material/sql/dml/join/#left-join","title":"LEFT JOIN","text":"<p><pre><code>-- LEFT JOIN: H\u00e4mta alla kurser \u00e4ven om de inte har n\u00e5gon l\u00e4rare\nSELECT Course.Name AS CourseName, Teacher.Name AS TeacherName\nFROM Course\nLEFT JOIN Teacher ON Course.TeacherId = Teacher.Id;\n</code></pre> Ger f\u00f6ljande result set:</p> CourseName TeacherName Databaser Krister OOP1 Gustav OOP2 Gustav Apputveckling David Webbdesign David AI-utveckling NULL Historia NULL"},{"location":"material/sql/dml/join/#right-join","title":"RIGHT JOIN","text":"<p><pre><code>-- RIGHT JOIN: H\u00e4mta alla l\u00e4rare \u00e4ven om de inte har n\u00e5gon kurs\nSELECT Course.Name AS CourseName, Teacher.Name AS TeacherName\nFROM Course\nRIGHT JOIN Teacher ON Course.TeacherId = Teacher.Id;\n</code></pre> Ger f\u00f6ljande result set:</p> CourseName TeacherName OOP1 Gustav OOP2 Gustav Databaser Krister Apputveckling David Webbdesign David NULL Lars NULL Henrik"},{"location":"material/sql/dml/join/#manga-till-manga-joins","title":"M\u00e5nga till m\u00e5nga-joins","text":"<p>En m\u00e5nga till m\u00e5nga-relation anv\u00e4nds n\u00e4r en rad i en tabell kan vara kopplad till flera rader i en annan tabell, och tv\u00e4rtom. F\u00f6r att hantera detta skapas en mellantabell (\u00e4ven kallad junction table eller link table) som inneh\u00e5ller kopplingarna mellan de tv\u00e5 tabellerna.  </p> <p>Exempel: * En student kan g\u00e5 flera kurser (och ha betyg i flera kurser) * En kurs kan ha flera studenter \u2192 D\u00e4rf\u00f6r beh\u00f6vs en mellantabell som kopplar ihop <code>students</code> och <code>courses</code>.  </p> <p>Vi har f\u00f6ljande tabeller:</p>"},{"location":"material/sql/dml/join/#student","title":"Student","text":"Id Name Email DateOfBirth 1 Anna Andersson anna@example.com 1990-05-12 2 Bj\u00f6rn Berg bjorn@example.com 1985-11-23 3 Carla Carlsson carla@example.com 1992-03-15 4 David Dahl david@example.com 1979-07-08"},{"location":"material/sql/dml/join/#course_1","title":"Course","text":"Id Name Credits TeacherId 1 Databaser 7.5 2 2 OOP1 15 1 3 OOP2 7.5 1 5 Apputveckling 10 3 8 Webbdesign 10 3 9 AI-utveckling 10 NULL"},{"location":"material/sql/dml/join/#enrollment-mellantabellen-med-betyg","title":"Enrollment (mellantabellen med betyg)","text":"StudentId CourseId EnrollmentDate Grade 1 1 2023-09-01 2 1 2 2023-09-01 2 2 1 2023-09-01 0 3 8 2023-09-01 1 4 5 2023-09-01 1"},{"location":"material/sql/dml/join/#query","title":"Query","text":"<p>Exempel hur vi kan skriva queryn: <pre><code>SELECT\n  Student.Name  AS StudentName,\n  Course.Name   AS CourseName,\n  Enrollment.Grade\nFROM Student\nINNER JOIN Enrollment ON Student.Id = Enrollment.StudentId\nINNER JOIN Course     ON Enrollment.CourseId = Course.Id\nORDER BY Student.Name, Course.Name;\n</code></pre></p> <p>Resultat:</p> StudentName CourseName Grade Anna Andersson Databaser 2 Anna Andersson OOP1 2 Bj\u00f6rn Berg Databaser 0 Carla Carlsson Webbdesign 1 David Dahl Apputveckling 1"},{"location":"material/sql/dml/join/#illustration","title":"Illustration","text":"<p>Som relationsschema illustreras databasen s\u00e5h\u00e4r: </p>"},{"location":"material/sql/dml/order_by/","title":"ORDER BY","text":"<p>F\u00f6r att sortera resultatet i en fr\u00e5ga anv\u00e4nds <code>ORDER BY</code>. Du kan sortera p\u00e5 en eller flera kolumner, och ange stigande (<code>ASC</code>) eller fallande (<code>DESC</code>) ordning.  </p>"},{"location":"material/sql/dml/order_by/#syntax","title":"Syntax","text":"<pre><code>SELECT kolumn1, kolumn2, ...\nFROM tabellnamn\nORDER BY kolumn1 [ASC|DESC], kolumn2 [ASC|DESC], ...;\n</code></pre>"},{"location":"material/sql/dml/order_by/#exempel","title":"Exempel","text":"<pre><code>-- Sortera studenter efter f\u00f6delsedatum stigande (\u00e4ldst f\u00f6rst)\nSELECT Name, DateOfBirth\nFROM Student\nORDER BY DateOfBirth ASC;\n\n-- Sortera studenter efter f\u00f6delsedatum fallande (yngst f\u00f6rst)\nSELECT Name, DateOfBirth\nFROM Student\nORDER BY DateOfBirth DESC;\n\n-- Sortera p\u00e5 flera kolumner: f\u00f6rst efter namn, sedan efter f\u00f6delsedatum\nSELECT Name, Email, DateOfBirth\nFROM Student\nORDER BY Name ASC, DateOfBirth DESC;\n</code></pre>"},{"location":"material/sql/dml/select/","title":"SELECT","text":"<p>F\u00f6r att h\u00e4mta data fr\u00e5n en tabell anv\u00e4nds kommandot <code>SELECT</code>. Du kan v\u00e4lja alla kolumner eller bara vissa. Ofta kombineras <code>SELECT</code> med <code>WHERE</code> f\u00f6r att filtrera resultatet, och med <code>ORDER BY</code> f\u00f6r att sortera.  </p>"},{"location":"material/sql/dml/select/#syntax","title":"Syntax","text":"<pre><code>SELECT kolumn1, kolumn2, ...\nFROM tabellnamn\nWHERE villkor\nORDER BY kolumn ASC|DESC;\n</code></pre>"},{"location":"material/sql/dml/select/#exempel","title":"Exempel","text":"<pre><code>-- H\u00e4mta alla kolumner fr\u00e5n tabellen\nSELECT * \nFROM Student;\n\n-- H\u00e4mta specifika kolumner\nSELECT Name, DateOfBirth \nFROM Student;\n</code></pre>"},{"location":"material/sql/dml/update/","title":"UPDATE","text":"<p>F\u00f6r att \u00e4ndra v\u00e4rden i en eller flera rader anv\u00e4nds kommandot <code>UPDATE</code> tillsammans med <code>SET</code>. Vanligtvis kombineras det med <code>WHERE</code> f\u00f6r att styra vilka rader som ska \u00e4ndras.  </p>"},{"location":"material/sql/dml/update/#syntax","title":"Syntax","text":"<pre><code>UPDATE tabellnamn\nSET kolumn1 = v\u00e4rde1, kolumn2 = v\u00e4rde2, ...\nWHERE villkor;\n</code></pre>"},{"location":"material/sql/dml/update/#exempel","title":"Exempel","text":"<pre><code>-- \u00c4ndra en kolumn f\u00f6r en specifik rad (student med Id = 1)\nUPDATE Student\nSET Email = 'anna.ny@suvnet.se'\nWHERE Id = 1;\n\n-- \u00c4ndra flera kolumner samtidigt (student(er) med namnet 'Bj\u00f6rn Berg')\nUPDATE Student\nSET Email = 'bjorn.berg@suvnet.se', DateOfBirth = '1986-01-01'\nWHERE Id = 4;\n\n-- \u00c4ndra alla rader i tabellen.\n-- Var f\u00f6rsiktig! Man vill n\u00e4stan alltid ha med ett WHERE-villkor\nUPDATE Student\nSET Email = 'unknown@x.com';\n</code></pre>"},{"location":"material/sql/dml/where/","title":"WHERE","text":"<p>F\u00f6r att filtrera vilka rader som ska h\u00e4mtas, uppdateras eller tas bort anv\u00e4nds <code>WHERE</code>. Utan <code>WHERE</code> p\u00e5verkas eller visas alla rader i tabellen.  </p>"},{"location":"material/sql/dml/where/#syntax","title":"Syntax","text":"<pre><code>SELECT kolumn1, kolumn2, ...\nFROM tabellnamn\nWHERE boolean_expression;\n</code></pre>"},{"location":"material/sql/dml/where/#boolska-uttryck-boolean-expression","title":"Boolska uttryck (boolean expression)","text":"<p>Boolska uttryck byggs upp med hj\u00e4lp av j\u00e4mf\u00f6relseoperatorer och logiska operatorer och anv\u00e4nds i <code>WHERE</code>-satsen f\u00f6r att avg\u00f6ra vilka rader som ska tas med.</p>"},{"location":"material/sql/dml/where/#jamforelseoperatorer","title":"J\u00e4mf\u00f6relseoperatorer","text":"<p>Anv\u00e4nds f\u00f6r att j\u00e4mf\u00f6ra v\u00e4rden i en <code>WHERE</code>-sats. Resultatet blir alltid sant eller falskt.</p> Namn SQL C# Lika med <code>=</code> <code>==</code> Inte lika med <code>&lt;&gt;</code> <code>!=</code> St\u00f6rre \u00e4n <code>&gt;</code> <code>&gt;</code> Mindre \u00e4n <code>&lt;</code> <code>&lt;</code> St\u00f6rre \u00e4n eller lika med <code>&gt;=</code> <code>&gt;=</code> Mindre \u00e4n eller lika med <code>&lt;=</code> <code>&lt;=</code> Mellan tv\u00e5 v\u00e4rden <code>BETWEEN a AND b</code> <code>(x &gt;= a &amp;&amp; x &lt;= b)</code> Matchar m\u00f6nster <code>LIKE</code> saknas \u00c4r NULL <code>IS NULL</code> <code>x == null</code> \u00c4r inte NULL <code>IS NOT NULL</code> <code>x != null</code>"},{"location":"material/sql/dml/where/#logiska-operatorer","title":"Logiska operatorer","text":"<p>Anv\u00e4nds f\u00f6r att kombinera flera villkor i en <code>WHERE</code>-sats.</p> Namn SQL C# OCH <code>AND</code> <code>&amp;&amp;</code> ELLER <code>OR</code> <code>||</code> INTE <code>NOT</code> <code>!</code>"},{"location":"material/sql/dml/where/#exempel","title":"Exempel","text":"<pre><code>-- H\u00e4mta alla studenter f\u00f6dda efter 1990\nSELECT Name, DateOfBirth\nFROM Student\nWHERE DateOfBirth &gt; '1990-01-01';\n\n-- H\u00e4mta alla studenter med e-post angiven (inte NULL)\nSELECT Name, Email\nFROM Student\nWHERE Email IS NOT NULL;\n\n-- H\u00e4mta alla studenter f\u00f6dda p\u00e5 80-talet\nSELECT Name, DateOfBirth\nFROM Student\nWHERE DateOfBirth BETWEEN '1980-01-01' AND '1989-12-31';\n\n-- H\u00e4mta alla studenter med namn som b\u00f6rjar p\u00e5 'A'\nSELECT Name\nFROM Student\nWHERE Name LIKE 'A%';\n\n-- H\u00e4mta alla studenter som heter Anna Andersson eller Bj\u00f6rn Berg\nSELECT Name\nFROM Student\nWHERE Name = 'Anna Andersson' OR Name = 'Bj\u00f6rn Berg';\n</code></pre>"},{"location":"material/sql/edit_create/databases/","title":"Skapa och hantera databas","text":"<p>F\u00f6r att arbeta med SQL beh\u00f6ver du f\u00f6rst skapa och hantera databaser. H\u00e4r \u00e4r n\u00e5gra av de vanligaste kommandona:</p> <ul> <li><code>CREATE DATABASE</code> \u2013 skapar en ny databas  </li> <li><code>SHOW DATABASES</code> \u2013 listar alla databaser p\u00e5 servern  </li> <li><code>USE</code> \u2013 v\u00e4ljer vilken databas du vill arbeta med  </li> <li><code>SHOW TABLES</code> \u2013 visar alla tabeller i den valda databasen  </li> <li><code>DESCRIBE</code> \u2013 visar information om kolumnerna i en tabell  </li> </ul> skapa och hantera databas<pre><code>-- Skapa en ny databas\nCREATE DATABASE school;\n\n-- Visa alla databaser\nSHOW DATABASES;\n\n-- V\u00e4lj en databas att arbeta med\nUSE school;\n\n-- Visa alla tabeller i databasen\nSHOW TABLES;\n\n-- Visa kolumnerna i en tabell\nDESCRIBE Student;\n</code></pre>"},{"location":"material/sql/edit_create/tables/","title":"Skapa och redigera tabeller","text":"<p>N\u00e4r du har valt en databas kan du skapa tabeller f\u00f6r att lagra data och sedan redigera dem vid behov. Vanliga kommandon:</p> <ul> <li><code>CREATE TABLE</code> \u2013 skapar en ny tabell  </li> <li><code>SHOW TABLES</code> \u2013 visar alla tabeller i databasen  </li> <li><code>DESCRIBE</code> \u2013 visar kolumnerna i en tabell  </li> <li><code>ALTER TABLE</code> \u2013 \u00e4ndrar en tabell (l\u00e4gg till/ta bort kolumn, byt namn, \u00e4ndra datatyp)</li> </ul>"},{"location":"material/sql/edit_create/tables/#vanliga-datatyper","title":"Vanliga datatyper","text":"<p>Precis som i C# s\u00e5 jobbar SQL med olika datatyper:</p> Datatyp Beskrivning Exempelv\u00e4rde <code>INT</code> Heltal <code>42</code> <code>VARCHAR(n)</code> Text, max n tecken <code>'Hej'</code> <code>CHAR(n)</code> Text med fast l\u00e4ngd n <code>'A'</code> (om <code>CHAR(1)</code>) <code>TEXT</code> L\u00e4ngre text <code>'L\u00e5ng beskrivning'</code> <code>DATE</code> Datum (\u00c5\u00c5\u00c5\u00c5-MM-DD) <code>2025-09-15</code> <code>DATETIME</code> Datum + tid <code>2025-09-15 10:30:00</code> <code>TIME</code> Klockslag <code>10:30:00</code> <code>DECIMAL(p,s)</code> Exakt decimaltal (precision p, skala s) <code>1234.56</code> <code>FLOAT</code> Flyttal (ungef\u00e4rligt v\u00e4rde) <code>3.14</code> <code>BOOLEAN</code> Sant/Falskt (TRUE/FALSE eller 1/0) <code>TRUE</code>"},{"location":"material/sql/edit_create/tables/#skapa-tabell","title":"Skapa tabell","text":"<p>S\u00e5h\u00e4r kan vi skriva vi f\u00f6r att skapa en tabell: <pre><code>-- Skapa en tabell med vanliga datatyper\nCREATE TABLE Student (\n    Id INT,  -- Id\n    Name VARCHAR(100),                  -- Studentens namn\n    Email VARCHAR(100),                 -- Studentens e-post\n    DateOfBirth DATE                    -- Studentens f\u00f6delsedatum\n);\n</code></pre> Notera att <code>Id</code> troligen b\u00f6r vara <code>AUTO INCREMENT</code> och <code>PRIMARY KEY</code>, se nedan.</p>"},{"location":"material/sql/edit_create/tables/#visa-tabeller-och-innehall","title":"Visa tabeller och inneh\u00e5ll","text":"<pre><code>-- Visa alla tabeller i databasen\nSHOW TABLES;\n\n-- Visa kolumnerna i en viss tabell\nDESCRIBE Student;\n</code></pre>"},{"location":"material/sql/edit_create/tables/#primary-key","title":"Primary key","text":"<p>Varje tabell i en databas beh\u00f6ver en prim\u00e4rnyckel (<code>PRIMARY KEY</code>) som unikt identifierar varje rad. Primary key \u00e4r egentligen en constraint, vilket allts\u00e5 begr\u00e4nsar just inneh\u00e5llet i denna kolumn. Det tvingar den att vara unik, den kan inte ha null-v\u00e4rde. Dessutom \u00e4r en prim\u00e4rnyckel extra snabb att indexera (s\u00f6ka i).</p> <p>Oftast anv\u00e4nder man en kolumn som heter <code>Id</code>. Ibland ser man att folk d\u00f6per den till <code>TableNameId</code> (t.ex. <code>StudenId</code>) men det \u00e4r ju redundant (<code>Student.StudentId</code> blir kaka p\u00e5 kaka).</p>"},{"location":"material/sql/edit_create/tables/#auto-increment","title":"Auto increment","text":"<p>Ofta l\u00e5ter man id-f\u00e4len  automatiskt f\u00e5 ett nytt v\u00e4rde f\u00f6r varje rad som l\u00e4ggs till.  I MySQL/MariaDB g\u00f6r man detta med <code>AUTO_INCREMENT</code>: <pre><code>CREATE TABLE Student (\n    Id INT AUTO_INCREMENT PRIMARY KEY,  -- Auto-inkrementerande Id\n    Name VARCHAR(100),\n    Email VARCHAR(100),\n    DateOfBirth DATE\n);\n</code></pre></p>"},{"location":"material/sql/edit_create/tables/#redigera-tabellernas-struktur","title":"Redigera tabellernas struktur","text":"<p>Enklast \u00e4r om man g\u00f6r r\u00e4tt ifr\u00e5n b\u00f6rjan men ibland kan man \u00e4nd\u00e5 beh\u00f6va redigera tabeller.</p> <pre><code>-- 1) L\u00e4gg till en ny kolumn i Student\nALTER TABLE Student ADD COLUMN PhoneNumber VARCHAR(20);\n\n-- 2) Byt namn p\u00e5 en kolumn i Teacher\nALTER TABLE Teacher RENAME COLUMN Name TO FullName;\n\n-- 3) \u00c4ndra datatyp/l\u00e4ngd p\u00e5 en kolumn i Course\nALTER TABLE Course MODIFY COLUMN Name VARCHAR(150);\n\n-- 4) Ta bort en kolumn i Enrollment\nALTER TABLE Enrollment DROP COLUMN Grade;\n\n-- 5) Byt namn p\u00e5 tabellen Student till Pupils\nALTER TABLE Student RENAME TO Pupils;\n\n-- 6) G\u00f6ra en kolumn auto_increment\nALTER TABLE Teacher MODIFY COLUMN Id INT AUTO_INCREMENT PRIMARY KEY;\n</code></pre>"},{"location":"material/sql/functions/basic_functions/","title":"Funktioner","text":"<p>SQL inneh\u00e5ller m\u00e5nga inbyggda funktioner f\u00f6r att r\u00e4kna, summera och analysera data.</p> <p>Det vanligaste \u00e4r att funktioner i SQL anv\u00e4nds tillsammans med <code>SELECT</code> f\u00f6r att ber\u00e4kna v\u00e4rden fr\u00e5n flera rader. Dessa anv\u00e4nds ofta tillsammans med <code>GROUP BY</code>. Men f\u00f6r att f\u00f6rst f\u00f6rst\u00e5 konceptet med funktioner i SQL, l\u00e5t oss titta p\u00e5 dem utan <code>GROUP BY</code>.</p>"},{"location":"material/sql/functions/basic_functions/#enkla-funktioner","title":"Enkla funktioner","text":"<p>Testa n\u00e5gra funktioner som inte ens beh\u00f6ver n\u00e5gon tabell f\u00f6r att funka: <pre><code>SELECT NOW();               -- aktuell datum+tid\nSELECT PI();                -- pi (anv\u00e4nds v\u00e4l aldrig men funkar som exempel...)\nSELECT RAND();              -- slumpa flyttal mellan 0 och 1\nSELECT ROUND(3.14159, 2);   -- Avrunda till tv\u00e5 decimaler.\nSELECT NOW();               -- Aktuellt datum och tid\nSELECT CURDATE();           -- Endast datum\nSELECT CURTIME();           -- Endast tid\n</code></pre></p>"},{"location":"material/sql/functions/basic_functions/#funktioner-for-att-rakna-pa-tabellerkolumner","title":"Funktioner f\u00f6r att r\u00e4kna p\u00e5 tabeller/kolumner","text":"<p>Dessa funktioner anv\u00e4nds n\u00e4stan alltid med <code>GROUP BY</code> men vi kan testa dem utan. L\u00e5t oss anv\u00e4nda funktionen <code>AVG()</code> som r\u00e4knar ut medelv\u00e4rdet (average).</p> <p>H\u00e4mta ut genomssnittsbetyget f\u00f6r alla kurser i hela skolan:</p> <pre><code>SELECT AVG(Enrollment.Grade)\nFROM Enrollment;\n</code></pre> <p>Eller f\u00f6r en viss student: <pre><code>SELECT AVG(Enrollment.Grade)\nFROM Enrollment\nWHERE StudentId=31;\n</code></pre></p> <p>Eller f\u00f6r en viss kurs med kursnamn: <pre><code>select AVG(e.Grade)\nFROM Enrollment e\nINNER JOIN Course c ON e.CourseId = c.Id\nWHERE c.Name = \"Databaser\";\n</code></pre></p> <p>Men om vi vill f\u00e5 ut medelv\u00e4rdet f\u00f6r alla studenter eller f\u00f6r alla kurser s\u00e5 beh\u00f6ver jo jobba med <code>GROUP BY</code>.</p>"},{"location":"material/sql/functions/group_by/","title":"GROUP BY","text":"<p><code>GROUP BY</code> anv\u00e4nds f\u00f6r att gruppera rader med samma v\u00e4rde i en eller flera kolumner. Det \u00e4r vanligt att kombinera <code>GROUP BY</code> med funktioner som <code>COUNT</code>, <code>AVG</code>, <code>SUM</code>, <code>MIN</code> och <code>MAX</code>.  </p>"},{"location":"material/sql/functions/group_by/#vanliga-funktioner-som-anvands-med-group-by","title":"Vanliga funktioner som anv\u00e4nds med GROUP BY","text":"Funktion Beskrivning Exempel COUNT() R\u00e4knar antal rader Antal studenter AVG() Medelv\u00e4rde Medelbetyg SUM() Summerar v\u00e4rden Totala po\u00e4ng MIN() Minsta v\u00e4rde \u00c4ldsta student MAX() St\u00f6rsta v\u00e4rde Senaste f\u00f6delsedatum"},{"location":"material/sql/functions/group_by/#syntax","title":"Syntax","text":"<pre><code>SELECT kolumn, funktion(kolumn)\nFROM tabell\nGROUP BY kolumn;\n</code></pre>"},{"location":"material/sql/functions/group_by/#exempel-och-forklaring","title":"Exempel och f\u00f6rklaring","text":"<pre><code>-- Ber\u00e4kna medelbetyg per kurs\nSELECT c.Name AS CourseName, AVG(e.Grade) AS AverageGrade\nFROM Course c\nINNER JOIN Enrollment e ON c.Id = e.CourseId\nGROUP BY c.Name;\n</code></pre>"},{"location":"material/sql/functions/group_by/#steg-1","title":"Steg 1","text":"<p>F\u00f6r att f\u00f6rst\u00e5 detta kan vi f\u00f6rest\u00e4lla oss att vi f\u00f6rst f\u00e5r ut f\u00f6ljande resultat:</p> CourseName Grade Databaser 1 Databaser 2 Databaser 0 Databaser 2 OOP1 2 OOP1 1 OOP1 1"},{"location":"material/sql/functions/group_by/#steg-2","title":"Steg 2","text":"<p>Det som h\u00e4nder \u00e4r att alla Databaser och alla OOP1 sl\u00e5s ihop till en:</p> CourseName Grade Databaser 1 2 0 2 OOP1 2 1 1"},{"location":"material/sql/functions/group_by/#steg-3","title":"Steg 3","text":"<p>Sedan summeras alla betyg Grade-kolumen f\u00f6r respektive CourseName (<code>GROUP BY c.Name</code>) och vi r\u00e4knar ut medel med <code>AVG()</code> (summan/antal):</p> <ul> <li>Databaser: (1+2+0+2)/4 = 1.25</li> <li>OOP1: (2+1+1)/3 = 1.33</li> </ul> <p>Det faktiska resultatet vi f\u00e5r f\u00f6r v\u00e5r query blir allts\u00e5:</p> CourseName AverageGrade Databaser 1.25 OOP1 1.33"},{"location":"material/sql/functions/group_by/#fler-exempel","title":"Fler exempel","text":"<pre><code>-- R\u00e4kna hur m\u00e5nga studenter som \u00e4r registrerade i varje kurs\nSELECT c.Name AS CourseName, COUNT(e.StudentId) AS AntalStudenter\nFROM Course c\nINNER JOIN Enrollment e ON c.Id = e.CourseId\nGROUP BY c.Name;\n\n-- Summera po\u00e4ng (credits) per l\u00e4rare\nSELECT t.Name AS TeacherName, SUM(c.Credits) AS TotalaPo\u00e4ng\nFROM Teacher t\nINNER JOIN Course c ON t.Id = c.TeacherId\nGROUP BY t.Name;\n</code></pre>"},{"location":"material/sql/functions/group_by/#group-by-vs-order-by","title":"GROUP BY vs ORDER BY","text":"<p>Det \u00e4r l\u00e4tt att blanda ihop <code>GROUP BY</code> och <code>ORDER BY</code> eftersom b\u00e5da p\u00e5verkar resultatet i en fr\u00e5ga men de anv\u00e4nds till olika saker:</p> Funktion Syfte Exempel GROUP BY Grupperar rader f\u00f6r att kunna anv\u00e4nda funktioner som COUNT, AVG, SUM \"Hur m\u00e5nga studenter per kurs?\" ORDER BY Sorterar resultatet i en viss ordning (stigande/fallande) \"Visa alla studenter i \u00e5ldersordning\" <p>Vi kan inte anv\u00e4nda <code>GROUP BY</code> utan att anv\u00e4nda oss av en funktion medan vi kan anv\u00e4nda <code>ORDER BY</code> utan en funktion. </p>"},{"location":"material/sql/setup/errorhandling/","title":"DataGrip \u2013 Felhantering","text":"<p>N\u00e4r du arbetar i DataGrip mot MariaDB kan du st\u00f6ta p\u00e5 olika typer av fel. H\u00e4r \u00e4r de vanligaste och hur du l\u00f6ser dem.</p>"},{"location":"material/sql/setup/errorhandling/#access-denied-for-user","title":"\"Access denied for user\"","text":"<p>Orsak: Anv\u00e4ndarnamn eller l\u00f6senord \u00e4r fel, eller s\u00e5 har du inte beh\u00f6righet att logga in fr\u00e5n din dator.</p> <p>L\u00f6sning: - Kontrollera att du anv\u00e4nder r\u00e4tt anv\u00e4ndarnamn (<code>yh_f\u00f6rnamn</code>) och l\u00f6senord. - Se till att du ansluter till r\u00e4tt host och port. - Prata med en klasskamrat - Prata med en annan klasskamrat - Funkar det fortfarande inte? Prata med Krister</p>"},{"location":"material/sql/setup/errorhandling/#communications-link-failure-timeout","title":"\"Communications link failure\" / Timeout","text":"<p>Orsak: DataGrip n\u00e5r inte servern.</p> <p>L\u00f6sning: - Kontrollera att Host och Port \u00e4r r\u00e4tt. - Se till att du har internetanslutning. - Om du \u00e4r bakom brandv\u00e4gg eller skola\u2013wifi kan porten vara blockerad \u2013 testa annan uppkoppling.</p>"},{"location":"material/sql/setup/errorhandling/#no-schemas-selected","title":"\"No schemas selected\"","text":"<p>Orsak: Du \u00e4r inloggad, men inga databaser visas i explorern.</p> <p>L\u00f6sning: - \u00d6ppna inst\u00e4llningarna f\u00f6r anslutningen. - G\u00e5 till fliken Schemas och bocka i de scheman du vill arbeta med. - Uppdatera explorern.</p>"},{"location":"material/sql/setup/errorhandling/#unknown-database","title":"\"Unknown database \u2026\"","text":"<p>Orsak: Du f\u00f6rs\u00f6ker ansluta direkt till en databas som inte finns eller som du inte har r\u00e4ttigheter till.</p> <p>L\u00f6sning: - L\u00e4mna f\u00e4ltet Database tomt i anslutningen. - V\u00e4lj schema senare i fliken Schemas.</p>"},{"location":"material/sql/setup/errorhandling/#driver-files-are-missing","title":"\"Driver files are missing\"","text":"<p>Orsak: DataGrip hittar inte MariaDB-drivrutinen.</p> <p>L\u00f6sning: - Klicka p\u00e5 Download missing driver files i anslutningsdialogen. - Starta om DataGrip (OBS! kan bugga annars)</p>"},{"location":"material/sql/setup/errorhandling/#sql-fel-tex-syntax-error","title":"SQL-fel (t.ex. syntax error)","text":"<p>Orsak: Din SQL-fr\u00e5ga inneh\u00e5ller ett stavfel eller saknar korrekt syntax.</p> <p>L\u00f6sning: - L\u00e4s felmeddelandet i resultatrutan \u2013 d\u00e4r st\u00e5r ofta vilken rad felet finns p\u00e5. - Dubbelkolla kommandot mot SQL-syntaxen f\u00f6r MariaDB.</p>"},{"location":"material/sql/setup/errorhandling/#query-execution-was-interrupted","title":"\"Query execution was interrupted\"","text":"<p>Orsak: Fr\u00e5gan tog f\u00f6r l\u00e5ng tid eller stoppades manuellt.</p> <p>L\u00f6sning: - Kontrollera att du inte gl\u00f6mt en <code>WHERE</code> i t.ex. <code>DELETE</code> eller <code>UPDATE</code>. - Om fr\u00e5gan \u00e4r korrekt men tar l\u00e5ng tid \u2013 f\u00f6rs\u00f6k optimera tabellen (index) eller begr\u00e4nsa urvalet.</p>"},{"location":"material/sql/setup/errorhandling/#tips-for-att-undvika-problem","title":"Tips f\u00f6r att undvika problem","text":"<ul> <li>Testa alltid anslutningen med Test Connection n\u00e4r du skapar en ny data source.  </li> <li>Anv\u00e4nd kortkommandot \u2318. (macOS) / Ctrl+. (Windows) f\u00f6r att avbryta l\u00e5nga queries.  </li> <li>Sl\u00e5 p\u00e5 bekr\u00e4ftelse f\u00f6r farliga queries i inst\u00e4llningarna (s\u00e5 att du inte r\u00e5kar k\u00f6ra <code>DROP</code> eller <code>DELETE</code> utan <code>WHERE</code>).  </li> <li>Om n\u00e5got kr\u00e5nglar \u2013 starta om DataGrip</li> </ul>"},{"location":"material/sql/setup/exampledb/","title":"Exempeldatabas","text":"<p>F\u00f6r att g\u00f6ra exemplen tydliga anv\u00e4nder vi genomg\u00e5ende en skoldatabas. Den inneh\u00e5ller fyra tabeller:  </p> <ul> <li>Student \u2013 information om studenter  </li> <li>Teacher \u2013 information om l\u00e4rare  </li> <li>Course \u2013 information om kurser och vilken l\u00e4rare som h\u00e5ller kursen  </li> <li>Enrollment \u2013 kopplingstabell mellan studenter och kurser, inklusive datum och betyg  </li> </ul> <p>P\u00e5 s\u00e5 s\u00e4tt kan vi visa vanliga scenarier i en databas: - En-till-m\u00e5nga-relationer (t.ex. en l\u00e4rare kan ha flera kurser) - M\u00e5nga-till-m\u00e5nga-relationer (t.ex. en student kan g\u00e5 flera kurser, och en kurs kan ha flera studenter)  </p>"},{"location":"material/sql/setup/exampledb/#som-er-diagram","title":"Som ER-diagram","text":"<p>Som ER-diagram illustreras databasen s\u00e5h\u00e4r: </p>"},{"location":"material/sql/setup/exampledb/#som-relationsschema","title":"Som relationsschema","text":"<p>Som relationsschema illustreras databasen s\u00e5h\u00e4r: </p>"},{"location":"material/sql/setup/exampledb/#databasdefinition","title":"Databasdefinition","text":"<p>S\u00e5h\u00e4r ser databasen ut i SQL-kod. Se nedan f\u00f6r hur du kan l\u00e4gga in den och querya mot den.</p> <pre><code>-- Skapa Student-tabellen med auto-inkrement p\u00e5 Id\nCREATE TABLE Student (\n    Id INT AUTO_INCREMENT PRIMARY KEY,   -- Auto-inkrementerande Id\n    Name VARCHAR(100),                   -- Studentens namn\n    Email VARCHAR(100),                  -- Studentens e-post\n    DateOfBirth DATE                     -- Studentens f\u00f6delsedatum\n);\n\n-- Skapa Teacher-tabellen med auto-inkrement p\u00e5 Id\nCREATE TABLE Teacher (\n    Id INT AUTO_INCREMENT PRIMARY KEY,   -- Auto-inkrementerande Id\n    Name VARCHAR(100),                   -- L\u00e4rarens namn\n    Email VARCHAR(100)                   -- L\u00e4rarens e-post\n);\n\n-- Skapa Course-tabellen med auto-inkrement p\u00e5 Id\nCREATE TABLE Course (\n    Id INT AUTO_INCREMENT PRIMARY KEY,   -- Auto-inkrementerande Id\n    Name VARCHAR(100),                   -- Namnet p\u00e5 kursen\n    Credits INT,                         -- Antal po\u00e4ng f\u00f6r kursen\n    TeacherId INT                        -- L\u00e4rarens Id som h\u00e5ller kursen\n);\n\n-- Skapa Enrollment-tabellen (mellanliggande tabell f\u00f6r m\u00e5nga-till-m\u00e5nga)\nCREATE TABLE Enrollment (\n    Id INT AUTO_INCREMENT PRIMARY KEY,   -- Auto-inkrementerande Id\n    StudentId INT,                       -- Studentens Id\n    CourseId INT,                        -- Kursens Id\n    EnrollmentDate DATE,                 -- Datum f\u00f6r registreringen\n    Grade INT                            -- Betyg f\u00f6r kursen (0 - IG, 1 - G, 2 - VG)\n);\n</code></pre> <p>Skapa f\u00f6rst en databas (<code>CREATE DATABSE yh_dittnamn_schooldb</code>). Sedan kan du \u00f6ppna denna fil och k\u00f6ra run i just den databasen eller \u00f6ppna en ny query och klistra in inneh\u00e5llet i filen.</p> <p>\ud83d\udce5 Ladda ner exempeldatabasen (schooldb.sql)</p>"},{"location":"material/sql/setup/install/","title":"DataGrip \u2013 Installation och f\u00f6rsta anslutning","text":"<p>DataGrip \u00e4r JetBrains databas-manager.</p> <p>Som student f\u00e5r du en gratis licens genom din skolmail @skola.boras.se. Den g\u00e4ller i ett \u00e5r (men jag tror du kan f\u00f6rl\u00e4nga den). Ans\u00f6k h\u00e4r</p>"},{"location":"material/sql/setup/install/#1-ladda-ner-och-installera-datagrip","title":"1. Ladda ner och installera DataGrip","text":"<ol> <li>G\u00e5 till https://www.jetbrains.com/datagrip/.</li> <li>Klicka p\u00e5 Download och v\u00e4lj ditt operativsystem (Windows, macOS eller Linux).</li> <li>Installera programmet som vanligt.</li> </ol>"},{"location":"material/sql/setup/install/#2-aktivera-licensen-med-studentkonto","title":"2. Aktivera licensen med studentkonto","text":"<ol> <li>Starta DataGrip.</li> <li>N\u00e4r du blir tillfr\u00e5gad om licens, v\u00e4lj att skapa konto och logga in med studentkonto-mailen.</li> <li>Anv\u00e4nd din skolmail, typ <code>apa001@skola.boras.se</code>.</li> <li>F\u00f6lj instruktionerna f\u00f6r att aktivera din studentlicens.</li> <li>Det borde funka automatiskt (det var ett \u00e5r sedan jag gjorde detta sj\u00e4lv s\u00e5 jag minns inte exakt)</li> </ol>"},{"location":"material/sql/setup/setup/","title":"DataGrip setup","text":"<p>DataGrip \u00e4r JetBrains databas-IDE. H\u00e4r visar vi hur du kopplar upp dig mot en MariaDB-databas med ditt studentkonto.</p>"},{"location":"material/sql/setup/setup/#1-lagg-till-ny-anslutning","title":"1. L\u00e4gg till ny anslutning","text":"<p>Tryck p\u00e5 plustecknet i v\u00e4nstra h\u00f6rnet och v\u00e4lj ** New ** \u2192 ** Data Source \u2192 MariaDB**.  </p> <p>Fyll i anslutningsuppgifterna:</p> <ul> <li>Name: <code>Kristers server</code> (d\u00f6p till vad du vill, det sparas bara lokalt i DataGrip)</li> <li>Host: <code>comet-direct.usbx.me</code></li> <li>Port: <code>17815</code></li> <li>User: <code>yh_f\u00f6rnamn</code></li> <li>Password: <code>hemligt</code></li> <li>Database: kan l\u00e4mnas tomt</li> </ul> <p>Klicka sedan p\u00e5 Download missing driver files om DataGrip ber om det, s\u00e5 att MariaDB-drivrutinerna installeras.</p> <p></p> <p>Tryck Test Connection f\u00f6r att kontrollera att allt fungerar och v\u00e4lj sedan OK.</p> <p>Om det inte funkar: l\u00e4s felmeddelandet! Kanske har du fel anv\u00e4ndarnamn och l\u00f6senord?</p>"},{"location":"material/sql/setup/setup/#2-valj-vilka-scheman-som-ska-visas","title":"2. V\u00e4lj vilka scheman som ska visas","text":"<p>Efter att du sparat anslutningen ser du den i v\u00e4nstermenyn i Database Explorer.</p> <p>Klicka p\u00e5 texten \u201cNo schemas selected\u201d f\u00f6r att v\u00e4lja vilka databaser (scheman) du vill se. Om du har ett helt nytt konto kanske du inte har n\u00e5gra scheman eftersom du inte skapat n\u00e5gra databaser.</p> <p>Ett schema i en databas \u00e4r en samling tabeller, vyer och andra objekt som h\u00f6r ihop och organiserar data inom samma databas.</p> <p></p> <p></p>"},{"location":"material/sql/setup/setup/#3-oppna-en-sql-konsol","title":"3. \u00d6ppna en SQL-konsol","text":"<p>H\u00f6gerklicka p\u00e5 din anslutning \u2192 v\u00e4lj New \u2192 Query Console. </p> <p>Nu f\u00e5r du en editor d\u00e4r du kan skriva och k\u00f6ra SQL. H\u00e4r kan du t.ex. skapa en ny databas med <code>CREATE DATABASE yh_f\u00f6rnamn_mindatabas</code>. </p>"},{"location":"material/sql/setup/setup/#4-skriv-och-kor-sql","title":"4. Skriv och k\u00f6r SQL","text":"<p>I Query Console kan du skriva SQL och k\u00f6ra det med \u2318\u23ce (Cmd+Enter) p\u00e5 Mac eller Ctrl+Enter p\u00e5 Windows.</p> <p>Exempel: skapa en databas:</p> <pre><code>CREATE DATABASE yh_f\u00f6rnamn_mindatabas;\n</code></pre>"}]}